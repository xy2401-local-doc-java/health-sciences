<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Common Development Tasks</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093" />
<meta name="dcterms.created" content="2018-05-25T8:22:13Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Life Sciences Data Hub Application Developer's Guide" />
<meta name="dcterms.identifier" content="E95831-01" />
<meta name="dcterms.isVersionOf" content="LSHDG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2018,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="dev_ui.htm" title="Previous" type="text/html" />
<link rel="Next" href="tables.htm" title="Next" type="text/html" />
<link rel="alternate" href="LSHDG.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="LSHDG.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="LSHDG.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">6/20</span> <!-- End Header -->
<div id="LSHDG190" class="chapter"><a id="BEICCBAA"></a>
<h1 class="chapter"><span class="secnum">3</span> Common Development Tasks</h1>
<p>This section contains information on the following topics, which are tasks common to the definition of different types of Oracle LSH objects:</p>
<ul>
<li>
<p><a href="#CHDCGFBE">Creating and Reusing Objects</a></p>
</li>
<li>
<p><a href="#CHDBIJAH">Naming Objects</a></p>
</li>
<li>
<p><a href="#BEIFCHCG">Viewing Object Instances and Definitions</a></p>
</li>
<li>
<p><a href="#BEIBHCFH">Understanding Object Versions and Checkin/Checkout</a></p>
</li>
<li>
<p><a href="#BEIHAHEE">Upgrading Object Instances to a New Definition Version</a></p>
</li>
<li>
<p><a href="#CHDDGDBJ">Copying, Cloning, and Moving Objects</a></p>
</li>
<li>
<p><a href="#CHDCAJGD">Removing Objects</a></p>
</li>
<li>
<p><a href="#CHDJADAD">Classifying Objects and Outputs</a></p>
</li>
<li>
<p><a href="#CHDFEFII">Applying Security to Objects and Outputs</a></p>
</li>
<li>
<p><a href="#BABGFFBG">Validating Objects and Outputs</a></p>
</li>
<li>
<p><a href="#CHDBHCJC">Reordering and Renumbering Objects</a></p>
</li>
<li>
<p><a href="#BACBIIJA">Defining and Mapping Table Descriptors</a></p>
</li>
<li>
<p><a href="#BEIGAICB">Creating, Modifying, and Submitting Execution Setups</a></p>
</li>
<li>
<p><a href="#BEIEHAAA">Viewing Data</a></p>
</li>
<li>
<p><a href="#BEIIGDGF">Viewing Jobs</a></p>
</li>
<li>
<p><a href="#BEIEHIJF">Viewing All Outputs of a Program or Report Set</a></p>
</li>
<li>
<p><a href="#CIHDAIFF">Using the Actions Drop-Down List</a></p>
</li>
<li>
<p><a href="#BEIFIDGB">Defining Planned Outputs</a></p>
</li>
</ul>
<p>See also <a href="def_intro.htm#CEGHFGIJ">Chapter 1, "Getting Started"</a>.</p>
<a id="CHDCGFBE"></a>
<div id="LSHDG191" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating and Reusing Objects</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDEHHAG">Finding an Appropriate Definition</a></p>
</li>
<li>
<p><a href="#CHDJIJBH">Reusing Existing Definitions</a></p>
</li>
<li>
<p><a href="#CHDGAIDJ">Creating an Instance of an Existing Definition</a></p>
</li>
<li>
<p><a href="#BEIIHIIA">Creating a New Definition and Instance</a></p>
</li>
<li>
<p><a href="#CHDIHBBC">Creating and Using Object Descriptions</a></p>
</li>
</ul>
<p>See also <a href="#CHDBIJAH">Naming Objects</a>.</p>
<p>For information on creating new definitions, see the section for each object:</p>
<ul>
<li>
<p><a href="tables.htm#CHDFICHH">Creating a New Table Definition and Instance</a>; includes instructions for creating an Oracle LSH Table from a SAS data set</p>
</li>
<li>
<p><a href="progs.htm#CIHJGEEH">Creating a New Program Definition and Instance</a></p>
</li>
<li>
<p><a href="load.htm#BJEHJHDC">Creating a New Load Set Definition and Instance</a></p>
</li>
<li>
<p><a href="rsets.htm#BABDCDED">Creating a New Report Set Definition and Instance</a></p>
</li>
<li>
<p><a href="dm.htm#CIACDHBA">Creating a New Data Mart Definition and Instance</a></p>
</li>
<li>
<p><a href="wkfl.htm#BEIJFIFG">Creating a New Workflow Definition and Instance</a></p>
</li>
<li>
<p><a href="defvis.htm#CHDCHEDH">Creating a New Business Area Definition and Instance</a></p>
</li>
</ul>
<a id="CHDEHHAG"></a>
<div id="LSHDG192" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Finding an Appropriate Definition</h3>
<p>You can look for an appropriate definition to use in several ways:</p>
<ul>
<li>
<p>If you know the location of the definition you need to use, click <span class="bold">Create an Instance of an Existing Definition</span> and use the Search utility there; see <a href="#BEIIHFBF">"Using the Search and Select Window"</a>.</p>
</li>
<li>
<p>To search with other criteria, including classifications and validation status, go to any screen with the Advanced Search utility, search, and make a note of the results. See "Advanced Search" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub User's Guide</span></span> for instructions.</p>
</li>
<li>
<p>In the main Applications screen, navigate to a Domain or Application Area where you think you might find an appropriate definition, and click Maintain Definitions to see all the definitions in that Domain or Application Area library. See <a href="dev_ui.htm#CBBFJCEB">"Navigating in the Applications Tab"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDJIJBH"></a>
<div id="LSHDG194" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Reusing Existing Definitions</h3>
<p>There are several ways you can reuse an existing definition:</p>
<ul>
<li>
<p><span class="bold">Create an instance of an existing definition and use the definition as it is</span>. This is the easiest and fastest way to reuse a definition, requiring no revalidation of the definition. Use this method if the definition you need is validated and appropriate for your needs (see <a href="#CHDGAIDJ">"Creating an Instance of an Existing Definition"</a>).</p>
</li>
<li>
<p><span class="bold">Create an instance of an existing definition and then copy the definition to the current Application Area</span>. After you create an instance of an existing definition, check in the definition through the instance if it is not already checked in. Then check it out, selecting the option to create a copy of the definition in the current Application Area (see <a href="#BEIGBACE">"Checking Out an Object Definition through an Instance"</a>) and modify it as necessary.</p>
<p>This method leaves the original definition unchanged and readily available for reuse elsewhere. You must validate the copied definition when you have finished modifying it.</p>
<p>The system enforces unique object names within a container; see <a href="#CHDBIJAH">"Naming Objects"</a>.</p>
</li>
<li>
<p><span class="bold">Create an instance of an existing definition and modify it as necessary</span>. If you have the necessary privileges, you can modify the definition through the new instance. The system creates a new version of the definition, which you must revalidate. You can label the new version to distinguish it from other versions; see <a href="#BEIHIEIG">"Version Labels"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDGAIDJ"></a>
<div id="LSHDG196" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating an Instance of an Existing Definition</h3>
<p>Whenever possible, choose this option. It saves work by reducing the time required to define and validate objects and by promoting consistency across the application. See <a href="#CHDEHHAG">"Finding an Appropriate Definition"</a>.</p>
<p><a href="#BEIGIECJ">Figure 3-1</a> shows the process of creating an instance of an existing Program definition. The process is similar for all object types. When you create a new instance of an existing Program definition, you do not need to create Table Descriptors, Source Code, Parameters, or Planned Outputs because they are included in the Program definition. You do need to map the Table Descriptors to Table instances and define at least one Execution Setup. You then install the Program instance and the Table instances to which it is mapped, run and test the Program instance, validate it and assign user groups to it according to your company's policies.</p>
<div id="LSHDG197" class="figure">
<p class="titleinfigure"><a id="BEIGIECJ"></a>Figure 3-1 Creating a New Program Instance from an Existing Program Definition</p>
<img width="493" height="97" src="img/cr_prog_inst_only.gif" alt="Description of Figure 3-1 follows" /><br />
<a id="sthref15" href="img_text/cr_prog_inst_only.htm">Description of ''Figure 3-1 Creating a New Program Instance from an Existing Program Definition''</a><br />
<br /></div>
<!-- class="figure" -->
<p>To create an Instance of an existing Definition:</p>
<ol>
<li>
<p>Select <span class="bold">Create an Instance of an Existing Definition</span> and click <span class="bold">Apply</span>.</p>
<p>The system displays the <span class="bold">Definition Source</span> field with a Search icon as shown here:</p>
<img width="28" height="29" src="img/icon_search.gif" alt="Description of icon_search.gif follows" /><br />
<a id="sthref16" href="img_text/icon_search.htm">Description of the illustration ''icon_search.gif''</a><br />
<br /></li>
<li>
<p>If you know the name of the object definition you want, enter it in the <span class="bold">Definition Source</span> field.</p>
<p>If not, click the Search icon. The Search and Select pop-up window appears. See <a href="#BEIIHFBF">"Using the Search and Select Window"</a> below.</p>
</li>
<li>
<p>Select a subtype and classifications for the new object instance, if necessary.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>. The system creates a new instance of the definition you specified in the current Work Area.</p>
</li>
<li>
<p>For all object types except Tables, you must map the Table Descriptors; see <a href="#CIHDCCDA">"Mapping Table Descriptors to Table Instances"</a> for information.</p>
<p>For all executable objects, you must create at least one Execution Setup; see <a href="#BEIGAICB">"Creating, Modifying, and Submitting Execution Setups"</a>.</p>
</li>
</ol>
<a id="BEIIHFBF"></a>
<div id="LSHDG198" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using the Search and Select Window</h4>
<p>The Search and Select window is called from many screens in Oracle LSH. It receives its context from the calling screen. For example, if you click the Search icon in the Create Program screen, the Search and Select function finds only Program definitions.</p>
<p>Enter values in the following fields:</p>
<ol>
<li>
<p><span class="bold">Domain</span>. From the drop-down list, select the name of the Domain that contains the definition you need.</p>
<p>If the Domain you specified contains one or more child Domains, you can see the child domain in the Domain drop-down list with the name of all parent domains preceding it and separated by a right angle bracket (&gt;). For example:</p>
<p>Domain 1 &gt; Child Domain 1 &gt; Child Domain 2 &gt; Child Domain 3</p>
<p>The system populates the <span class="bold">Application Area</span> drop-down list with the names of Application Areas contained in that Domain.</p>
</li>
<li>
<p><span class="bold">Application Area</span>. If the definition is contained directly in a Domain library, do not select an Application Area.</p>
<p>If the definition is contained in an Application Area, select the Application Area from the drop-down list.</p>
</li>
<li>
<p><span class="bold">Search By</span>. If you know the name or version label of the object, select either <span class="bold">Name</span> or <span class="bold">Version Label</span> from the <span class="bold">Search By</span> drop-down list and enter either the name or version label in the field to the right. You can use special characters such as the % wildcard. For example, if you enter <code dir="ltr">Study_12345%</code> as a name, the system retrieves all objects whose name begins with Study_12345.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For some object types this field is case-sensitive. If an object's name begins with STUDY_12345 and you enter <code dir="ltr">Study_12345%</code> the system does not retrieve the object because its name is not in uppercase.</div>
</li>
<li>
<p><span class="bold">Display All Versions</span> If checked, the system returns all versions of the object with the name you specified in the <span class="bold">Search By</span> field. If unchecked, the system returns only the latest version. (If you specified Version Label in the Search By field, the system returns only the version with that label.)</p>
</li>
<li>
<p><span class="bold">Display Not Null Version Labels</span> If checked, the system returns only object versions with a version label. This checkbox is relevant only if Name is selected in the Search By field above.</p>
</li>
<li>
<p>Click <span class="bold">Go</span>. The system displays the results of the search, including, for each definition retrieved, its name, version number, version label (if any), validation status, the username of the person who created the definition, and the date on which it was created. The system retrieves object definitions only if they are currently checked in.</p>
<div class="infobox-note">
<p class="notep1">Notes:</p>
You can set your Preferences to make the system return only definitions with a validation status of Production.
<p>You cannot create a new object instance based on a definition whose validation status is set to Retired.</p>
</div>
</li>
<li>
<p>Select the definition you want by clicking the icon in the Quick Select column, or by clicking its radio button and then clicking the <span class="bold">Select</span> button. The system returns you to the screen you came from, displaying the name of the object you selected.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BEIIHIIA"></a>
<div id="LSHDG200" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating a New Definition and Instance</h3>
<p>If no object definition exists that suits your needs, or that you can modify to suit your needs, you must create a new one.</p>
<p>When you create a new definition and instance at the same time, the system simultaneously creates the definition in the current Application Area and an instance of it in the current Work Area. As you save your work, the system applies your changes to the appropriate object&mdash;definition or instance. The system applies the name and description you enter to both the definition and instance unless there is a conflict with either one; see <a href="#CHDBIJAH">"Naming Objects"</a>.</p>
<p><a href="#BEIFBFEA">Figure 3-2</a> shows the process of creating a new Program definition and instance. The process is similar for all object types. You first create the object as a whole, classify both the definition and the instance, then define component objects: in the case of Programs these include Table Descriptors, Source Code, Parameters, and Planned Outputs. All executable instances require mapping Table Descriptors to Table instances and defining at least one Execution Setup. You must <span class="bold">install</span> all object instances in their Work Area, assign user groups for object security and validate the definition and the instance according to your company's policies.</p>
<div id="LSHDG201" class="figure">
<p class="titleinfigure"><a id="BEIFBFEA"></a>Figure 3-2 Creating a New Program Definition and Instance</p>
<img width="892" height="145" src="img/cr_prog_def_inst.gif" alt="Description of Figure 3-2 follows" /><br />
<a id="sthref17" href="img_text/cr_prog_def_inst.htm">Description of ''Figure 3-2 Creating a New Program Definition and Instance''</a><br />
<br /></div>
<!-- class="figure" -->
<p>Specific instructions for each object type are included in the section on each type:</p>
<ul>
<li>
<p><a href="tables.htm#CHDFICHH">Creating a New Table Definition and Instance</a>; includes instructions for creating an Oracle LSH Table from a SAS data set</p>
</li>
<li>
<p><a href="progs.htm#CIHJGEEH">Creating a New Program Definition and Instance</a></p>
</li>
<li>
<p><a href="load.htm#BJEHJHDC">Creating a New Load Set Definition and Instance</a></p>
</li>
<li>
<p><a href="rsets.htm#BABDCDED">Creating a New Report Set Definition and Instance</a></p>
</li>
<li>
<p><a href="dm.htm#CIACDHBA">Creating a New Data Mart Definition and Instance</a></p>
</li>
<li>
<p><a href="wkfl.htm#BEIJFIFG">Creating a New Workflow Definition and Instance</a></p>
</li>
<li>
<p><a href="defvis.htm#CHDCHEDH">Creating a New Business Area Definition and Instance</a></p>
</li>
</ul>
<p>There are also instructions for creating the following component objects:</p>
<ul>
<li>
<p><a href="vars.htm#BACHGJBH">Defining Parameters</a></p>
</li>
<li>
<p><a href="#BACBIIJA">Defining and Mapping Table Descriptors</a></p>
</li>
<li>
<p><a href="progs.htm#BACBGAIC">Defining Source Code</a></p>
</li>
<li>
<p><a href="tables.htm#CHDGDJDD">Defining Table Columns</a></p>
</li>
<li>
<p><a href="vars.htm#BCFGFHGD">Defining Variables</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDIHBBC"></a>
<div id="LSHDG213" class="sect2">
<h3 class="sect2">Creating and Using Object Descriptions</h3>
<p>The description of an object definition should provide information to help Definers decide if they want to use the definition.</p>
<p>You can search for words and phrases in the description using the Advanced Search feature.</p>
<p>Descriptions can contain up to 2000 characters.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDBIJAH"></a>
<div id="LSHDG203" class="sect1">
<h2 class="sect1">Naming Objects</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BEIHCCHJ">Special Characters and Reserved Words</a></p>
</li>
<li>
<p><a href="#BEICDEAH">Duplicate Names: System Appends _1</a></p>
</li>
<li>
<p><a href="#BEIIIBAC">Automatic Name Truncation</a></p>
</li>
<li>
<p><a href="#BEICGFAE">Naming Rules for Specific Object Types</a></p>
</li>
<li>
<p><a href="#BEIICCBD">Customizable Naming Validation Package</a></p>
</li>
</ul>
<p>Make an object name as descriptive as possible to help other users understand its purpose. Your company may develop naming conventions; see <a href="#BEIICCBD">"Customizable Naming Validation Package"</a>.</p>
<a id="BEIHCCHJ"></a>
<div id="LSHDG204" class="sect2">
<h3 class="sect2">Special Characters and Reserved Words</h3>
<p>To avoid problems, <span class="bold">do not use special characters</span> such as ( &amp; @ * $ | % ~ -) in object names, except for underscore (_). Also <span class="bold">do not use Oracle SQL or PL/SQL reserved words</span> in object names, especially the Oracle name. For lists of reserved words, see:</p>
<p><span class="italic">Oracle&reg; DatabaseSQL Language Reference</span> at <code dir="ltr"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e17118.pdf">http://download.oracle.com/docs/cd/E11882_01/server.112/e17118.pdf</a><a href=""></a></code></p>
<p><span class="italic">Oracle&reg; Database PL/SQL Language Reference</span> at <code dir="ltr"><a href="http://download.oracle.com/docs/cd/E11882_01/appdev.112/e17126.pdf">http://download.oracle.com/docs/cd/E11882_01/appdev.112/e17126.pdf</a><a href=""></a></code></p>
<p>For the latest information, you can generate a list of all keywords and reserved words with the V$RESERVED_WORDS view, described in the <span class="italic">Oracle&reg; Database Reference</span> at <code dir="ltr"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e17110.pdf">http://download.oracle.com/docs/cd/E11882_01/server.112/e17110.pdf</a><a href=""></a></code>.</p>
</div>
<!-- class="sect2" -->
<a id="BEICDEAH"></a>
<div id="LSHDG205" class="sect2">
<h3 class="sect2">Duplicate Names: System Appends _1</h3>
<p>Oracle LSH enforces unique naming for each object type in the same container, whether the container is an organizational object&mdash;Domain, Application Area or Work Area&mdash;or a Report Set or Workflow. (Report Sets contain Programs. Workflows may contain Programs, Load Sets, Report Sets, and/or Data Marts.) The system enforces unique names only within the immediate container; for example, you cannot have two Program instances named Program_A in the same Workflow, but you can have a Program_A in a Workflow and another Program_A directly in the Application Area that contains the Workflow.</p>
<p>If you try to create a second object of the same type and name in the same container, the system creates the object but automatically appends an underscore and number 1 (_1) to the name. If you add a third object of the same type and name, the system increments the number (_2). For example, if you create a Program called Merge in Application Area 12345, and then create another Program called Merge in the same Application Area, the system names the new Program Merge_1. If you create a third Program called Merge in the same Application Area, the system names the new Program Merge_2.</p>
</div>
<!-- class="sect2" -->
<a id="BEIIIBAC"></a>
<div id="LSHDG206" class="sect2">
<h3 class="sect2">Automatic Name Truncation</h3>
<p>Names can contain up to 200 characters. However, the system populates the values for Oracle Name and SAS Name with the value you enter for Name stored in uppercase, truncating the Oracle Name to 30 characters and the SAS Name to 32 characters. You can change the Oracle and SAS Names.</p>
<p>When you create a new object by uploading a table, view, data set, or column, the system truncates the Oracle Name and also replaces the last two characters with the number 01 or, if an object of the same type with the same name already exists in the same container, the next highest number (in this case, 02).</p>
</div>
<!-- class="sect2" -->
<a id="BEIBAEBC"></a>
<div id="LSHDG207" class="sect2">
<h3 class="sect2">Keep Container and Object Names Short for Integrated Development Environments</h3>
<p>Although names can contain up to 200 characters, the maximum length of a file path is 256 characters in Windows. When you open an integrated development environment (IDE) such as SAS or run a SAS Program on your personal computer, Oracle LSH uses the actual full file path for Source Code definitions, Table instances, and the SAS runtime script. If the full file path exceeds this length you get an error and cannot open the IDE or run the Program. You can use a package to limit object name size or display an error when an object's file path is too long; see <a href="#BEIICCBD">"Customizable Naming Validation Package"</a>.</p>
<p>The full file path begins with the Oracle LSH username of the person who opens the IDE followed by the directory name <code dir="ltr">cdrwork</code>. It also includes all Subdomains in the path, if any. (The maximum number of Subdomains is 9. This number is configurable.)</p>
<ul>
<li>
<p><span class="bold">Source Code definitions</span>. The path for Source Code definitions is: <code dir="ltr"><span class="codeinlineitalic">username</span></code>&gt;<code dir="ltr">cdrwork</code>&gt;<code dir="ltr"><span class="codeinlineitalic">Domain_name</span></code>&gt;<code dir="ltr"><span class="codeinlineitalic">Subdomain_name(s)</span></code> (0-9)&gt;<code dir="ltr"><span class="codeinlineitalic">Application_ Area_name</span></code>&gt;<code dir="ltr"><span class="codeinlineitalic">Program_definition_name</span></code>&gt;<code dir="ltr"><span class="codeinlineitalic">Source_Code_definition_name</span></code><code dir="ltr"><span class="codeinlineitalic">version_number</span></code>&gt;<code dir="ltr"><span class="codeinlineitalic">fileref</span></code>&gt;<code dir="ltr"><span class="codeinlineitalic">source_code_filename</span></code></p>
</li>
<li>
<p><span class="bold">Table instances</span>. The path for Table instances is: <code dir="ltr"><span class="codeinlineitalic">username</span></code>&gt;<code dir="ltr">cdrwork</code>&gt;<code dir="ltr"><span class="codeinlineitalic">Domain_name</span></code>&gt;<code dir="ltr"><span class="codeinlineitalic">Subdomain_name(s)</span></code> (0-9)&gt;<code dir="ltr"><span class="codeinlineitalic">Application_ Area_name</span></code>&gt;<code dir="ltr"><span class="codeinlineitalic">Work_Area_name</span></code>&gt;program instance name&gt;program version&gt;<code dir="ltr"><span class="codeinlineitalic">Table_Descriptor_libname</span></code>&gt; <code dir="ltr"><span class="codeinlineitalic">Table_Descriptor_SAS_name</span></code>&gt;</p>
</li>
<li>
<p><span class="bold">SAS runtime script</span>. The path for x is: <code dir="ltr"><span class="codeinlineitalic">username</span></code>&gt;<code dir="ltr">cdrwork</code>&gt;<code dir="ltr"><span class="codeinlineitalic">Domain_name</span></code>&gt;<code dir="ltr"><span class="codeinlineitalic">Subdomain_name(s)</span></code> (0-9)&gt;<code dir="ltr"><span class="codeinlineitalic">Application_ Area_name</span></code>&gt;<code dir="ltr"><span class="codeinlineitalic">Work_Area_name</span></code>&gt;<code dir="ltr"><span class="codeinlineitalic">Program_instance_name</span></code>&gt;<code dir="ltr"><span class="codeinlineitalic">version_number</span></code>&gt;<code dir="ltr">setup</code></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BEICGFAE"></a>
<div id="LSHDG208" class="sect2">
<h3 class="sect2">Naming Rules for Specific Object Types</h3>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BEIEIIJG">Naming Domains</a></p>
</li>
<li>
<p><a href="#BEICGHJD">Naming Source Code Objects</a></p>
</li>
<li>
<p><a href="#BEIECGAB">Naming Parameters</a></p>
</li>
<li>
<p><a href="#BEIHFBIH">Naming OBIEE Business Areas</a></p>
</li>
</ul>
<a id="BEIEIIJG"></a>
<div id="LSHDG1921" class="sect3">
<h4 class="sect3">Naming Domains</h4>
<p>If you plan to export a Domain to another Oracle LSH instance, you may want to avoid using spaces in its name. Domain names with spaces must be entered with escape characters surrounding it in the Import Export Utility; for example: <code dir="ltr">\"</code> <code dir="ltr"><span class="codeinlineitalic">domain name</span></code><code dir="ltr">\"</code>.</p>
</div>
<!-- class="sect3" -->
<a id="BEICGHJD"></a>
<div id="LSHDG1922" class="sect3">
<h4 class="sect3">Naming Source Code Objects</h4>
<p>There are important requirements for Source Code names:</p>
<ul>
<li>
<p>Source Code names must not include reserved words or special characters.</p>
</li>
<li>
<p>Source Code names must include a file extension; for example, .sas for SAS, .rpt for Oracle Reports, or .sql for PL/SQL source code definitions. The system uses the name you enter to name the actual file that contains the source code.</p>
</li>
<li>
<p>A Source Code's Oracle name must not be the same as the Oracle name of either a Table Descriptor or another Source Code in the same PL/SQL Program definition.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BEIECGAB"></a>
<div id="LSHDG1923" class="sect3">
<h4 class="sect3">Naming Parameters</h4>
<p>Do not use spaces in the name of any Parameter you create for use in a Report Set. This will cause an error during Report Set postprocessing because the Parameter name becomes an HTML tag, and spaces are not allowed.</p>
</div>
<!-- class="sect3" -->
<a id="BEIHFBIH"></a>
<div id="LSHDG1924" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Naming OBIEE Business Areas</h4>
<p>Give a unique name to each Business Area that uses the same service location.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BEIICCBD"></a>
<div id="LSHDG212" class="sect2">
<h3 class="sect2">Customizable Naming Validation Package</h3>
<p>Oracle LSH object creation and modification code includes a call to a predefined validation package from every object name field. By default, this package performs no validation and returns a value of TRUE, allowing users to enter any name in the field. However, you can customize the package to enforce your own naming conventions, full path length, or other object attribute standards. See "Customizing Object Validation Requirements" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub System Administrator's Guide</span></span>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEIFCHCG"></a>
<div id="LSHDG215" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Viewing Object Instances and Definitions</h2>
<p>The process of viewing and modifying object instances and definitions is similar for all object types. This section includes the following topics:</p>
<ul>
<li>
<p><a href="#BEIDDCFH">Viewing Object Instances</a></p>
</li>
<li>
<p><a href="#BEIBCFIJ">Viewing Object Definitions</a></p>
</li>
</ul>
<a id="BEIDDCFH"></a>
<div id="LSHDG216" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Viewing Object Instances</h3>
<p>When you view an object instance (such as a Program or Table instance) in a Work Area, you see all the metadata details that apply to the object instance, including the properties that belong to the instance and the properties that belong to the definition.</p>
<p>The fields and settings in the upper portion of the screen (labeled "Instance Properties") belong to the object instance. The fields and settings in the lower portion of the screen (labeled "Definition Properties"), including the information under the subtabs in the middle of the screen, belong to the definition. The exception&mdash;for all objects that contain Table Descriptors&mdash;is Table Descriptor mappings, which belong to the instance but are displayed with the Table Descriptors, which belong to the definition.</p>
<p>Use the <span class="bold">Actions</span> drop-down list to see other characteristics of the instance, including its classifications, security user group assignments, validation supporting information, metadata reports, and Execution Setups.</p>
</div>
<!-- class="sect2" -->
<a id="BEIBCFIJ"></a>
<div id="LSHDG217" class="sect2">
<h3 class="sect2">Viewing Object Definitions</h3>
<p>You can view object definitions two ways:</p>
<ul>
<li>
<p><a href="#BEIEAJBF">Viewing Object Definitions in Domains and Application Areas</a></p>
</li>
<li>
<p><a href="#BEICAHFA">Viewing Object Definitions from Instances in a Work Area</a></p>
</li>
</ul>
<a id="BEIEAJBF"></a>
<div id="LSHDG218" class="sect3">
<h4 class="sect3">Viewing Object Definitions in Domains and Application Areas</h4>
<p>To see an object definition where it is located, do the following:</p>
<ol>
<li>
<p>In the main Applications screen, click the Domain or Application Area where the object you want to see is located.</p>
</li>
<li>
<p>Expand the relevant object type (such as Report Set or Program).</p>
</li>
<li>
<p>Click the link for the definition you want to see.</p>
</li>
</ol>
<p>You can see old versions of object definitions in the Version History screen from the Actions drop-down list (see <a href="#BEIHEFCJ">"Version History"</a>).</p>
<p>You can also use Advanced Search to find old versions of objects or retired objects. See "Advanced Search" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub User's Guide</span></span>.</p>
</div>
<!-- class="sect3" -->
<a id="BEICAHFA"></a>
<div id="LSHDG219" class="sect3">
<h4 class="sect3">Viewing Object Definitions from Instances in a Work Area</h4>
<p>When you look at an object instance in a Work Area, you see many details of its source definition as well. The fields and settings in the lower portion of the screen (labeled "Definition Properties"), including the information under the subtabs in the middle of the screen, belong to the definition. The exception&mdash;for all objects that contain Table Descriptors&mdash;is Table Descriptor mappings, which belong to the instance but are displayed with the Table Descriptors, which belong to the definition.</p>
<p>In an object instance in a Work Area, you cannot see the source definition's classifications and user group assignments. To see these, you must go to the definition in its Domain or Application Area. You can do this directly from the Work Area as follows:</p>
<ol>
<li>
<p>Click the Definition link in the Instance Properties section of the screen. The system opens the Properties screen of the definition in its Domain or Application Area.</p>
</li>
<li>
<p>Select the appropriate item&mdash;Apply Security or Assign Classification&mdash;from the <span class="bold">Actions</span> drop-down list and click <span class="bold">Go</span>. The system opens the appropriate screen.</p>
</li>
<li>
<p>To return to the object instance you came from, click the second last link in the breadcrumb at the top of the screen (see <a href="dev_ui.htm#CBBHBICE">"Navigating Using Breadcrumbs"</a>) or click <span class="bold">Return</span> to go back to the Definition page and click the last breadcrumb link from there.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEIBHCFH"></a>
<div id="LSHDG221" class="sect1">
<h2 class="sect1">Understanding Object Versions and Checkin/Checkout</h2>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#BEIBCDGI">About Object Versions</a></p>
</li>
<li>
<p><a href="#CHDDEIBD">Checking Out Objects</a></p>
</li>
<li>
<p><a href="#CHDIGADA">Checking In Objects</a></p>
</li>
<li>
<p><a href="#CHDDIGBG">Undoing Object Checkout</a></p>
</li>
<li>
<p><a href="#BEIHIEIG">Version Labels</a></p>
</li>
<li>
<p><a href="#BEIHEFCJ">Version History</a></p>
</li>
<li>
<p><a href="#CHDHHFEB">Versions of Component Objects</a></p>
</li>
</ul>
<a id="BEIBCDGI"></a>
<div id="LSHDG222" class="sect2">
<h3 class="sect2">About Object Versions</h3>
<p>Oracle LSH keeps all object definitions and instances under version control, maintaining a record of the user who created each new version, the date and time the version was created, and, for definitions explicitly checked out, an optional comment entered by the person who checked it out.</p>
<p>The system creates a new version of an object when it is checked out, either explicitly or implicitly, and applies all changes to the new version until it is checked in. To make further changes you must check it out and modify the new version.</p>
<p>The system creates new object versions with the same user group assignments (security) and classifications as the previous version, but always gives new object versions a validation status of Development, no matter what validation status the previous version had.</p>
<p>When you create a new version of an object definition, instances of the previous version continue to point to the previous version. You can upgrade one or more instances to the new definition if you want to; see <a href="#BEIFHFAA">"Upgrading One or More Instances from the Definition"</a>.</p>
<p>Report Sets' versioning is different from other objects'; see <a href="rsets.htm#CIHJGCGI">Chapter 9, "Defining Report Sets"</a> for information on Report Sets. Domains and Application Areas are not versioned; their version number is always 1.</p>
<p><a id="LSHDG223"></a><span class="subhead3">Using Old Object Definition Versions&nbsp;</span>You can use old versions of object definitions as follows:</p>
<ul>
<li>
<p>Do not upgrade instances. Instances continue to point to the definition version selected when they were created until they are explicitly upgraded.</p>
</li>
<li>
<p>When you create a new instance of an existing object definition, you can select any version of the definition after selecting "Display all Versions;" see <a href="#CHDGAIDJ">"Creating an Instance of an Existing Definition"</a>.</p>
</li>
<li>
<p>You can copy an old version of an object definition at any time from its Version History screen; see <a href="#BEIBJJJI">"Copying an Old Version of an Object Definition"</a>.</p>
</li>
<li>
<p>If an object definition is not already checked out, you can check out an old version of it either from its Version History screen or through an instance that points to the old version.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the definition is already checked out, you have the option to copy the version to the current Application Area.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you check out an old version of an object, the system behaves the same way as when you check out the latest version. It creates a new version with the characteristics of the one you checked out and gives it a version number equal to the latest version number plus one.
<p>The system does not display the fact that the new version is based on an older version. If you want to make that clear, enter a checkout comment or create a version label with the information.</p>
</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDDEIBD"></a>
<div id="LSHDG224" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Checking Out Objects</h3>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BEIGBACE">Checking Out an Object Definition through an Instance</a></p>
</li>
<li>
<p><a href="#BEIHAGGJ">Checking Out an Object Definition Directly</a></p>
</li>
<li>
<p><a href="#BEICAFID">Checking Out an Old Version of an Object Definition</a></p>
</li>
</ul>
<p>When you check out an object, either explicitly or implicitly, Oracle LSH creates a new version of it:</p>
<ul>
<li>
<p>When you click <span class="bold">Update</span> to work on properties of an object definition or instance, Oracle LSH checks the object out.</p>
</li>
<li>
<p>When you explicitly check out an object definition, Oracle LSH checks it out.</p>
</li>
<li>
<p>When you explicitly check out an object definition through an instance of it, Oracle LSH implicitly checks out the instance and points it to the new version of the definition.</p>
</li>
<li>
<p>When you create a new object definition or instance, Oracle LSH creates it as checked out by you, including when you choose to copy the definition and check it out (see <a href="#BEIGBACE">"Checking Out an Object Definition through an Instance"</a>.</p>
</li>
</ul>
<p>While an object is checked out, only the person who initiated the checkout, either explicit or implicit, can modify the object , check it in, or uncheck it. That person can save changes multiple times. The exception is Report Sets, which allow multiple people to work on different sections at the same time.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If another user has already checked out an object definition, you cannot check out the object. However, you can copy the definition and modify the copy.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
People with Checkin Administrator privileges can check in objects checked out by others.</div>
<a id="BEIGBACE"></a>
<div id="LSHDG225" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Checking Out an Object Definition through an Instance</h4>
<p>When you check out an object definition through an instance of it, you have the option to modify the definition in its current Domain or Application Area (if you have the required privileges) or to create a copy of the definition in the current Application Area, where you can modify it as necessary.</p>
<p>The system points the instance to the new version of the definition whether you choose to modify it in its current location or copy the definition to the current Application Area.</p>
<p>To check out an object definition through an instance of it, do the following:</p>
<ol>
<li>
<p>Navigate to the object instance.</p>
</li>
<li>
<p>Click <span class="bold">Check Out</span>. The Check Out screen appears.</p>
</li>
<li>
<p>Select one of the following:</p>
<ul>
<li>
<p><span class="bold">Check out existing definition</span>. This option allows you to modify the definition in its current location if you have the required privileges.</p>
<p>If the definition is already checked out by another user, you get an error message when you select this option.</p>
</li>
<li>
<p><span class="bold">Copy definition to the local Application Area and check out</span>. This option is useful if:</p>
<ul>
<li>
<p>you do not have the privileges required to modify the original definition in its location</p>
</li>
<li>
<p>the current version of the definition should remain easily available for reuse</p>
</li>
<li>
<p>the definition is checked out by another user</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The system gives you this option even if the definition is already located in the current Application Area.</div>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Apply</span>.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BEIHAGGJ"></a>
<div id="LSHDG226" class="sect3">
<h4 class="sect3">Checking Out an Object Definition Directly</h4>
<p>To explicitly check out an object definition directly in its Domain or Application Area, do the following:</p>
<ol>
<li>
<p>Navigate to the object definition.</p>
</li>
<li>
<p>Click <span class="bold">Check Out</span>. The Check Out screen appears.</p>
</li>
<li>
<p>Type the reason for checking out the object in the <span class="bold">Comments</span> field.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BEICAFID"></a>
<div id="LSHDG227" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Checking Out an Old Version of an Object Definition</h4>
<p>From the object definition's Version History page:</p>
<ol>
<li>
<p>Navigate to the object definition in its Domain or Application Area, either in the Applications screen or by clicking the link to the definition in an instance of it.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down list, select <span class="bold">View Version History</span>. The Version History screen opens; see <a href="#BEIHEFCJ">"Version History"</a>.</p>
</li>
<li>
<p>Select the version you want to check out and click <span class="bold">Check Out</span>. The system creates a new version of the object based on the one you checked out, with a version number that is equal to the latest version's number plus one. All the changes you make apply to the new version.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDIGADA"></a>
<div id="LSHDG229" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Checking In Objects</h3>
<p>Oracle LSH finalizes an object version when it checks in the version, either explicitly or implicitly, as follows:</p>
<ul>
<li>
<p>When you install or clone an object instance, Oracle LSH checks in the instance. It also checks in the underlying definition if it is not already checked in.</p>
</li>
<li>
<p>After you explicitly check out an object definition, you can explicitly check it in.</p>
</li>
<li>
<p>When you change the validation status of an object definition or instance, Oracle LSH checks it in if it is not already checked in.</p>
</li>
</ul>
<p>To check in an object:</p>
<ol>
<li>
<p>Navigate to the object's screen.</p>
</li>
<li>
<p>Click <span class="bold">Check In</span>. The Check In screen appears.</p>
</li>
<li>
<p>Type the reason for checking in the object in the <span class="bold">Comments</span> field.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can check in only those objects that you have checked out, unless you have the Checkin Administrator privileges.
<p>If someone else has checked out the definition and you do not have Checkin Administrator privileges, you cannot check it in. If you are working in an object instance, the username of the person who has checked out the object definition is displayed. If you are working directly on an object definition in an Application Area or Domain, you can find out who has checked out the object by running the All Instances report under Reports in the Actions drop-down list.</p>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDDIGBG"></a>
<div id="LSHDG230" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Undoing Object Checkout</h3>
<p>After you explicitly check out an object definition, you can explicitly uncheck it. Oracle LSH discards the new version.</p>
<p>To undo a checkout for an object:</p>
<ol>
<li>
<p>When you have checked out an object definition, the system displays a <span class="bold">Check In</span> button and an <span class="bold">Uncheck</span> button.</p>
</li>
<li>
<p>Click <span class="bold">Uncheck</span>. A confirmation for undoing the checkout appears.</p>
</li>
<li>
<p>Click <span class="bold">Yes</span>.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can undo a check out for only those objects which you check in, even if you have the Checkin Administrator privileges.</div>
</div>
<!-- class="sect2" -->
<a id="BEIHIEIG"></a>
<div id="LSHDG231" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Version Labels</h3>
<p>You can use version labels to identify important versions of objects. These labels are visible when you search for an object and when you upgrade object instances, and you can filter search results to return only object versions with labels.</p>
<p>To label an object version, follow these steps:</p>
<ol>
<li>
<p>Navigate to the object version you want to label. To label an object definition, you must go to the definition in its Domain or Application Area.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down list, select <span class="bold">Version Label</span>. Click <span class="bold">Go</span>.</p>
</li>
<li>
<p>Do one of the following:</p>
<ul>
<li>
<p>Enter text for the label In the <span class="bold">Version Label</span> field.</p>
</li>
<li>
<p>Click the Search icon. The system displays all labels that have been created for objects in the same location. Select one of them.</p>
</li>
</ul>
<p>If you enter or select a label that has already been applied to a previous version of the same object, you receive a warning. If you apply the label to the current version, the system removes it from the previous version.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>. The system applies the label.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BEIHEFCJ"></a>
<div id="LSHDG232" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Version History</h3>
<p>You can see the version history of object definitions (not instances) by selecting <span class="bold">View Version History</span> from the <span class="bold">Actions</span> drop-down list.</p>
<p>You can select any version of the object and click <span class="bold">Copy</span> or <span class="bold">Check Out</span> to copy it or check it out.</p>
<p>For each version you see the following information:</p>
<ul>
<li>
<p><span class="bold">Name</span>. The object version name is also a hyperlink to the object version definition.</p>
</li>
<li>
<p><span class="bold">Description</span> of object version description.</p>
</li>
<li>
<p><span class="bold">Version</span> number.</p>
</li>
<li>
<p><span class="bold">Status</span>: Installable or Noninstallable.</p>
</li>
<li>
<p><span class="bold">Validation Status</span>: Development, Quality Control, Production or Retired.</p>
</li>
<li>
<p><span class="bold">Last Modified By</span>. Username of the person who created the version by modifying the object definition.</p>
</li>
<li>
<p><span class="bold">Last Modified</span>. The timestamp of the creation of the version.</p>
</li>
</ul>
<p>If you click the + node you can see the following information:</p>
<ul>
<li>
<p><span class="bold">Copied From</span>. If the object version was created by modifying the previous version of the object, that object version is displayed. If it was created by copying and pasting an object from another location, or by cloning a Work Area and all its objects, that information is displayed.</p>
</li>
<li>
<p><span class="bold">Version Label</span>. If a label was applied to the version, the system displays the label.</p>
</li>
<li>
<p><span class="bold">Check In Comments</span>. If the person who checked in the object version entered a comment, the system displays it here.</p>
</li>
<li>
<p><span class="bold">Check Out Comments</span>. If the person who created the object version by checking out the previous version entered a comment, the system displays it here.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDHHFEB"></a>
<div id="LSHDG233" class="sect2">
<h3 class="sect2">Versions of Component Objects</h3>
<p>Oracle LSH implicitly increments and tracks the version number of components of object definitions such as Source Code, Planned Outputs, Table Descriptors, and Columns that are not contained directly in a Domain or Application Area but only in other defined objects such as Programs or Tables.</p>
<p>To modify these objects you must check out their containing object. The system automatically increments their version number behind the scenes when you modify them within the containing object. When you check in the containing object, the system applies a new version number to the modified component object as well as the containing object. If you uncheck the container, you effectively uncheck the component object as well and the system does not save the new version of either object.</p>
<p>The system increments the component's version number only if you modify it, so the version number of the component object may not match the version number of the containing object definition. Oracle LSH uses the information it stores about component versions to reconstruct past versions of the definition as a whole.</p>
<p>Component object definitions that are contained directly in a Domain or Application Area (Variables, Parameters, Parameter Sets, Notifications, and Overlay Templates) can have version labels (see <a href="#BEIHIEIG">"Version Labels"</a>). They can also have classifications and user group assignments.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEIHAHEE"></a>
<div id="LSHDG235" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Upgrading Object Instances to a New Definition Version</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BEIFHFAA">Upgrading One or More Instances from the Definition</a></p>
</li>
<li>
<p><a href="#BEIFAIDB">Upgrading to a Different Definition Version from an Instance</a></p>
</li>
<li>
<p><a href="#BEICIIGD">Upgrading to the Latest Version</a></p>
</li>
</ul>
<p>If an object instance references a definition that has been updated since the instance was created, you may want to update the instance so that it references the new version of the definition. You can upgrade object instances to a newer version of their source definition through the <span class="bold">Actions</span> drop-down list either from the definition or from the instance.</p>
<p>For upgrading Source Code instances, see <a href="progs.htm#BACFIBFF">"Upgrading Source Code And Undoing Source Code Upgrades"</a>.</p>
<a id="BEIFHFAA"></a>
<div id="LSHDG236" class="sect2">
<h3 class="sect2">Upgrading One or More Instances from the Definition</h3>
<p>To upgrade one or more instances of a definition to a newer version of the definition, do the following:</p>
<ol>
<li>
<p>Navigate to the definition in the Applications tab.</p>
</li>
<li>
<p>Check in the definition if it is not already checked in.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down list, select <span class="bold">Upgrade All Instances</span> and click <span class="bold">Go</span>. The system opens the Upgrade Instances screen with all instances of the definition displayed.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you don't see the <span class="bold">Upgrade All Instances</span> option in the <span class="bold">Actions</span> drop-down list, then you are not in the latest version of the definition. You can upgrade instances only from the latest definition version.
<p>The exception to the above is if you are upgrading Source Code instances. See <a href="progs.htm#BABCBGEJ">"Upgrading Multiple Source Code Instances"</a>.</p>
</div>
<p>For each instance, the system displays the following information:</p>
<ul>
<li>
<p><span class="bold">Object Name</span>. The name of the object instance that points to any version of the definition.</p>
</li>
<li>
<p><span class="bold">Object Type</span>. The type of the object.</p>
</li>
<li>
<p><span class="bold">Object Version</span>. The version number of the instance.</p>
</li>
<li>
<p><span class="bold">Version Label</span>. The version label of the instance.</p>
</li>
<li>
<p><span class="bold">Installed Version</span>. The most recent version of the instance that was successfully installed.</p>
</li>
<li>
<p><span class="bold">Validation Status</span>. The instance's validation status.</p>
</li>
<li>
<p><span class="bold">Checked Out By</span>. The name of the person who has checked out the instance. If a person other than you has the instance checked out, then you cannot upgrade it: the check box next to it is grayed out.</p>
</li>
<li>
<p><span class="bold">Definition Version</span>. The version number of the definition to which the instance currently points.</p>
</li>
<li>
<p><span class="bold">Definition Validation Status</span>. The validation status of the definition.</p>
</li>
<li>
<p><span class="bold">Parent Name</span>. The name of the Parent object.</p>
</li>
<li>
<p><span class="bold">Parent Object Type</span>. The type of object that contains the instance.</p>
</li>
<li>
<p><span class="bold">Parent Validation Status</span>. The parent's validation status.</p>
</li>
<li>
<p><span class="bold">Container</span>. The container hierarchy for the instance.</p>
</li>
</ul>
</li>
<li>
<p>Select one or more instances you want to upgrade. You can use the <span class="bold">Select All</span> and <span class="bold">Select None</span> functions and/or select or deselect instances individually by checking or unchecking their <span class="bold">Select</span> checkbox. Instances that already point to the current version of the definition cannot be selected.</p>
</li>
<li>
<p>Click <span class="bold">Upgrade</span>. The system changes the source definition of the selected instances to the new version of the definition.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you find the <span class="bold">Upgrade</span> button not enabled, then the definition you want to upgrade to, is not checked in.</div>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BEIFAIDB"></a>
<div id="LSHDG238" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Upgrading to a Different Definition Version from an Instance</h3>
<p>To make an object instance point to a different version of its source definition, do the following:</p>
<ol>
<li>
<p>If the version of the definition to which you want to upgrade is not already checked in, navigate to it in its Domain or Application Area and check it in.</p>
</li>
<li>
<p>Navigate to the object instance in a Work Area.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down list, select <span class="bold">Upgrade Instance</span>.</p>
</li>
<li>
<p>Click <span class="bold">Go</span>. The system displays the available versions of the object definition in the lower portion of the screen.</p>
<p>For each version of the definition, the system displays the following information:</p>
<ul>
<li>
<p><span class="bold">Version</span>. The version number of the definition version.</p>
</li>
<li>
<p><span class="bold">Name</span>. The name of the definition version.</p>
</li>
<li>
<p><span class="bold">Description</span>. The description entered for the definition version.</p>
</li>
<li>
<p><span class="bold">Status</span>. The definition version's installation status.</p>
</li>
<li>
<p><span class="bold">Validation Status</span>. The definition version's validation status.</p>
</li>
<li>
<p><span class="bold">Version Label</span>. The label associated with the definition version, if any.</p>
</li>
<li>
<p><span class="bold">Checked Out By</span>. If the definition version is checked out, the system displays the username of the person who checked it out. You cannot upgrade to a version that is checked out, and only the person who checked it out can check it in.</p>
</li>
</ul>
</li>
<li>
<p>Click the icon in the <span class="bold">Upgrade</span> column for the version to which you want to point the instance. The icon of the version to which the instance is currently pointing is grayed out.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can select an older version than the one to which the instance is currently pointing. This is useful if you want to undo an earlier upgrade.</div>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BEICIIGD"></a>
<div id="LSHDG240" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Upgrading to the Latest Version</h3>
<p>If you are working on an object instance that is not using the most current version of its source definition, the following buttons appear in the Definition Properties portion of the instance's screen:</p>
<ul>
<li>
<p><span class="bold">View Latest</span>. Click to view the latest version of the definition.</p>
</li>
<li>
<p><span class="bold">Upgrade to Latest</span>. Click to upgrade to the latest version of the definition.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This option is available only if the definition is checked in, even if you are the person who has checked it out.</div>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDDGDBJ"></a>
<div id="LSHDG241" class="sect1">
<h2 class="sect1">Copying, Cloning, and Moving Objects</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHGBCJG">Copying Objects</a></p>
</li>
<li>
<p><a href="#BEICDGEE">Comparison of Copying and Cloning Individual Objects</a></p>
</li>
<li>
<p><a href="#BEIHAEDC">Cloning Objects</a></p>
</li>
<li>
<p><a href="#BEICBIAJ">Moving Objects</a></p>
</li>
<li>
<p><a href="#CIHDDEDD">Pasting Objects</a></p>
</li>
</ul>
<a id="CIHGBCJG"></a>
<div id="LSHDG242" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Copying Objects</h3>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BEIGFFJH">Copying One Object Instance, Domain, Application Area, or Work Area</a></p>
</li>
<li>
<p><a href="#BEIIFJHI">Copying One or More Objects at the Same Time</a></p>
</li>
<li>
<p><a href="#BEIBJJJI">Copying an Old Version of an Object Definition</a></p>
</li>
</ul>
<p>You can copy object definitions or instances from one location and paste them into another. You can copy a whole Work Area, Application Area, or Domain, with all its contents.</p>
<p>When you copy a very large object&mdash;a Work Area, Application Area, Domain, Report Set, or Workflow&mdash;either by itself or as one of multiple selected objects, the system launches the copy operation as a batch job and displays a message with the Job ID.</p>
<p>When you copy an object instance or definition, the system copies only the current version (unless you explicitly select an older version in the View Version History screen; see <a href="#BEIBJJJI">"Copying an Old Version of an Object Definition"</a>). When you paste the object into its new location, the system gives it a version number of one (1).</p>
<p>For additional information on the Copy operation, see <a href="#BEICDGEE">"Comparison of Copying and Cloning Individual Objects"</a>.</p>
<a id="BEIGFFJH"></a>
<div id="LSHDG243" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Copying One Object Instance, Domain, Application Area, or Work Area</h4>
<p>From the main Applications screen you can copy a single object instance, Domain, Application Area, or Work Area.</p>
<p>All links between objects that are included in the container object you copy are also copied. For example, if you copy a whole Application Area, and it includes an object instance in a Work Area that points to an object definition in the Application Area, the system copies the link, so that the copied instance in its new location points to the copied definition in its new location. If you copy a Work Area where Table instances are mapped to executable instances, the system copies the mappings so that the copied Table instances are mapped to the copied executable instances.</p>
<ol>
<li>
<p>Click the Applications tab. The main Applications screen opens.</p>
</li>
<li>
<p>Select one object and click <span class="bold">Copy</span>. The system opens the Copy Objects screen and displays the objects you selected in the section labeled <span class="bold">Source&mdash;Source objects to be copied</span>.</p>
</li>
<li>
<p>Follow instructions for <a href="#CIHDDEDD">"Pasting Objects"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BEIIFJHI"></a>
<div id="LSHDG244" class="sect3">
<h4 class="sect3">Copying One or More Objects at the Same Time</h4>
<p>You can copy multiple objects at once if they are all in the same location to begin with and you paste them all into the same location. If you copy a Program instance and Table instance that are mapped to each other, the system automatically remaps them in the new location.</p>
<p>To copy and paste multiple object definitions or instances at the same time, do the following:</p>
<ol>
<li>
<p>In the Applications tab, go to the Properties screen of the Domain, Application Area, or Work Area that contains the objects you want to copy or, for Domains and Application Areas, the Manage Definitions screen.</p>
</li>
<li>
<p>Select one or more objects and click <span class="bold">Copy</span>. The system opens the Copy Objects screen and displays the objects you selected in the section labeled <span class="bold">Source&mdash;Source objects to be copied</span>.</p>
</li>
<li>
<p>Follow instructions for <a href="#CIHDDEDD">"Pasting Objects"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BEIBJJJI"></a>
<div id="LSHDG245" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Copying an Old Version of an Object Definition</h4>
<p>To copy an old version of an object definition, do the following:</p>
<ol>
<li>
<p>Navigate to the object definition in its Domain or Application Area, either in the Applications screen or by clicking the link to the definition in an instance of it.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down list, select <span class="bold">View Version History</span>. The Version History screen opens; see <a href="#BEIHEFCJ">"Version History"</a>.</p>
</li>
<li>
<p>Select the version you want to check out and click <span class="bold">Copy</span>. The system opens the Copy Objects screen and displays the objects you selected in the section labeled <span class="bold">Source&mdash;Source objects to be copied</span>.</p>
</li>
<li>
<p>Follow instructions for <a href="#CIHDDEDD">"Pasting Objects"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BEICDGEE"></a>
<div id="LSHDG246" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Comparison of Copying and Cloning Individual Objects</h3>
<p>Cloning an object differs from copying an object as follows:</p>
<ul>
<li>
<p><span class="bold">Instances and Definitions</span>. You can copy object definitions as well as object instances. You can clone only object instances.</p>
</li>
<li>
<p><span class="bold">Allowed Targets</span>. You can copy an object definition or instance into the same container&mdash;Domain, Application Area, or Work Area&mdash;that contains the source object. In that case, the Copy operation creates a copy of the object with the name Copy_of_<span class="italic">source_object_name</span>. You can clone an object instance only to a different Work Area; not the same Work Area that contains the source object instance.</p>
</li>
<li>
<p><span class="bold">Replacement.</span> If an object of the same type with the same name exists in the target Work Area, the Copy operation creates a new object in the target Work Area with a different name (_1 appended or final number incremented by 1). The Clone operation upgrades the target object with a duplicate of the source object (including the same name with nothing appended) unless the target is already identical to the source, in which case the Clone operation takes no action on the target object. Neither operation (Copy or Clone) compares the version number of the source and target objects (see <a href="#BEIFFGGD">"Version Number"</a> below).</p>
<p>If an object of the same type with the same name does <span class="bold">not</span> exist in the target Work Area, the Clone and Copy operations both create a duplicate of the source object, with the same name, in the target Work Area.</p>
</li>
<li>
<p><span class="bold">Implicit Cloning of Mappings and Table instances</span>. If you clone a Program, Load Set, Data Mart, Business Area, Report Set, or Workflow that is mapped to one or more Table instances in the same Work Area, the Clone operation automatically clones each Table instance and the mapping as well. If a source Table instance is in a different Work Area, the system copies the mapping to the same Table instance. The Copy operation does not copy any objects except those that are explicitly selected.</p>
<p>If a Table instance with the same name already exists in the target Work Area of a Clone operation with implicit cloning of a Table instance, the system checks to see if the Table instance in the target Work Area was already cloned from the same source Table instance or not. If it was, the clone proceeds without warning and replaces the Table instance. If the target Table instance was originally defined in the target Work Area, or if it was cloned or copied from a different Table instance, you receive an error and cannot proceed with the cloning operation.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Cloning upgrades Table instances and all other instances; it does not delete data in Table instances unless the source Table instance has been modified in a destructive way, such as removing a Column. In that case, you get a warning when you make the destructive change that the change may prevent upgrading during the next installation. However, you do not receive a warning during the Clone operation.
<p>Changing a table's Blinding flag to Y from N is not considered a destructive change. Changing the Blinding flag from N to Y is allowed if there is no dummy data loaded.</p>
</div>
</li>
<li>
<p><span class="bold">Validation Status</span>. When you copy an object, the new object's validation status is always set to Development, no matter what the validation status of the source object was. When you clone an object, the new object has the same validation status as the source object.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you copy or clone an object, none of its validation supporting information links are maintained. They are maintained when you move an object.</div>
</li>
<li>
<p><a id="BEIFFGGD"></a><span class="bold">Version Number</span>. When you copy an object, the new object's version number is always set to 1, no matter what the version number of the source object was. When you clone an object, the Clone operation increments the version number of the target object by 1.</p>
</li>
<li>
<p><span class="bold">Security</span>. The same privileges are required to copy and to clone objects: Read privileges for the object type in the source location and Create or Modify privileges for the object type in the target location.</p>
</li>
</ul>
<p>For information about cloning an entire Work Area, see <a href="wa_install.htm#BABICBEH">"Cloning Work Areas for Testing and Production"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BEIHAEDC"></a>
<div id="LSHDG247" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Cloning Objects</h3>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BEIBACJG">Comparison of Cloning Individual Objects and Whole Work Areas</a></p>
</li>
<li>
<p><a href="#BEICFJJA">Cloning Objects from the Application Development Screen</a></p>
</li>
<li>
<p><a href="#BEIFGAFJ">Cloning Objects from the Work Area Screen</a></p>
</li>
</ul>
<p>You can select one object instance to clone from either the Application Development screen or from the main Work Area screen. In the Work Area screen you can also select multiple objects and clone them at the same time to the same target Work Area.</p>
<p>See <a href="#BEICDGEE">"Comparison of Copying and Cloning Individual Objects"</a> for additional information about cloning object instances.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you select a Program instance that is mapped to one or more Table instances in the same Work Area, Oracle LSH automatically clones the Table instance(s) and the mapping(s) as well as the Program instance.</div>
<a id="BEIBACJG"></a>
<div id="LSHDG248" class="sect3">
<h4 class="sect3">Comparison of Cloning Individual Objects and Whole Work Areas</h4>
<p>Cloning object instances is different from cloning a whole Work Area in the following ways:</p>
<ul>
<li>
<p><span class="bold">Implicit Cloning of Mapped Table Instances</span>. If you clone an individual executable object&mdash;Program, Load Set, Data Mart, Business Area, Report Set, or Workflow&mdash;that is mapped to one or more Table instances in the same Work Area, the Clone operation automatically clones the Table instance and the mapping as well.</p>
<p>If you clone a whole Work Area, the system replaces any Table instances in the target Work Area that have been modified in the source Work Area since the last clone.</p>
</li>
<li>
<p><span class="bold">Checks</span>. When you clone a whole Work Area, the system duplicates the source Work Area, resulting in an identical target Work Area. Any object instances present in the target Work Area before the clone are either dropped or replaced, and objects that were not previously present are created.</p>
<p>When you clone an object instance, the system does the following before performing the clone:</p>
<ul>
<li>
<p><span class="bold">Checks Table instance origin during implicit clone</span>. When you clone an individual Table instance implicitly by cloning an executable to which it is mapped, and a Table instance with the same name already exists in the target Work Area, the system checks to see if the Table instance in the target Work Area was already cloned from the same source Table instance or not. If it was, the clone proceeds without warning and replaces the Table instance. If the target Table instance was originally defined in the target Work Area, or if it was cloned or copied from a different Table instance, you receive a warning and cannot proceed with the Clone operation.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The system performs this check only when you clone a Table instance implicitly. If you explicitly select a Table instance for cloning, the system does not make this check: if a Table instance already exists in the target Work Area with the same name, the new Table instance replaces it, regardless of the target Table instance's origin.
<p>After you have cloned a Table instance from two different source Table instances, the system allows you to clone the Table instance implicitly as well as explicitly from either source.</p>
</div>
</li>
<li>
<p><span class="bold">Prevents multiple executables from writing to the same Table instance</span>. When you clone an individual Table instance, either explicitly or implicitly when you clone a Program or Load Set instance to which it is mapped, the system does not allow the Clone operation to succeed if the result would be that two executables (Programs or Load Sets) wrote to the same target Table instance.</p>
<p>When you clone a whole Work Area, this is not an issue because the system has already prevented multiple executables from writing to the same Table instance in the source Work Area.</p>
</li>
</ul>
</li>
<li>
<p>When you clone a whole Work Area, you must apply a label to the source and target Work Areas. However, when you clone an object, you cannot apply a clone label to the source and target objects.</p>
</li>
<li>
<p>When you clone a whole Work Area you can update the Usage Intent of the target Work Area as part of the Clone operation.</p>
</li>
<li>
<p>When you clone an individual object instance the source Work Area is not checked in as part of the cloning operation as it is when you clone a whole Work Area.</p>
</li>
<li>
<p>When you clone an individual object instance you cannot create a new target Work Area as part of the cloning operation, as you can when you clone a whole Work Area and specify an Application Area as the target.</p>
</li>
</ul>
<p>For more information on Work Area cloning, see <a href="wa_install.htm#BABHJGHA">Chapter 12, "Using, Installing, and Cloning Work Areas"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="BEICFJJA"></a>
<div id="LSHDG249" class="sect3">
<h4 class="sect3">Cloning Objects from the Application Development Screen</h4>
<p>To clone an object from the Application Development screen, do the following:</p>
<ol>
<li>
<p>Click the Applications tab to open the Application Development screen.</p>
</li>
<li>
<p>Expand the Application Area and Work Area that contain the object you want to clone.</p>
</li>
<li>
<p>Click the icon in the Clone column on the same row as the object you want to clone. The Clone Instances screen opens with the selected object displayed in the <span class="bold">Instance Objects to Be Cloned</span> section.</p>
</li>
<li>
<p>In the <span class="bold">Clone Destination</span> section, select the Work Area in which you want to create a clone of the object.</p>
<ol>
<li>
<p>If you want to clone the object into a Work Area in a different Domain, click the Search icon and follow instructions at <a href="dev_ui.htm#CHDGJHIJ">"Select a Domain on the Applications Screen"</a>. The system displays the Application Areas contained in the Domain.</p>
</li>
<li>
<p>Expand the node (+) of the Application Area that contains the target Work Area.</p>
</li>
<li>
<p>Select the target Work Area.</p>
</li>
</ol>
</li>
<li>
<p>Click <span class="bold">Apply</span>.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BEIFGAFJ"></a>
<div id="LSHDG250" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Cloning Objects from the Work Area Screen</h4>
<p>To clone one or more objects from the Work Area screen, do the following:</p>
<ol>
<li>
<p>In the Application Development screen, click the hyperlink in the Name column of the Work Area that contains the object or objects you want to clone. The Work Area Properties screen opens.</p>
</li>
<li>
<p>Select each object you want to copy and click <span class="bold">Clone</span>. The Clone Instances screen opens with the selected object(s) displayed in the <span class="bold">Instance Objects to Be Cloned</span> section.</p>
</li>
<li>
<p>In the <span class="bold">Clone Destination</span> section, select the Work Area in which you want to create a clone of the object.</p>
<ol>
<li>
<p>If you want to clone the object into a Work Area in a different Domain, click the Search icon and follow instructions at <a href="dev_ui.htm#CHDGJHIJ">"Select a Domain on the Applications Screen"</a>. The system displays the Application Areas contained in the Domain.</p>
</li>
<li>
<p>Expand the node (+) of the Application Area that contains the target Work Area.</p>
</li>
<li>
<p>Select the target Work Area.</p>
</li>
</ol>
</li>
<li>
<p>Click <span class="bold">Apply</span>.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BEICBIAJ"></a>
<div id="LSHDG251" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Moving Objects</h3>
<p>Moving an object removes it from its original location and puts it into a new location without breaking any references; that is, instances of a definition being moved continue to point to the definition in its new location. The system moves all versions of the object together. The Move operation is available inside Domains, Application Areas, and Report Sets for object definitions and Report Set Entries, respectively. It is not available in Work Areas for object instances.</p>
<p>You can move multiple objects at once if they are all in the same location to begin with and you paste them all into the same new location.</p>
<p>You can move an object to a different location if you have Create privileges for that object type in that location and Modify privileges on its parent object (Domain, Application Area, or Report Set definition).</p>
<p>Use the Move operation to do the following:</p>
<ul>
<li>
<p>Move object definitions from Application Areas to Domains when they have been thoroughly tested and approved for reuse.</p>
</li>
<li>
<p>Move an Application Area or child Domain, with all its contents, to a different Domain.</p>
</li>
<li>
<p>Move object definitions from one Application Area or Domain to another.</p>
</li>
</ul>
<p>To move one or more objects, do the following:</p>
<ol>
<li>
<p>Navigate to one of the following locations:</p>
<ul>
<li>
<p>To move one or more object definitions: In the Applications tab, click <span class="bold">Manage Definitions</span> for the Domain or Application Area from which you want to move objects. In the Maintain Library screen that opens, select the object you want to move and click <span class="bold">Move</span>.</p>
</li>
<li>
<p>To move one ore more Application Areas and/or child Domains: In the Applications tab, click the Domain's hyperlink in the <span class="bold">Name</span> column. In the Domain properties screen that opens, select one or more Application Areas and child Domains and click <span class="bold">Move</span>.</p>
</li>
<li>
<p>To move a child Domain or Application Area, one at a time: In the Applications tab, Application Development screen, click the icon in the object's <span class="bold">Move</span> column.</p>
</li>
</ul>
</li>
<li>
<p>If you are moving objects (not Application Areas or Domains) a confirmation message appears, listing the objects you have selected to move that are currently checked out, if any, and telling you that they will be checked in as part of the Move operation.</p>
<p>Click <span class="bold">Yes</span> to continue with the operation. The Move Objects screen opens.</p>
</li>
<li>
<p>Select the new location: follow instructions for <a href="#CIHDDEDD">"Pasting Objects"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHDDEDD"></a>
<div id="LSHDG253" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Pasting Objects</h3>
<p>Pasting is the second part of a copy, move, or clone operation. The objects you have selected appear in the upper portion of the screen.</p>
<ol>
<li>
<p>In the section labeled <span class="bold">Destination&mdash;Target for objects when paste applied</span>, select the Domain into which you want to paste the object(s).</p>
<p>The current Domain is displayed by default. You can enter the name of another Domain or click the Search icon and select another Domain; see <a href="#BEIIHFBF">"Using the Search and Select Window"</a>.</p>
<p>The system displays the Domain you selected and any child Domains and Application Areas it contains. You can click the + nodes to see Work Areas and objects within the Work Areas.</p>
</li>
<li>
<p>Click the Select radio button for the Domain, Application Area, Work Area, Report Set or Workflow into which you want to paste the object or objects.</p>
<p>The system activates the radio button only for valid locations for the object type(s) you have selected.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>. The system creates version one (1) of each object in the new location.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the target location already contains an object of the same type and with the same name, the system appends _1 to the name of the object you copy into the target location. If the object with the same name already ends in a number, the system renames the copied object with the number incremented by one (1).</div>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDCAJGD"></a>
<div id="LSHDG254" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Removing Objects</h2>
<p>If you have the necessary privileges, you can remove an object instance from a Work Area or an object definition from an Application Area or Domain. After you remove an object, the system prepends its name with a tilde (~). You can then use the original name again within the same container.</p>
<p>The following rules apply:</p>
<ul>
<li>
<p>Object metadata is never completely removed. The system gives the definition or instance an end date but stores a record of it as it existed during the time it existed. However, when a Table instance is removed, all its data is deleted.</p>
</li>
<li>
<p>You cannot remove an object instance that has been installed and executed.</p>
</li>
<li>
<p>You cannot remove an object definition that is used as a source definition by one or more instances. You must remove the instance(s) first. If you try to remove an object definition with an instance, you receive an error message with the name of the instance object. To proactively check if a definition has instances, select <span class="bold">Upgrade Instances</span> from the <span class="bold">Actions</span> drop-down. The system displays all instances with their locations, validation statuses, and other information.</p>
</li>
<li>
<p>You cannot remove an object that contains objects that have not been deleted. This applies to Domains, Application Areas, Work Areas, Report Sets, and Workflows.</p>
</li>
</ul>
<p>To remove objects:</p>
<ol>
<li>
<p>In the Applications tab, go to the location of the object you need to remove.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In the main Applications screen you can remove only one object at a time. However, if you go to the Properties screen for a Domain, Application Area, or Work Area, or the Manage Definitions screen of a Domain or Application Area, you can remove multiple objects at a time.</div>
</li>
<li>
<p>Select one or more objects to remove.</p>
</li>
<li>
<p>Click <span class="bold">Remove</span>. The system gives you a message asking you to confirm that you want to remove the selected object(s).</p>
</li>
<li>
<p>Click <span class="bold">Yes</span>. The system removes the object or objects and returns you to the Application Development screen.</p>
</li>
</ol>
<div id="LSHDG255" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref18"></a>
<h3 class="sect2">Rules for Removing Objects</h3>
<p>Oracle LSH enforces the following rules for object removal:</p>
<ul>
<li>
<p>You cannot remove an object if other objects are dependent on it. For example, you cannot remove an object definition if there are one or more instances of it. (You can set the object definition's status to Retired, however, and then no additional instances of it can be created.)</p>
</li>
<li>
<p>You cannot remove Table instances with a validation status of Production. This is to protect production data.</p>
</li>
<li>
<p>In some cases the removed object is still displayed in the user interface. The system then renames the object by prepending a tilde (~) to its name.</p>
<p>Using a tilde to rename the object signifies that the object has been removed and allows you to create a new object of the same type in the same container with the same name.</p>
<p>Examples:</p>
<ul>
<li>
<p>If an executable object has been executed and then removed, it appears in the Job Details page for the job preceded by a tilde (~).</p>
</li>
<li>
<p>You can remove a component object (such as a Parameter) from the object that contains it (such as a Program) or an executable object (such as a Program) from either a Report Set or a Workflow. In these cases Oracle LSH continues to display the removed object in the Version History screen for its container but renames the removed object by prepending one or more tildes (~) to its name in previous versions of the container object. You can then create a new object of the same type with the same name in the latest version of the same container. The old versions of the container continue to function as before.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJADAD"></a>
<div id="LSHDG257" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Classifying Objects and Outputs</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BEIDGCAI">About Classification</a></p>
</li>
<li>
<p><a href="#BEIHJCAI">Classifying Objects</a></p>
</li>
<li>
<p><a href="#CHDCBGEI">Classifying Outputs</a></p>
</li>
</ul>
<a id="BEIDGCAI"></a>
<div id="LSHDG258" class="sect2">
<h3 class="sect2">About Classification</h3>
<p>Classifications are logically related labels defined by your company that help people find the objects you define and outputs they generate:</p>
<ul>
<li>
<p>Oracle LSH displays outputs and submission forms (Execution Setups) by their classifications in the Reports tab.</p>
</li>
<li>
<p>The Advanced Search feature allows people to search for object definitions, instances, and outputs by their classifications.</p>
</li>
</ul>
<p>When you create a new object, you must select a subtype for it according to your company's policies. The subtype determines which classification hierarchy levels you can or must use to classify your object.</p>
<p>There may be default or inherited classification values assigned to your object. You can accept these or override them with values you select, according to your company's policies.</p>
<p><a id="LSHDG259"></a><span class="subhead3">Example&nbsp;</span>Your company has set up a classification hierarchy with three levels, Project, Study, and Site. The Project level values include all the therapeutic areas with current trials. The Study level values include all the current trials, each linked to its therapeutic area. The Site level values include all the sites participating in each trial, each linked to its trial or trials. A given subtype may require classification only at the Study level.</p>
<p>When you classify a Program instance, for example, that will be used in all sites for Trial X, you classify it at the Study level to Trial X. If the whole Application Area where the Program is located is devoted to Trial X, your company may have set up its classification system so that all objects within the Application Area automatically inherit the classification value Trial X from the Application Area. This may be true for Work Areas within the Application Area and the object instances in the Work Areas as well.</p>
<p><a id="LSHDG260"></a><span class="subhead3">Reclassification&nbsp;</span>You can reclassify an object definition or instance at any time.</p>
<p>To view or modify the classification of the definition, you must view it in its location&mdash;Application Area or Domain. You cannot see the definition's classifications from an instance of it in a Work Area.</p>
<p><a id="LSHDG261"></a><span class="subhead3">Object Versions and Classifications&nbsp;</span>Classifications apply to all versions of an object. When you reclassify an object, either explicitly or through inheritance, the new classifications apply to all versions of the object.</p>
</div>
<!-- class="sect2" -->
<a id="BEIHJCAI"></a>
<div id="LSHDG262" class="sect2">
<h3 class="sect2">Classifying Objects</h3>
<p>To classify an object instance or definition:</p>
<ol>
<li>
<p>When you first create an object, a classification interface appears automatically. If you are creating a new object definition and instance at the same time, a classification interface appears for both the definition and the instance.</p>
<p>If you want to change or view the classifications afterward, go to the object and select <span class="bold">Assign Classification</span> from the <span class="bold">Actions</span> drop-down list. To change the classifications, click <span class="bold">Update</span>.</p>
</li>
<li>
<p>Select a <span class="bold">Subtype</span> from the drop-down list, according to your company's policy, and click <span class="bold">Go</span>.</p>
<p>The system displays the classification hierarchies and levels defined for that subtype. Under each hierarchy name, the system displays the levels of that hierarchy for which objects of the subtype you specified must have a value. For example, in the Project/Study/Site hierarchy, an object subtype may require classification at the Study level, while classification at the Site level is optional. If classification at the Project level is not predefined for the object subtype, the Project level is not displayed.</p>
<p>For each level you see the following information:</p>
<ul>
<li>
<p><span class="bold">Classification</span>. The system displays the name of the level inside its hierarchy.</p>
</li>
<li>
<p><span class="bold">Type</span>. The system displays whether the row shows a Subtype, a Hierarchy, a Level, or a Term. For terms, this field does not say "Term" but displays Inherited or Explicit, as the case may be.</p>
</li>
<li>
<p><span class="bold">Assignment Type</span>. If the classification type is <span class="bold">Inherited</span>, the object is automatically classified to the same value for this level as its container object. For example, an object definition inherits the value from its Application Area or Domain, and an object instance inherits the value from its Work Area.</p>
<p>If the classification type is <span class="bold">Explicit</span>, you can enter one or more values. There may be a default value; if so, you can override it.</p>
<p>You can change the type. Normally it is best to leave inherited classifications alone, but there may be times when a particular object should not inherit the classification value of its parent.</p>
</li>
<li>
<p><span class="bold">Search and Add Value</span>. If the assignment type is Explicit, you can search for values and assign them to the object.</p>
</li>
<li>
<p><span class="bold">Mandatory</span>. If <span class="bold">Yes</span>, objects of this subtype must have a value assigned for this level, either explicitly or inherited. If <span class="bold">No</span>, you can assign a value from this level to the object, but it is not required.</p>
</li>
</ul>
</li>
<li>
<p>For Explicit-type assignments, you can search and add values, as follows. If classification to the level is mandatory, you must do so.</p>
<ul>
<li>
<p>Click the + icon in the <span class="bold">Search and Add Value</span> column. The system opens the Select Classification Hierarchy Terms/Values screen with a field displayed for each level in the hierarchy.</p>
</li>
<li>
<p>You can click <span class="bold">Go</span> to see all the possible classifications at once, or you can narrow the search by specifying a value in one or more of the fields. For example, in the Project/Study/Site hierarchy, if you enter Project A in the Project field and then click <span class="bold">Go</span>, the system returns only studies and sites related to Project A.</p>
</li>
<li>
<p>Select one or more values in the Results section and click <span class="bold">Select and Continue</span>. The system returns to the Assign Classification screen with the value or values you select displayed under their classification level.</p>
</li>
</ul>
</li>
<li>
<p>Repeat for each level for which you want to assign classification values.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>. The system saves all the classification assignments you have made for the object.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
The system applies classifications to objects by running the Oracle LSH Context Index Refresh program every two minutes. Therefore you may have to wait up to two minutes for your classifications to take effect.</div>
</div>
<!-- class="sect2" -->
<a id="CHDCBGEI"></a>
<div id="LSHDG264" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Classifying Outputs</h3>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BEICFFCI">Classifying Outputs Before They Are Generated</a></p>
</li>
<li>
<p><a href="#BEIHHJID">Classifying Outputs After They Are Generated</a></p>
</li>
</ul>
<p>Classifying outputs is different from classifying other objects because you must classify them before they are created. You can reclassify them after they are created if you have the necessary privileges.</p>
<p>Report Sets have a single set of classifications for the Report Set as a whole. If Programs contained in a Report Set have classifications, they have no effect.</p>
<p>Workflows do not have a Planned Output for the Workflow as a whole. Outputs generated by Programs and other executables in a Workflow are classified according to the Planned Output definition in the Program or other executable.</p>
<p><a id="LSHDG265"></a><span class="subhead3">Planned Outputs&nbsp;</span>An output is generated by running an executable object instance &mdash;Program, Report Set, Load Set, or Data Mart&mdash;that has a Planned Output defined as as a placeholder for the actual output. You classify the output by classifying the Planned Output. The process for classifying a Planned Output is the same as classifying any other object, except that you have an additional option: the Program itself can create the classification at runtime; see <a href="#BEIGEJFC">"Classification by Parameter Value"</a>.</p>
<p>If you assign more than one classification value to a particular Planned Output, the actual output appears in multiple places in the Reports screen.</p>
<p><a id="LSHDG266"></a><span class="subhead3">Execution Setups&nbsp;</span>If you set the Planned Outputs's assignment type for a particular classification level to Inherited, the actual output inherits the value for that level from the Execution Setup.</p>
<p>Since the Execution Setup belongs to the Program, Load Set, Data Mart, or Report Set instance (unlike a Planned Output, which belongs to the definition), this approach allows you to classify the outputs of different instances of the same definition in different ways.</p>
<p><a id="BEIGEJFC"></a><a id="LSHDG267"></a><span class="subhead3">Classification by Parameter Value&nbsp;</span>You can arrange for an output to be classified at runtime by specifying a classification type of Parameter and specifying the Parameter whose value is used as the classification assignment.</p>
<p>The Parameter can be an Input/Output Parameter visible, settable, and required in the Execution Setup, so that the person submitting the Program or Report Set must enter a value.</p>
<p>Alternatively, in the case of a Program, it can be an Output type Parameter and the Program logic must populate its value with a valid classification term.</p>
<p>You can define a list of values for Parameters based on classification levels; see <a href="vars.htm#BABCJCJE">"Defining Allowed Values"</a> for further information.</p>
<a id="BEICFFCI"></a>
<div id="LSHDG268" class="sect3">
<h4 class="sect3">Classifying Outputs Before They Are Generated</h4>
<p>The process is the same as for classifying object definitions and instances, except that an additional option is available for outputs.</p>
<ol>
<li>
<p>Go to the object&mdash;Program, Data Mart, Load Set, or Report Set&mdash;that will generate the output you want to classify.</p>
</li>
<li>
<p>Click the <span class="bold">Planned Outputs</span> tab.</p>
</li>
<li>
<p>Click the link of the Planned Output you want to classify. The Planned Output Properties screen opens.</p>
</li>
<li>
<p>Select <span class="bold">Assign Classification</span> from the <span class="bold">Actions</span> drop-down list and click <span class="bold">Go</span>. The Classification screen opens.</p>
</li>
<li>
<p>Classify the Planned Output. Follow instructions at <a href="#CHDJADAD">"Classifying Objects and Outputs"</a>. However, in Programs and Report Sets you have one additional option: an assignment type of Parameter; see <a href="#BEIGEJFC">"Classification by Parameter Value"</a>.</p>
<p>If you select <span class="bold">Parameter</span> as the <span class="bold">Assignment Type</span>, the system adds another column called <span class="bold">Parameter instance</span> and populates a drop-down list in that column for the row with the names of all the Parameter instances in the Program or Report Set instance. Select a Parameter that will return a valid value for that classification level.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BEIHHJID"></a>
<div id="LSHDG269" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Classifying Outputs After They Are Generated</h4>
<p>After you have run a Program, Report Set, Load Set, or Data Mart and created an output, you can change its classifications if you have the necessary privileges.</p>
<p>Navigate to the output in Oracle LSH. There are several ways to do this:</p>
<ul>
<li>
<p><span class="bold">My Home</span>. In the <span class="bold">Job Execution</span> section at the bottom of the My Home page, click the <span class="bold">Job ID</span> of the job that produced the output. The Job Execution Details screen opens. Click the hyperlink that is the output's name.</p>
<p>You can see outputs through the My Home page only if you submitted them yourself.</p>
</li>
<li>
<p><span class="bold">Reports</span>. In the Reports tab, navigate to the output using its current classifications, then click on the icon in the <span class="bold">Action</span> column.</p>
</li>
<li>
<p><span class="bold">Administration</span>. In the Job Execution subtab of the Administration tab, query for the job that produced the output. See "Querying for Jobs" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub System Administrator's Guide</span></span>. The system returns the search results. Click the <span class="bold">Job ID</span> of the job that produced the output, then click the hyperlink that is the output's name.</p>
<p>If you have access to the Administration tab, you can see all users' jobs.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can use the Advanced Search feature from most screens to find outputs.</div>
</li>
</ul>
<p>To reclassify the output, do the following:</p>
<ol>
<li>
<p>In the Output Properties screen, select <span class="bold">Assign Classification</span> from the <span class="bold">Actions</span> drop-down list. The Assign Classification screen opens.</p>
</li>
<li>
<p>Change the classifications as necessary; see <a href="#BEIHJCAI">"Classifying Objects"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDFEFII"></a>
<div id="LSHDG271" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Applying Security to Objects and Outputs</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BEIDFCGA">Viewing User Group Assignments</a></p>
</li>
<li>
<p><a href="#BEIHJHJA">Assigning User Groups to an Object</a></p>
</li>
<li>
<p><a href="#BEIFFIAD">Removing User Group Assignments</a></p>
</li>
<li>
<p><a href="#BEIDIBDJ">Reassigning a User Group as Inherited</a></p>
</li>
</ul>
<p>In order to view or perform any other operation on an object, a user must belong to a user group assigned to the object. Objects automatically inherit the user group assignments of their immediate container. Therefore, by default, any object you create has the same user group assignments as its immediate container (Work Area, Application Area, Domain, Report Set or Workflow).</p>
<p>If you have the necessary privileges you can accept these default assignments or explicitly de-assign any of the user groups assigned to your object. You can also add other user group assignments. The changes you make will be inherited by objects contained by your object, if any.</p>
<a id="BEIDFCGA"></a>
<div id="LSHDG272" class="sect2">
<h3 class="sect2">Viewing User Group Assignments</h3>
<p>To view user group assignments for an object:</p>
<ol>
<li>
<p>Go to the Properties screen for the object.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down, select <span class="bold">Apply Security</span>. The Manage Security screen opens.</p>
<p>Each user group currently assigned to the object is displayed with its assignment status, which reflects the way it was assigned to the object:</p>
<ul>
<li>
<p><span class="bold">Assigned</span>. The user group was explicitly assigned to the object.</p>
</li>
<li>
<p><span class="bold">Inherited</span>. The object inherited the user group assignment from its containing object.</p>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Return</span> to return to the object's Properties screen.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BEIHJHJA"></a>
<div id="LSHDG273" class="sect2">
<h3 class="sect2">Assigning User Groups to an Object</h3>
<p>To assign a new user group:</p>
<ol>
<li>
<p>Go to the Properties screen for the object.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down, select <span class="bold">Apply Security</span>. The Manage Security screen opens.</p>
</li>
<li>
<p>Click <span class="bold">Assign Group</span>. The Search User Group screen appears.</p>
</li>
<li>
<p>In the <span class="bold">Group Name</span> field, enter the name of the user group you want to add, if you know it. If you do not know it, you can click <span class="bold">Search</span> to retrieve all user groups, or enter part of the name plus % and click <span class="bold">Search</span>.</p>
<p>The system displays the search results.</p>
</li>
<li>
<p>Select one or more groups by checking the <span class="bold">Select</span> checkbox and clicking the <span class="bold">Apply</span> button.</p>
<p>The system returns you to the Manage Security screen with the newly assigned user group(s) displayed.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BEIFFIAD"></a>
<div id="LSHDG274" class="sect2">
<h3 class="sect2">Removing User Group Assignments</h3>
<p>To remove a user group assignment:</p>
<ol>
<li>
<p>Go to the Properties screen for the object.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down, select <span class="bold">Apply Security</span>. The Manage Security screen opens.</p>
<ul>
<li>
<p>Click the icon in the <span class="bold">Un-Assign</span> column if the group's status is Assigned.</p>
</li>
<li>
<p>Click the icon in the <span class="bold">Revoke</span> column if the group's status is Inherited.</p>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Yes</span> when asked to confirm your action of unassigning or revoking the selected user group from the selected object.</p>
</li>
<li>
<p>Click <span class="bold">Return</span> to return to the object's Properties screen.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BEIDIBDJ"></a>
<div id="LSHDG275" class="sect2">
<h3 class="sect2">Reassigning a User Group as Inherited</h3>
<p>To re-assign a user group whose inherited assignment was revoked, do the following. This operation restores the assignment as inherited; if the user group is revoked from the parent object, it is automatically revoked from the current object as well.</p>
<ol>
<li>
<p>Go to the Properties screen for the object.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down, select <span class="bold">Apply Security</span>. The Manage Security screen opens.</p>
</li>
<li>
<p>Click the icon in the <span class="bold">Un-Revoke</span> column.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
It is possible to explicitly assign a user group that is already assigned by inheritance. To unassign such a group, you must undo both of its assignments: first Un-Assign and then Revoke.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGFFBG"></a>
<div id="LSHDG277" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Validating Objects and Outputs</h2>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#BEIECIEJ">About Object Validation</a></p>
</li>
<li>
<p><a href="#BEIEGCAE">About Output Validation</a></p>
</li>
<li>
<p><a href="#BEIDJBIG">Validation Statuses</a></p>
</li>
<li>
<p><a href="#BEIJCEFE">Adding Supporting Information</a></p>
</li>
<li>
<p><a href="#BEICAGFC">Changing Objects' Validation Status</a></p>
</li>
<li>
<p><a href="#BEIBDAII">Validation Rules</a></p>
</li>
</ul>
<a id="BEIECIEJ"></a>
<div id="LSHDG278" class="sect2">
<h3 class="sect2">About Object Validation</h3>
<p>Your organization must develop standards for testing Oracle LSH defined objects to demonstrate that they are valid; that is, that they handle data as they are designed to do, without introducing any corruption. As you create object definitions and instances you must follow your organization's policy for validating them in compliance with industry regulations.</p>
<p>All Oracle LSH objects that are contained directly in a Domain, Application Area, or Work Area&mdash;including definitions and instances of Tables, Programs, Load Sets, Data Marts, Report Sets, Workflows, and Business Areas, as well as Variables, Parameters, and Notifications&mdash;have an attribute called Validation Status with possible values Development, Quality Control, Production, and Retired.</p>
<p>To support object validation, Oracle LSH provides the following tools:</p>
<ul>
<li>
<p><span class="bold">Validation Status</span>. When an object definition or instance meets the standards set by your organization for a higher validation status, you can change its status. See <a href="#BEIDJBIG">"Validation Statuses"</a> for further information.</p>
</li>
<li>
<p><span class="bold">Validation Supporting Information</span>. You can link an object with outputs and documents. See <a href="#BEIJCEFE">"Adding Supporting Information"</a> for further information.</p>
</li>
<li>
<p><span class="bold">Report Coversheets</span>. You can generate a coversheet for every report output that displays all the defined objects that interacted with the data in the report from when it was loaded into Oracle LSH to when it was reported out of Oracle LSH, including the validation status of each object. See "Generating a Coversheet with Validation and Data Currency Information" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub User's Guide</span></span> for further information.</p>
</li>
<li>
<p><span class="bold">Work Area Usage Intent</span> and <span class="bold">Cloning</span>. Work Areas have an attribute called Usage Intent with the same list of values (except Retired) as the Validation Status attribute: Development, Quality Control, Production. Oracle LSH enforces <a href="#BEIBDAII">Validation Rules</a> based on the interaction of Work Area usage intent and object validation statuses. Work Areas also have a special operation called cloning that enables you to create clean, distinct environments for testing objects and for production; see <a href="wa_install.htm#BABICBEH">"Cloning Work Areas for Testing and Production"</a>.</p>
</li>
</ul>
<p>Special rules apply to the validation of Report Set Entries, which you can validate independently from other Report Set Entries and the Report Set as a whole. See <a href="rsets.htm#BABFFEHH">"Validating Report Set Definitions and Outputs"</a> for further information.</p>
</div>
<!-- class="sect2" -->
<a id="BEIEGCAE"></a>
<div id="LSHDG279" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Output Validation</h3>
<p>By default, outputs inherit the validation status of their Execution Setup. The Execution Setup inherits its validation status from its executable instance. An instance cannot have a higher validation status than its source definition. Therefore, by default an output cannot have a validation status of Production unless the Program (or other) definition used to produce it has a validation status of Production.</p>
<p>You can manually change the validation status of an output after it is generated; see <a href="#BEICAGFC">"Changing Objects' Validation Status"</a>.</p>
<p>For Programs only, you can set a flag in the definition to force the system to set the validation status of an output to Development regardless of the validation status of the Program definition, instance, or Execution Setup. You can then upgrade the output's validation status manually according to your company's policies. For information about using this approach in Report Sets see <a href="rsets.htm#BABFFEHH">"Validating Report Set Definitions and Outputs"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BEIDJBIG"></a>
<div id="LSHDG280" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Validation Statuses</h3>
<p>There are four validation statuses in Oracle LSH: <a href="#BEIFEJBC">Development</a>, <a href="#BEIDEFCI">Quality Control</a>, <a href="#BEIBGAFJ">Production</a>, and <a href="#BEIIFICC">Retired</a>. Your organization must develop a policy on the use of validation statuses. Oracle LSH enforces some behavior based on validation statuses; see <a href="#BEIBDAII">Validation Rules</a>.</p>
<p><a id="BEIFEJBC"></a><a id="LSHDG281"></a><span class="subhead3">Development&nbsp;</span>The Development status is intended for objects that are being developed and unit tested. All new objects have a validation status of Development when they are created.</p>
<p><a id="BEIDEFCI"></a><a id="LSHDG282"></a><span class="subhead3">Quality Control&nbsp;</span>The Quality Control status is intended for objects that are ready for or undergoing formal testing.</p>
<p><a id="BEIBGAFJ"></a><a id="LSHDG283"></a><span class="subhead3">Production&nbsp;</span>The Production status is intended of objects that are ready for or are being used in a production environment.</p>
<p><a id="BEIIFICC"></a><a id="LSHDG284"></a><span class="subhead3">Retired&nbsp;</span>The Retired status is for objects you no longer wish to use. See <a href="#BEIHAAFA">"Rules for Retired Objects"</a> for further information.</p>
</div>
<!-- class="sect2" -->
<a id="BEICAGFC"></a>
<div id="LSHDG285" class="sect2">
<h3 class="sect2">Changing Objects' Validation Status</h3>
<p>Object definitions and instances both have a validation status. You must work directly in the definition or instance to change its validation status.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
One security privilege is required to upgrade an object's validation status to Quality Control, and a different privilege is required to upgrade an object's status to Production. If you have either of these privileges, you can set an object's status to Retired.</div>
<p>When an object meets the standards set by your organization for the next validation status, change the status as follows:</p>
<ol>
<li>
<p>Navigate to the object definition or instance.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down list, select <span class="bold">Support Validation Info</span>. The Validation Status screen appears.</p>
</li>
<li>
<p>From the <span class="bold">Select Validation Status</span> drop-down list, select the correct status.</p>
</li>
<li>
<p>Click <span class="bold">Update</span>. The system tries to change the validation status and returns a message of success or failure.</p>
<p><span class="bold">Validation Cascade</span>. The system tries to upgrade related objects at the same time in accordance with the <a href="#BEIBDAII">Validation Rules</a>. If you are promoting an object instance to a higher validation status than its underlying definition, the system tries to promote the definition as well. If someone else has the definition checked out, the operation fails.</p>
<p>If the definition contains secondary objects&mdash;such as Parameters&mdash; whose definitions are at a lower status, the system tries to promote them as well, and the operation fails if another user has checked them out.</p>
<p><span class="bold">Automatic Checkin</span>. In most cases the system checks in the object and related objects as part of the validation process and applies the new status to the checked-in versions. However, you must manually check in an Execution Setup before you can change its validation status.</p>
</li>
<li>
<p>Click <span class="bold">Return</span>. The system returns you to the Properties screen for the object.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
One security privilege is required to upgrade an object's validation status to Quality Control, and a different privilege is required to upgrade an object's status to Production. If you have either of these privileges, you can set an object's status to Retired.</div>
</div>
<!-- class="sect2" -->
<div id="LSHDG286" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref19"></a>
<h3 class="sect2">Changing Outputs' Validation Status</h3>
<p>To change an output's validation status, do the following:</p>
<ol>
<li>
<p>Navigate to the output in one of these ways:</p>
<ul>
<li>
<p>If you submitted the job, you can click the <span class="bold">Job ID</span> on the My Home page to reach the <span class="bold">Job Details</span> screen, and then click the <span class="bold">Output</span> to reach the <span class="bold">Output</span> screen.</p>
</li>
<li>
<p>In the Reports tab, navigate to the output according to its classifications and click its icon in the <span class="bold">Action</span> column.</p>
</li>
</ul>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down list, select <span class="bold">Support Validation Info</span> and click <span class="bold">Go</span>.</p>
</li>
<li>
<p>From the <span class="bold">Select Validation Status</span> drop-down list, select the correct status.</p>
</li>
<li>
<p>Click <span class="bold">Update</span>. The system changes the validation status of the output.</p>
</li>
<li>
<p>Click <span class="bold">Return</span>. The system returns you to the Properties screen for the output.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BEIJCEFE"></a>
<div id="LSHDG287" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Adding Supporting Information</h3>
<p>This section contains two topics:</p>
<ul>
<li>
<p><a href="#BEICBGCC">Adding a Supporting Document</a></p>
</li>
<li>
<p><a href="#BEIFJEJH">Adding a Supporting Output</a></p>
</li>
</ul>
<p>Before you promote an object to the next validation status, your organization may require that you provide documentation about the object: either a link to an output generated by the object, such as a report or log file, or a document such as a functional requirements document for the object.</p>
<ul>
<li>
<p><span class="bold">Outputs</span>. You can use a log file to demonstrate that a Program or other executable ran successfully. You can use a report to demonstrate that an executable object has produced an appropriate report.</p>
</li>
<li>
<p><span class="bold">Documents</span>. You can upload any document as supporting information; for example, a requirements document or a set of test cases.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
To add supporting information for an object definition, you must navigate to the definition in its Domain or Application Area. When you are in a Work Area you can add supporting information only for object instances.</div>
<a id="BEICBGCC"></a>
<div id="LSHDG288" class="sect3">
<h4 class="sect3">Adding a Supporting Document</h4>
<p>To link an object to a document as supporting validation information, do the following:</p>
<ol>
<li>
<p>Navigate to the object.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down list, select <span class="bold">Support Validation Info</span>. The Validation Status screen appears.</p>
</li>
<li>
<p>Under Supporting Documents, click <span class="bold">Add</span>. The Manage Supporting Documents screen opens.</p>
</li>
<li>
<p>Enter a <span class="bold">Name</span> for the document.</p>
</li>
<li>
<p>Enter a <span class="bold">Description</span> for the document.</p>
</li>
<li>
<p>Click <span class="bold">Browse</span>. The system opens a standard Browse pop-up window.</p>
</li>
<li>
<p>Select any document on a local or shared drive and click <span class="bold">Open</span>.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>.</p>
<p>The system returns to the Supporting Information screen with the new supporting output listed. The new supporting document's status is set to Active.</p>
<p><span class="bold">Version History</span>. If you upload a different document in the future, the system creates a new version of the supporting document. Click Version History to see who changed the document when, with the reason for change, which is required. You can also view the document uploaded for each previous version.</p>
</li>
<li>
<p>Click <span class="bold">Return</span> to go back to the object's Properties screen.</p>
</li>
</ol>
<div id="LSHDG289" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref20"></a>
<h5 class="sect4">Obsolete</h5>
<p>The system does not delete any supporting documents. However, you can mark a document as Obsolete by selecting it and clicking <span class="bold">Obsolete</span>.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="BEIFJEJH"></a>
<div id="LSHDG290" class="sect3">
<h4 class="sect3">Adding a Supporting Output</h4>
<p>To link an object to an output as supporting validation information, do the following:</p>
<ol>
<li>
<p>Navigate to the object.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down list, select <span class="bold">Support Validation Info</span>. The Validation Status screen appears.</p>
</li>
<li>
<p>Under Supporting Outputs, click <span class="bold">Add</span>. The Manage Supporting Outputs screen opens.</p>
</li>
<li>
<p>Enter a <span class="bold">Description</span> for the output (required).</p>
</li>
<li>
<p>Click the <span class="bold">Search</span> icon to find the output you need. The Search and Select screen opens.</p>
</li>
<li>
<p>For <span class="bold">Search Using</span>, select either <span class="bold">Hierarchy</span> or <span class="bold">Job ID</span>.</p>
<p>If you select <span class="bold">Hierarchy</span>, select the hierarchy name and the level to which the output is classified and enter the value in the <span class="bold">Search</span> field.</p>
<p>Or enter a high-level value only and check <span class="bold">Include hierarchy based child in the search</span> to search all values in levels below the value you specify.</p>
<p>If you select <span class="bold">Job ID</span>, enter the job ID in the <span class="bold">Search</span> field.</p>
</li>
<li>
<p>Click <span class="bold">Go</span>. The system displays the results of the search.</p>
</li>
<li>
<p>Click the icon in the <span class="bold">Quick Select</span> column for the output you want.</p>
<p>The system returns to the Supporting Output Properties screen with the new output listed.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>. The system returns to the Managing Supporting Outputs screen with the new supporting output listed.</p>
</li>
<li>
<p>Click <span class="bold">Return</span>. The system returns to the Validation Status screen.</p>
</li>
<li>
<p>Click <span class="bold">Return</span>. The system returns to the object's Properties screen.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BEIBDAII"></a>
<div id="LSHDG291" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Validation Rules</h3>
<p>The system enforces the following rules based on objects' validation status:</p>
<ul>
<li>
<p>You can change an object's validation status only when it is checked in. If the object is not checked in, the system tries to check it in. If another user has checked it out, you cannot change the validation status.</p>
<p>Changing the validation status of a checked-in object does not change the version number of the object.</p>
</li>
<li>
<p>You cannot promote an object instance to a validation status higher than its underlying object definition. However, the system tries to promote the underlying definition when you promote the instance. If the definition is checked out by another user, the operation fails.</p>
<p>For example, if you create an instance of a Program definition whose validation status is Quality Control, you can promote the instance to a validation status of Quality Control, but you cannot promote it to Production until the definition has been promoted to Production. However, the system attempts to promote the definition to Production when you promote the instance, and if you have the necessary privileges on the definition, and if the definition is not checked out by a different user, the promotion succeeds.</p>
</li>
<li>
<p>Validation status is version-specific. Each time you create a new version of an object by checking it out (including checking out a definition through an instance) the system automatically gives the new version a validation status of Development. The system does not change the validation status of any existing versions.</p>
</li>
<li>
<p>When you copy an object, the validation status of the copy is set to Development no matter what the validation status of the original is.</p>
</li>
<li>
<p>You cannot run an Execution Setup whose validation status is less than the validation status of its owning object instance unless you have the IQ Submit security privilege on the Execution Setup.</p>
</li>
<li>
<p>To be installed in a Work Area, object instances must have a validation status equal to or greater than the Usage Intent of the Work Area.</p>
</li>
<li>
<p>The Work Area cannot be promoted to a validation status higher than the validation status of any of its object instances. However, if you try to promote a Work Area to a status above that of any of its objects, you have the opportunity to promote all the object instances and their underlying definition versions to the same status in a cascade operation.</p>
<p>The cascade validation fails if a different user has checked out any of the object definitions in need of promotion.</p>
</li>
<li>
<p>No executables can be run in a Work Area until the Work Area's validation status is equal to or greater than its Usage Intent value, except by users with the special Install Qualify Submit privilege on the Work Area. This is to allow testing of the Work Area before making it generally available for use.</p>
</li>
<li>
<p>Full installation and the Replace operation on Table instances in partial installation are not allowed in Work Areas with a usage intent of Production. This is to protect production data from deletion.</p>
</li>
<li>
<p>You cannot remove a Table instance whose validation status is Production from a Work Area of any usage intent.</p>
</li>
</ul>
<p><a id="BEIHAAFA"></a><a id="LSHDG292"></a><span class="subhead3">Rules for Retired Objects&nbsp;</span>The following rules apply to Retired objects:</p>
<ul>
<li>
<p>If an executable object instance is set to Retired, it cannot be submitted for execution, regardless of the validation status of it Execution Setups.</p>
</li>
<li>
<p>If a Work Area is set to Retired, no executable objects within it can be submitted for execution.</p>
</li>
<li>
<p>If you clone a Retired Work Area, the clone's status is also set to Retired. In the Work Area clone, the object instances retain the validation status they had in the original Work Area. Retired objects are included in the cloning process.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDBHCJC"></a>
<div id="LSHDG294" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Reordering and Renumbering Objects</h2>
<p>You can use the Reorder function to change the order of some objects and the Renumber function to create sequential numbering for some objects.</p>
<p>To reorder and/or renumber objects:</p>
<ol>
<li>
<p>Click <span class="bold">Reorder</span>. The Reorder shuttle appears.</p>
</li>
<li>
<p>Select the object you want to move and click the <span class="bold">Up</span> and <span class="bold">Down</span> arrows to move it in relation to the other objects.</p>
</li>
<li>
<p><span class="bold">Starting Entry Number</span> (Report Sets only). By default, the object displayed at the top is assigned the number one (1). You can enter a different starting number in the <span class="bold">Starting Entry Number</span> field.</p>
</li>
<li>
<p>If you want to change the object's numbers to reflect the new order and/or the new starting number, leave the <span class="bold">Renumber</span> flag set to Yes. If you change the setting to No, the system keeps the original numbers (except the changed starting number, if any) but displays the objects in the order you specify.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>. The new order and/or numbers are displayed in the original screens.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="BACBIIJA"></a>
<div id="LSHDG296" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining and Mapping Table Descriptors</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABDFGJE">About Table Descriptors</a></p>
</li>
<li>
<p><a href="#BEIJFJIE">Creating a Table Descriptor</a></p>
</li>
<li>
<p><a href="#CIHDCCDA">Mapping Table Descriptors to Table Instances</a></p>
</li>
<li>
<p><a href="#BEIDBGDI">Creating and Mapping Table Descriptors and Table Instances at the Same Time</a></p>
</li>
<li>
<p><a href="#BEICAGHC">Unmapping Table Descriptors</a></p>
</li>
<li>
<p><a href="#BEIBCEHB">Modifying Table Descriptors</a></p>
</li>
</ul>
<a id="BABDFGJE"></a>
<div id="LSHDG297" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Table Descriptors</h3>
<p>Use Table Descriptors to map executable objects to the tables they read from and write to. By having this table metadata in the executable object, you can map the executable to source and target table instances that are compatible in terms of column data type and length but that may not have exactly the same columns, table or column names, or column lengths as the tables the executable object was originally created to work with. This promotes reuse of Programs, Load Sets, Data Marts, and Business Areas.</p>
<p>In a Program definition's source code you refer to source and target Tables and Columns by the names of the Table Descriptors and their Columns, not the actual Table instances. In each instance of the Program you map the Table Descriptors to the Table instances they must read from or write to. You can have multiple instances of the same Program mapped to different source and target Table instances, and the Table instances may have different names or a different (but compatible) structure (see <a href="#BABIABJJ">"Mapping Columns of Different Data Types and Lengths"</a>).</p>
<p>For example, if Study 1 and Study 2 use demography tables with the same structure but called Demog in Study 1 and Demo in Study 2, you can create a single Program definition that reads from the demography table and creates several reports. You can create one instance of the Program that reads from the Study 1 Demog Table and another instance of the Program that reads from the Study 2 Demo Table.</p>
<p>Table Descriptors do not have constraints or data processing types. Different rules apply to source and target Table Descriptors.</p>
<p><a id="LSHDG298"></a><span class="subhead3">Source Table Descriptor&nbsp;</span>A source Table Descriptor must be mapped to a Table instance that contains data to be used as input. You can map a source Table Descriptor to a Table instance located in any Work Area to which you have security access; in other words, your Program (or Data Mart or Business Area) can operate or report on data located anywhere in Oracle LSH where you have View privileges to Table instances.</p>
<p>For example, if you have a different Application Area for each clinical trial, you can pull data from each trial and combine data for a whole project by mapping the source Table Descriptors of the Program that combines the data to Table instances in the Work Area for each of the clinical trials.</p>
<p>The same Table instance can serve as a source for multiple Programs, Business Areas, and Data Marts.</p>
<p><a id="LSHDG299"></a><span class="subhead3">Target Table Descriptor&nbsp;</span>A target Table Descriptor must be mapped to a Table instance that receives data output from a Program or Load Set. Target Table Descriptors must be mapped to a Table instance located in the same Work Area as the Program or Load Set instance.</p>
<p><a id="LSHDG1925"></a><span class="subhead3">Mapping Rules&nbsp;</span>The system enforces the following mapping rules:</p>
<ul>
<li>
<p>Only one Program can write to a Table instance; therefore only one target Table Descriptor can be mapped to a particular Table instance.</p>
</li>
<li>
<p>A Table instance can be mapped to only one Table Descriptor in a Program instance.</p>
</li>
<li>
<p>For additional rules, see <a href="#BABDHHHD">"Using Format Conversions"</a> and <a href="#BABIABJJ">"Mapping Columns of Different Data Types and Lengths"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BEIJFJIE"></a>
<div id="LSHDG301" class="sect2">
<h3 class="sect2">Creating a Table Descriptor</h3>
<p>There are several ways to create a Table Descriptor:</p>
<ul>
<li>
<p><a href="#BEICDHEH">Adding Source Table Descriptors</a></p>
</li>
<li>
<p><a href="#BEICDDHI">Adding Target Table Descriptors from a Remote Location</a></p>
</li>
<li>
<p><a href="#BEIGAEJF">Adding Target Table Descriptors from a SAS File</a></p>
</li>
<li>
<p><a href="#BEIJEHBJ">Adding a Table Descriptor from a Metadata File</a></p>
</li>
<li>
<p><a href="#BEIHECAF">Adding a Target Table Descriptor from an Existing Table Definition</a></p>
</li>
<li>
<p><a href="#BEIHFFAA">Adding a New Target Table Descriptor</a></p>
</li>
<li>
<p><a href="#BABGDGDF">Creating Table Descriptors from Table Instances and Simultaneously Mapping Them</a></p>
</li>
</ul>
<p>See also:</p>
<ul>
<li>
<p><a href="#BEICGGJI">Setting Table Descriptor Attributes</a></p>
</li>
<li>
<p><a href="#CIHDCCDA">Mapping Table Descriptors to Table Instances</a></p>
</li>
</ul>
<a id="BEICDHEH"></a>
<div id="LSHDG1926" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Adding Source Table Descriptors</h4>
<p>This option is available for objects that have source Table Descriptors: Programs, Business Areas, and Data Marts. To use this option, the Table instance you want to read from must already be defined in Oracle LSH and you must have Read privileges on it. You can create multiple Table Descriptors at a time from Table instances located in a single Work Area.</p>
<p>The system bases the Table Descriptor on the same Table definition the Table instance is based on, and automatically maps the new Table Descriptor to the Table instance.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This functionality is also available in the Actions drop-down as the <span class="bold">Table Descriptors from Existing Table Instances</span> item.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can also create a source Table Descriptor by creating a target Table Descriptor and changing its Is Target attribute value to <span class="bold">No</span>.</div>
<ol>
<li>
<p>In the Table Descriptors subtab in the Properties screen of a Program, Business Area, or Data Mart instance, click <span class="bold">Add Source</span>.</p>
<p>The Create Table Descriptors from Table Instances screen opens.</p>
</li>
<li>
<p>Select the location of a Table instance for which you want to create a Table Descriptor:</p>
<ul>
<li>
<p>Select the Table instance's Domain from the <span class="bold">Domain</span> drop-down list.</p>
</li>
<li>
<p>Select the Table instance's Application Area from the <span class="bold">Application Area</span> drop-down list. The choices are limited to Application Areas contained in the Domain you selected.</p>
</li>
<li>
<p>Select the Table instance's Work Area from the <span class="bold">Work Area</span> drop-down list. The choices are limited to Work Areas contained in the Application Area you selected.</p>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Go</span>. The system displays all the Table instances in the Work Area you selected.</p>
</li>
<li>
<p>Select one or more Table instances by clicking the <span class="bold">Select</span> checkbox.</p>
</li>
<li>
<p>Click <span class="bold">Create Table Descriptor</span>. The system returns you to the Create Table Descriptors from Table Instances screen. To return to the Program's Properties screen, click <span class="bold">Return</span>. Check that the mappings are complete.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BEICDDHI"></a>
<div id="LSHDG1927" class="sect3">
<h4 class="sect3">Adding Target Table Descriptors from a Remote Location</h4>
<p>This option is available for Oracle technology Programs and Load Sets.</p>
<p>The system searches for Variables in the same Application Area with the same name, data type, and length as each of the variables in the data set. If a matching Variable exists, the system bases a Column of the Table definition on it. If a Table definition with the same name already exists in the Application Area, the system appends _1 to it, or _<span class="italic">x</span> if the Table name already has a number appended, where <span class="italic">x</span> is the next larger integer.</p>
<ol>
<li>
<p>After defining the Remote Location and any other required attributes, go to the Table Descriptors subtab of the Load Set's Properties screen and click Add Target from <span class="bold">Remote Location</span>. The system opens the Upload Table Descriptors screen with tables from the specified remote location displayed.</p>
</li>
<li>
<p>Select the tables from which you want to create Table Descriptors and click <span class="bold">Apply</span>.</p>
<p>For each selected table, the system creates a target Table Descriptor and Table definition in the current Application Area. The system returns to the Load Set's Properties screen.</p>
</li>
<li>
<p>You can update the Table Descriptor as necessary; click the Table Descriptor name. See <a href="#BEICGGJI">"Setting Table Descriptor Attributes"</a> and <a href="#BEIBGGDG">"Adding or Uploading Columns"</a>.</p>
</li>
<li>
<p>Click the Mapping icon for the Table Descriptor and map it to a Table instance. See <a href="#CIHDCCDA">"Mapping Table Descriptors to Table Instances"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BEIGAEJF"></a>
<div id="LSHDG302" class="sect3">
<h4 class="sect3">Adding Target Table Descriptors from a SAS File</h4>
<p>This option is available for objects that have target Table Descriptors and support this option: Programs and some Load Sets. If you specify a single data set file, the system creates a single Table Descriptor. If you specify a SAS transport file that contains more than one data set, the system creates one Table Descriptor for each data set in the file.</p>
<p>The system searches for Variables in the same Application Area with the same name, data type, and length as each of the variables in the data set. If a matching Variable exists, the system bases a Column of the Table definition on it. If a Table definition with the same name already exists in the Application Area, the system appends _1 to it, or _<span class="italic">x</span> if the Table name already has a number appended, where <span class="italic">x</span> is the next larger integer.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle LSH gives SAS variables of SAS format BEST8 a length of 8 and Precision set to null.</div>
<ol>
<li>
<p>In the Table Descriptors subtab of the Load Set or Program's Properties screen, click Add Target from <span class="bold">SAS File</span>. The system opens the Create Table Descriptors screen. with <span class="bold">Create a New Table Definition and Descriptor from SAS file</span> selected.</p>
</li>
<li>
<p>Click <span class="bold">Browse</span>. The system opens a standard browse screen.</p>
</li>
<li>
<p>Navigate to the location of the SAS file.</p>
</li>
<li>
<p>Highlight the file and click <span class="bold">OK</span>, then click <span class="bold">Apply</span></p>
<p>The system creates a target Table Descriptor and Table definition in the current Work Area. The system returns to the Program or Load Set's Properties screen.</p>
</li>
<li>
<p>Click the Table Descriptor name to see the Table Descriptor screen. You can update the Table Descriptor here as necessary; see <a href="#BEICGGJI">"Setting Table Descriptor Attributes"</a> and <a href="#BEIBGGDG">"Adding or Uploading Columns"</a>.</p>
</li>
<li>
<p>Click the Mapping icon for the Table Descriptor and map it to a Table instance. See <a href="#CIHDCCDA">"Mapping Table Descriptors to Table Instances"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BEIHECAF"></a>
<div id="LSHDG303" class="sect3">
<h4 class="sect3">Adding a Target Table Descriptor from an Existing Table Definition</h4>
<p>This option is available for objects that have target Table Descriptors: Programs and Load Sets.</p>
<ol>
<li>
<p>In the Table Descriptors subtab of the Program or Load Set's Properties screen, click Add Target from <span class="bold">Library</span>. The system opens the Create Table Descriptors screen with <span class="bold">Create a Descriptor of an Existing Table Definition</span> selected.</p>
</li>
<li>
<p>Click the Search icon. The system opens the Search and Select screen.</p>
</li>
<li>
<p>Select the location of a Table definition from which you want to create a Table Descriptor:</p>
<ul>
<li>
<p>Select the Table definition's Domain from the <span class="bold">Domain</span> drop-down list.</p>
</li>
<li>
<p>Select the Table definition's Application Area from the <span class="bold">Application Area</span> drop-down list. The choices are limited to Application Areas contained in the Domain you selected. Leave this field blank to search for definitions contained in the Domain library.</p>
</li>
<li>
<p>If you know the exact name or version label of the definition you want, select either Name or Version Label from the <span class="bold">Search By</span> drop-down list and enter the name or version label in the blank field.</p>
</li>
<li>
<p>(Optional) Select <span class="bold">Display All Versions</span> and/or <span class="bold">Display Not Null Version Labels</span>.</p>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Go</span>. The system displays the Table definitions in the Application Area or Domain Library you selected.</p>
</li>
<li>
<p>Click the Quick Select icon for the Table definition from which you want to create the Table Descriptor. The system populates the <span class="bold">Definition Source</span> field with the definition you selected.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>. The system opens the screen for the new Table Descriptor.</p>
</li>
<li>
<p>You can update the Table Descriptor here as necessary; see <a href="#BEICGGJI">"Setting Table Descriptor Attributes"</a> and <a href="#BEIBGGDG">"Adding or Uploading Columns"</a>.</p>
</li>
<li>
<p>Click the Mapping icon for the Table Descriptor and map it to a Table instance. See <a href="#CIHDCCDA">"Mapping Table Descriptors to Table Instances"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BEIJEHBJ"></a>
<div id="LSHDG1935" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Adding a Table Descriptor from a Metadata File</h4>
<p>You can create aTable Descriptors by uploading a metadata (.mdd) file with a required format, or create multiple Table Descriptors at once by uploading a zipped file containing multiple metadata files.</p>
<p>Depending on the type of object for which you are creating the Table Descriptor, the name of the button in the Table Descriptor tab varies: either Add, or Add Target, or File.</p>
<p class="subhead2"><a id="LSHDG1936"></a>Creating a Metadata File</p>
<p>If the file has an .mdd extension, the system expects a set of Column attribute values, optionally preceded by a row identifying the delimiter and a row defining Table attribute values, each of which must begin with a key word. A row beginning with dashes is treated as a comment. For example:</p>
<p><code dir="ltr">--This is a comment.</code></p>
<div id="LSHDG1937" class="example">
<p class="titleinexample"><a id="sthref21"></a>Example 3-1 Sample Set Metadata File</p>
<pre dir="ltr">
lsh_delimiter = ,
--This section is for the Table attributes
lsh_table= DM,DEMOG Table,EMP,EMP,EMP,Staging with Audit,Yes,Yes,Blinded,target,yes,yes
 
--The following are columnsComment Line 2
INITS,VARCHAR2,100,,inits,inits,2.,,inits,no,1
AGE,NUMBER,10,,2,age,age,2.,,age,yes,1
        DOB,DATE,,,3,dob,dob,datetime.,,dob,yes,1,MM/DD/YY HH24:MI:SS
</pre></div>
<!-- class="example" -->
<p><a id="LSHDG1938"></a><span class="subhead3">Delimiter&nbsp;</span> The first row defines the delimiter used in the file. If not specified, Oracle LSH treats it as a comma delimited file. The delimiter row must begin with <code dir="ltr">lsh_delimiter=</code></p>
<p><a id="LSHDG1939"></a><span class="subhead3">Table and Table Descriptor Attributes&nbsp;</span>The second row lists the table attributes required in the file. The Table attribute row must begin with <code dir="ltr">lsh_table=</code></p>
<p>If the second row is not present or contains null values, the system assumes that the filename (without extension) is the Table Name and follows the normal Oracle LSH default behavior for the attribute values. The attributes and their required order in the file are: <code dir="ltr">Name, Description, Oracle Name, SAS Name, SAS Label, Process Type, Allow Snapshot?, Blinding Flag?, Blinding Status, SAS Library Name, Is Target?, Target as Dataset?</code></p>
<p>Some attributes have associated reference codelists and allow either the actual values for the associated reference codelist (RC) columns or the decode values defined in the "Meaning" attribute of the _RC lookup. For example, "select meaning from cdr_lookups where lookup_code='&lt; RC&gt;' so that <span class="bold">YES</span> or <span class="bold">Yes</span> or <span class="bold">$YESNO$YES</span> are acceptable values.</p>
<p>The following table outlines the applicable values for each Oracle LSH Table attribute that has an associated reference codelist.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Processing types that require audit keys are not supported.</div>
<div id="LSHDG1940" class="tblformal">
<p class="titleintable"><a id="sthref22"></a><a id="sthref23"></a>Table 3-1 Table Attributes with Reference Codelist Values</p>
<table class="cellalignment81" title="Table Attributes with Reference Codelist Values" summary="Oracle LSH Table attributes and reference codelist values" dir="ltr">
<thead>
<tr class="cellalignment71">
<th class="cellalignment82" id="r1c1-t31">Table Attribute</th>
<th class="cellalignment82" id="r1c2-t31">Applicable Reference Codelist Values</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment71">
<td class="cellalignment77" id="r2c1-t31" headers="r1c1-t31">
<p>Processing Type</p>
</td>
<td class="cellalignment77" headers="r2c1-t31 r1c2-t31">
<p>Staging with Audit, Staging without Audit, Transactional High Throughput, Transactional without Audit</p>
</td>
</tr>
<tr class="cellalignment71">
<td class="cellalignment77" id="r3c1-t31" headers="r1c1-t31">
<p>Allow Snapshot</p>
</td>
<td class="cellalignment77" headers="r3c1-t31 r1c2-t31">
<p>Yes, No</p>
</td>
</tr>
<tr class="cellalignment71">
<td class="cellalignment77" id="r4c1-t31" headers="r1c1-t31">
<p>Blinding Flag</p>
</td>
<td class="cellalignment77" headers="r4c1-t31 r1c2-t31">
<p>Yes, No</p>
</td>
</tr>
<tr class="cellalignment71">
<td class="cellalignment77" id="r5c1-t31" headers="r1c1-t31">
<p>Blinding Status</p>
</td>
<td class="cellalignment77" headers="r5c1-t31 r1c2-t31">
<p>Blinded, Unblinded</p>
</td>
</tr>
<tr class="cellalignment71">
<td class="cellalignment77" id="r6c1-t31" headers="r1c1-t31">
<p>Is Target</p>
</td>
<td class="cellalignment77" headers="r6c1-t31 r1c2-t31">
<p>Yes, No</p>
</td>
</tr>
<tr class="cellalignment71">
<td class="cellalignment77" id="r7c1-t31" headers="r1c1-t31">
<p>Target as dataset</p>
</td>
<td class="cellalignment77" headers="r7c1-t31 r1c2-t31">
<p>Yes, No</p>
</td>
</tr>
<tr class="cellalignment71">
<td class="cellalignment77" id="r8c1-t31" headers="r1c1-t31">
<p>Data Type</p>
</td>
<td class="cellalignment77" headers="r8c1-t31 r1c2-t31">
<p>Date, Number, Varchar2</p>
</td>
</tr>
<tr class="cellalignment71">
<td class="cellalignment77" id="r9c1-t31" headers="r1c1-t31">
<p>Nullable</p>
</td>
<td class="cellalignment77" headers="r9c1-t31 r1c2-t31">
<p>Nullable , Yes, No</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a id="LSHDG1941"></a><span class="subhead3">Columns&nbsp;</span> Subsequent rows must contain the column and variable attributes with each represented by a new row in the text file with attributes. The position is determined by the order in which the column /variable rows are processed. For example, in a comma delimited file: <code dir="ltr">Name, Data Type, Length, Precision, Oracle Name, SAS Name, SAS Format, Description, SAS Label, Nullable, Default Value, Date Format</code></p>
<p>Normal Oracle LSH validation rules apply to the Column or variable attributes. The operation uses Oracle LSH default values if invalid values are provided for any of the attributes.</p>
</div>
<!-- class="sect3" -->
<a id="BEIHFFAA"></a>
<div id="LSHDG304" class="sect3">
<h4 class="sect3">Adding a New Target Table Descriptor</h4>
<p>This option is available for objects that have target Table Descriptors: Programs and Load Sets. If your Program will write to (or read from) a table that does not yet exist, you can manually create the Table definition and Table Descriptor at the same time:</p>
<ol>
<li>
<p>In the Table Descriptors subtab of the Program's Properties screen, click Add Target from <span class="bold">New</span>. The system opens the Create Table Descriptors screen with <span class="bold">Create a New Table Definition and Descriptor</span> selected.</p>
</li>
<li>
<p>Enter values in the following fields:</p>
<ul>
<li>
<p><span class="bold">Name</span>. See <a href="#CHDBIJAH">"Naming Objects"</a>.</p>
</li>
<li>
<p><span class="bold">Description</span>. See <a href="#CHDIHBBC">"Creating and Using Object Descriptions"</a>.</p>
</li>
<li>
<p><span class="bold">Oracle Name</span> (up to 30 characters, uppercase, no spaces). Enter text or accept the default value. The system automatically creates the default from the text you entered in the Name field, converting it to uppercase, with underscores (_) substituted for spaces, truncated to 30 characters if necessary.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Each Table Descriptor within a particular executable object must have a unique Oracle Name.</div>
</li>
<li>
<p><span class="bold">SAS Name</span> (up to 32 characters, uppercase, no spaces). Enter text or accept the default value. The system automatically creates the default from the text you entered in the Name field, converting it to uppercase, with underscores (_) substituted for spaces.</p>
</li>
<li>
<p>Enter a <span class="bold">SAS Label</span> (optional, up to 256 characters). Enter text or accept the default value. The system automatically creates the default from the text you entered in the Name field.</p>
</li>
<li>
<p>Enter a <span class="bold">SAS Library Name</span> (optional, up to 8 characters).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you plan to use this Table Descriptor with an Oracle Business Intelligence (OBIEE) Business Area, you can set the SAS Library Name to <code dir="ltr">$REPINIT</code>. See <a href="defvis.htm#CHDJAGDJ">"Defining Table Descriptors"</a> for more information.</div>
</li>
</ul>
</li>
<li>
<p>Set Is Target and other Table Descriptor attributes; see <a href="#BEICGGJI">"Setting Table Descriptor Attributes"</a>.</p>
</li>
<li>
<p>In the <span class="bold">Classification</span> section, select the following for the definition:</p>
<ul>
<li>
<p><span class="bold">Subtype</span>. Select a subtype according to your company's policies.</p>
</li>
<li>
<p><span class="bold">Classification Values</span>. See <a href="#CHDJADAD">"Classifying Objects and Outputs"</a> for instructions.</p>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Apply</span>. The system opens the screen for the new Table Descriptor.</p>
<p>You can update it as necessary:</p>
<ul>
<li>
<p>Click <span class="bold">Update</span> to modify attribute settings. See <a href="#BEICGGJI">"Setting Table Descriptor Attributes"</a>.</p>
</li>
<li>
<p>Check out the Table definition to be able to add Columns. See <a href="#BEIBGGDG">"Adding or Uploading Columns"</a>.</p>
</li>
</ul>
</li>
<li>
<p>If you make any changes, click <span class="bold">Apply</span> to save them. The system opens the Table Descriptor Properties screen. Click <span class="bold">Return</span>. The system opens the Program's Properties screen.</p>
</li>
<li>
<p>Click the Mapping icon for the Table Descriptor and map it to a Table instance. See <a href="#CIHDCCDA">"Mapping Table Descriptors to Table Instances"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BEICGGJI"></a>
<div id="LSHDG305" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Setting Table Descriptor Attributes</h4>
<p>Table Descriptors may have the following attributes:</p>
<p><a id="LSHDG306"></a><span class="subhead3">Is Target&nbsp;</span>Select <span class="bold">Yes</span> to create a target Table Descriptor. Select <span class="bold">No</span> to create a source Table Descriptor.</p>
<p><a id="LSHDG307"></a><span class="subhead3">Target As Dataset&nbsp;</span>(Available only in SAS Programs, and only when <span class="bold">Is Target</span> is set to <span class="bold">Yes</span>.) Select <span class="bold">Yes</span> if you are using a legacy SAS program that uses data statements to write to data sets. Because Program source code must write to Table Descriptors, and Table Descriptors are views, you should use Proc SQL statements to write data to tables in Oracle LSH. However, if you set this attribute to Yes, Oracle LSH adds a processing step to enable SAS data statements to write to Oracle LSH Table Descriptors. This extra processing step results in slower performance but allows you to use existing programs.</p>
<p>Select <span class="bold">No</span> if the Program's source code uses Proc SQL statements to write to Table Descriptors. This results in optimal performance.</p>
<p><a id="LSHDG308"></a><span class="subhead3">Reveal Audit&nbsp;</span>(Available only for source Table Descriptors; when <span class="bold">Is Target</span> is set to <span class="bold">No</span>.) By default <span class="bold">Reveal Audit</span> is set to <span class="bold">No</span> and the Program, Data Mart, or Load Set can read data from the Table instance mapped to this Table Descriptor that is or was current at a particular point in time. By default it sees only current data, but it is possible to specify a data snapshot at a past point in time in the Execution Setup of the Program, Data Mart, or Load Set.</p>
<p>Each time a data record is changed in Oracle LSH, the system creates a new row with the updated information. The system sets the end timestamp of the old record so that it is no longer current. When a record is deleted, the system sets its end timestamp and also adds a row explicitly recording the deletion. The set of rows for a single data record constitutes its audit trail.</p>
<p>If you set <span class="bold">Reveal Audit</span> to <span class="bold">Yes</span> the system exposes all data in the Table instance at all points in time to the Program, Data Mart, or Load Set reading from the Table instance, and exposes the predefined audit columns CDR$CREATION_TS (creation timestamp), CDR$CREATED_BY (creator username), CDR$MODIFICATION_TS (modification timestamp), and CDR$MODIFIED_BY (modifier username).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Because SAS does not support the $ special character, the SAS Name of each of these internal column names has an underscore (_) instead of a dollar sign ($) as follows: CDR_CREATION_TS, CDR_CREATED_BY, CDR_MODIFICATION_TS, CDR_MODIFIED_BY.</div>
<p>You can use this functionality as follows:</p>
<ul>
<li>
<p><span class="bold">Data Marts</span>. If you set <span class="bold">Reveal Audit</span> to <span class="bold">Yes</span> for all the Table Descriptors in a Data Mart, the resulting Data Mart output contains the complete audit trail of every record that the mapped Table instances ever contained.</p>
</li>
<li>
<p><span class="bold">Programs</span>. If you set <span class="bold">Reveal Audit</span> to <span class="bold">Yes</span> for all the Table Descriptors in a Program, you can write source code that reads data from all points in time and that references the audit columns.</p>
</li>
<li>
<p><span class="bold">Load Sets</span>. Because the source Table Descriptors of most types of Load Sets point to data files or tables outside of Oracle LSH that do not contain audit information, it does not make sense to use the Reveal Audit feature with SAS, text, or most Oracle Load Sets. However, Oracle Clinical uses a similar system for maintaining an audit trail so you may want to use Reveal Audit with some Oracle Clinical tables.</p>
<p>Oracle Clinical inserts a row each time a record is modified and sets the end timestamp of the previous row for the same record. However, when a record is deleted Oracle Clinical sets its end timestamp but does not add a row explicitly recording the deletion.</p>
</li>
</ul>
<ul>
<li>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Execution Setup user interface cannot detect if a Table instance is mapped to a Table Descriptor whose <span class="bold">Reveal Audit</span> flag is set to <span class="bold">Yes</span>, so it is possible for a user to specify a snapshot for such a Table instance at execution time. However, during execution the system ignores any snapshots set for Table instances mapped to a source Table Descriptor whose <span class="bold">Reveal Audit</span> flag is set to <span class="bold">Yes</span>.</div>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BEIBGGDG"></a>
<div id="LSHDG309" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Adding or Uploading Columns</h4>
<p>You can upload Columns based on SAS data set variables:</p>
<ol>
<li>
<p>Check out the Table Definition if it is not already checked out.</p>
</li>
<li>
<p>Click <span class="bold">Upload Column</span>. The system displays the Upload Column screen.</p>
</li>
<li>
<p>Click <span class="bold">Browse</span>. The system opens a standard Browse pop-up window.</p>
</li>
<li>
<p>Navigate to the data set from which you want to upload Columns and click <span class="bold">Open</span>, then <span class="bold">Apply</span>. The system uploads all the variables from the data set as Columns in the Table Descriptor and its source Table definition.</p>
<p>You can remove any Columns you do not need. To remove one or more Columns, click the checkbox in the Select column and click <span class="bold">Remove</span>.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHDCCDA"></a>
<div id="LSHDG311" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Mapping Table Descriptors to Table Instances</h3>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#BABGDGDF">Creating Table Descriptors from Table Instances and Simultaneously Mapping Them</a></p>
</li>
<li>
<p><a href="#BEIDGAEJ">Creating Table Instances from Table Descriptors and Simultaneously Mapping Them</a></p>
</li>
<li>
<p><a href="#CIHJJIIA">Automatic Mapping by Name</a></p>
</li>
<li>
<p><a href="#BABICBBD">Mapping Table Descriptors Manually</a></p>
</li>
<li>
<p><a href="#BEIFDEBI">Remapping</a></p>
</li>
<li>
<p><a href="#BEIFEHFB">The Effects of Modifying the Table Descriptor or Table Instance on a Mapping</a></p>
</li>
</ul>
<p>A Program or other executable object instance can read data only when its source Table Descriptors are mapped to the Table instances that contain the source data, and can write data to Table instances only when target Table Descriptors are mapped to the Table instances. In addition, both the executable instance and the Table instance must be installed in the database. Table Descriptors must be mapped to Table instances at both the Table and Column level.</p>
<p><a id="LSHDG312"></a><span class="subhead3">Mapping Columns&nbsp;</span>When you map a Table Descriptor to a Table instance, the system may or may not be able to map Columns automatically. If not, you can map them manually; see <a href="#BABICBBD">"Mapping Table Descriptors Manually"</a>.</p>
<p>However, if a Target Table Descriptor in a Load Set or Program is updated or new columns added, installation automatically upgrades the Table instance and completes the mapping. Note that the Table instance is upgraded only if the changes to the Table Descriptor are non-destructive, such as the addition of a column.</p>
<p>You can supply default values for any Columns that are still unmapped; see <a href="#BABJJACJ">"Mapping Columns to Constants"</a>. In some cases, you can map columns of different data types and lengths; see <a href="#BABIABJJ">"Mapping Columns of Different Data Types and Lengths"</a>).</p>
<p>For source Table Descriptors you do not need to map Table instance Columns that are not used by the Program.</p>
<p><a id="LSHDG313"></a><span class="subhead3">Data Processing Compatibility&nbsp;</span>Be sure to map target Table Descriptors to Table instances whose data processing type is compatible with your source code:</p>
<ul>
<li>
<p>If you have insert, update, and delete statements in your source code, you must map your target Table Descriptors to Table instances with a data processing type of either Transactional or Staging.</p>
</li>
<li>
<p>If you have insert statements only, you must map your target Table Descriptors to Table instances with a data processing type of either Reload or Staging.</p>
</li>
</ul>
<a id="CIHJJIIA"></a>
<div id="LSHDG315" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Automatic Mapping by Name</h4>
<p>The Automatic Mapping by Name job can run on multiple Table Descriptors in a Program or other executable object. By default, it looks for a Table instance with the same name in the same Work Area as the executable instance. If you are mapping source Table Descriptors only, you can specify a different Work Area.</p>
<p>You can also use this feature for remapping Table Descriptors.</p>
<p>To run automatic mapping:</p>
<ol>
<li>
<p>On the executable instance's Properties screen, select <span class="bold">Automatic Mapping By Name</span> from the <span class="bold">Actions</span> drop-down list and click <span class="bold">Go</span>. (In a Report Set instance, you can reach this screen from the Report Set structure screen by selecting the Report Set instance or a Report Set Entry, then selecting <span class="bold">Map</span> from the drop-down list and clicking <span class="bold">Go</span>.)</p>
<p>The system displays the Automatic Mapping by Name screen and, by default, unmapped Table Descriptors only. The current Work Area is selected by default, and if it contains a Table instance with the same name as an unmapped Table Descriptor, the Table instance is displayed on the same row as the Table Descriptor.</p>
</li>
<li>
<p>In the <span class="bold">View</span> drop-down list, specify which Table Descriptors to display:</p>
<ul>
<li>
<p><span class="bold">Unmapped</span>. The system displays only unmapped Table Descriptors (the default).</p>
</li>
<li>
<p><span class="bold">Mapped</span>. The system displays only mapped Table Descriptors, so that you can remap them to different Table instances.</p>
</li>
<li>
<p><span class="bold">Both Mapped and Unmapped</span>. The system displays all Table Descriptors and you can map and remap them as necessary.</p>
</li>
</ul>
</li>
<li>
<p>Select the location of a Table instance you want to map to. Accept the current Work Area or, only if you are mapping a source Table Descriptor, specify a different one by doing the following:</p>
<ul>
<li>
<p>Select the Table instance's Domain from the <span class="bold">Domain</span> drop-down list.</p>
</li>
<li>
<p>Select the Table instance's Application Area from the <span class="bold">Application Area</span> drop-down list. The choices are limited to Application Areas contained in the Domain you selected.</p>
</li>
<li>
<p>Select the Table instance's Work Area from the <span class="bold">Work Area</span> drop-down list.</p>
</li>
<li>
<p>Click <span class="bold">Go</span>. The system searches the selected Work Area for Table instances with a name that matches the name of any of the displayed Table Descriptors and displays them in the same row as the matching Table Descriptor if found.</p>
</li>
</ul>
</li>
<li>
<p>Select one or more Table Descriptors with a matching Table instance in the specified location and click <span class="bold">Map</span>. The system creates the Table-level mapping and attempts to map Columns by name.</p>
</li>
<li>
<p>Map another Table Descriptor or click <span class="bold">Return</span> to display the executable's main page.</p>
</li>
<li>
<p>Check the mapping status of the Table Descriptors you have mapped.</p>
<ul>
<li>
<p>If the system was able to map all their Columns, their mapping status is Complete.</p>
</li>
<li>
<p>If the system could not map all the required Columns, their mapping status is Incomplete and you must map them manually. See <a href="#BABBAADI">"Mapping Columns"</a>.</p>
</li>
</ul>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BABICBBD"></a>
<div id="LSHDG316" class="sect3">
<h4 class="sect3">Mapping Table Descriptors Manually</h4>
<p>If you want to map a Table Descriptor to a Table instance that has a different name, you must map it manually. You can also use this method to remap a Table Descriptor that is already mapped.</p>
<p>To map a Table Descriptor to a Table instance manually, go to the main Program screen, Table Descriptors subtab, and do the following:</p>
<ol>
<li>
<p>Click the icon in the Table Descriptor's <span class="bold">Mapping</span> column. The system opens the Mapping screen with the Table Descriptor's name already entered in either the From or To column, depending on whether it is a target or a source Table Descriptor, respectively.</p>
</li>
<li>
<p>Click <span class="bold">Update</span>. Several fields become modifiable.</p>
</li>
<li>
<p>Click the <span class="bold">Search</span> icon next to the <span class="bold">Map to Table Instance</span> field. The system opens the Search screen.</p>
</li>
<li>
<p>Select the <span class="bold">Domain</span>, <span class="bold">Application Area</span>, and <span class="bold">Work Area</span> of the Table instance to which you want to map.</p>
<ul>
<li>
<p>Select the Table instance's Domain from the <span class="bold">Domain</span> drop-down list.</p>
</li>
<li>
<p>Select the Table instance's Application Area from the <span class="bold">Application Area</span> drop-down list. The choices are limited to Application Areas contained in the Domain you selected.</p>
</li>
<li>
<p>If you know the exact name or version label of the Table instance you want, select either Name or Version Label from the <span class="bold">Search By</span> drop-down list and enter the name or version label in the blank field.</p>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Go</span>. The system displays all the Table instances that meet the criteria, and for which you have View privileges.</p>
<p>You cannot map to a Table instance while its source Table definition is checked out. The system displays Table instances whose source Table definition is currently checked out as grayed out. You can look at the Table definition to see who has it checked out.</p>
</li>
<li>
<p>Click the <span class="bold">Quick Select</span> icon for the Table instance you want to map.</p>
<p>The system enters the name of the Table instance you selected and automatically tries to map it to the Table Descriptor. The system displays any Columns it finds that match a Column in the Table Descriptor across from the matching Column.</p>
<p>If the system does not find a match, it populates a drop-down list for each Table instance Column that contains the names of all the Table instance Columns.</p>
</li>
<li>
<p>For each Column of the Table instance, choose the Column from the drop-down list that you want to map to the Table Descriptor Column displayed on the same row.</p>
<p>Alternatively, you can map to a constant (see <a href="#BABJJACJ">Mapping Columns to Constants</a>) or convert to a different data type (see <a href="#BABIABJJ">"Mapping Columns of Different Data Types and Lengths"</a>) you can enter that information in the <span class="bold">Default Value</span> or <span class="bold">Format String</span> field, respectively.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>. The system saves the mapping and returns you to the Program screen.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BEIFDEBI"></a>
<div id="LSHDG317" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Remapping</h4>
<p>You can remap a mapped Table Descriptor to a different Table instance in two ways:</p>
<ul>
<li>
<p>If the Table Descriptor has the same name as the Table instance, use automatic mapping by name; see <a href="#CIHJJIIA">"Automatic Mapping by Name"</a>.</p>
</li>
<li>
<p>If the Table Descriptor has a different name from the Table instance, use manual mapping; see <a href="#BABICBBD">"Mapping Table Descriptors Manually"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BEIFEHFB"></a>
<div id="LSHDG1942" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">The Effects of Modifying the Table Descriptor or Table Instance on a Mapping</h4>
<p>A mapping is specific to a particular version of both the Table Descriptor and the Table instance. When you check out either one:</p>
<ul>
<li>
<p>The system upgrades the mapping to the new version of the Table Descriptor or Table instance if possible. There are two conditions where it is not possible: You modify a Table Descriptor from a source to a target and either:</p>
<ul>
<li>
<p>The Table instance is not in the same Work Area as the executable object that owns the Table Descriptor.</p>
</li>
<li>
<p>The Table instance is already mapped to another target Table Descriptor.</p>
</li>
</ul>
</li>
<li>
<p>The system reevaluates the mapping and resets its status to either Complete or Incomplete.</p>
<p>For a Mapping to be complete, all Columns must be mapped to Columns in the Table instance or to constants, and all other mapping rules must be followed.</p>
</li>
</ul>
<p>When you check out either a mapped Table Descriptor or a mapped Table instance, there is no effect on the other object, only on the mapping.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABBAADI"></a>
<div id="LSHDG318" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Mapping Columns</h3>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#CIHFCHJA">Mapping Columns Automatically</a></p>
</li>
<li>
<p><a href="#BABCAAHB">Mapping Columns Manually</a></p>
</li>
<li>
<p><a href="#BABJJACJ">Mapping Columns to Constants</a></p>
</li>
</ul>
<p>When you map a Table Descriptor to a Table instance using any method, the system tries to map the Columns at the same time, by name. If the system cannot map the Columns, the mapping status of the Table Descriptor is set to Incomplete. You must map the Columns manually before you can install the Program instance.</p>
<p>In most cases you map each Column of the Table Descriptor to a Column in the Table instance to which it is mapped. However, you can also map Columns to constants.</p>
<a id="CIHFCHJA"></a>
<div id="LSHDG319" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Mapping Columns Automatically</h4>
<p>If you have mapped a Table Descriptor to a Table instance, but have not mapped the columns, then the system can map columns automatically. Do the following:</p>
<ol>
<li>
<p>In the Program instance's Properties screen, Table Descriptors subtab, click the icon in the <span class="bold">Mapping</span> column for the Table Descriptor whose Columns you want to map.</p>
</li>
<li>
<p>Click the <span class="bold">Reset to Default Mapping</span> button. For each Table Descriptor, the system checks the Table instance for a column with a matching name or a matching variable reference. If it finds one, it maps the Table Descriptor column with the Table instance column.</p>
</li>
</ol>
<p>Nothing happens if you click this button when the Table Descriptor and Table instance mapping is already complete.</p>
<p>If the system cannot find matching column names or variable reference names between the Table Descriptor and the Table instance, then you cannot automatically map in this way. You need to map columns manually as described in the next section.</p>
</div>
<!-- class="sect3" -->
<a id="BABCAAHB"></a>
<div id="LSHDG320" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Mapping Columns Manually</h4>
<p>To map Table Descriptor Columns to Table instance Columns, do the following:</p>
<ol>
<li>
<p>In the Program instance's Properties screen, Table Descriptors subtab, click the icon in the <span class="bold">Mapping</span> column for the Table Descriptor whose Columns you want to map.</p>
<p>The Mapping screen opens. It has a row for each Column divided into a set of columns labeled From and another set labeled To. The system populates the From and To sections as appropriate for the flow of data: if the Table Descriptor is a source Table Descriptor, it is displayed in the To section because data appears to flow from the Table instance to the Program through the Table Descriptor; if it is a target Table Descriptor, it is displayed in the From portion because data appears to flow through it to the target Table instance. (Table Descriptors never actually contain data.)</p>
</li>
<li>
<p>Click <span class="bold">Update</span>. The system makes several fields enterable.</p>
</li>
<li>
<p><span class="bold">Select a Table instance</span>. If a Table instance is not already specified in the upper portion of the screen, or if you want to map the Table Descriptor to a different Table instance, click the Search icon by the Map to Table Instance field.</p>
<p>The Search and Select screen opens with the current Work Area's Table instances displayed by default.</p>
<p>If the Table Descriptor is a target Table Descriptor, you cannot select a different Work Area. If the Table Descriptor is a source Table Descriptor, you can select a Table instance in any Work Area:</p>
<ul>
<li>
<p>Select the Table instance's Domain from the <span class="bold">Domain</span> drop-down list.</p>
</li>
<li>
<p>Select the Table instance's Application Area from the <span class="bold">Application Area</span> drop-down list. The choices are limited to Application Areas contained in the Domain you selected.</p>
</li>
<li>
<p>If you know the exact name or version label of the Table instance you want, select either Name or Version Label from the <span class="bold">Search By</span> drop-down list and enter the name or version label in the blank field.</p>
</li>
</ul>
<p>Click the Quick Select icon for the Table instance you want to map to. the system returns you to the Mapping screen with the Table instance information displayed.</p>
</li>
<li>
<p><span class="bold">Map Columns</span>. Map each Table Descriptor Column to a Table instance Column or a default value. You can also enter a conversion string if either the Table instance Column or the constant is in a different format from the Table Descriptor Column:</p>
<ul>
<li>
<p>Select a Table instance <span class="bold">Column</span> from the drop-down list to which to map the Table Descriptor Column.</p>
</li>
<li>
<p>Enter a value in the <span class="bold">Default Value</span> field to populate the Column to a constant; see <a href="#BABJJACJ">"Mapping Columns to Constants"</a>.</p>
</li>
<li>
<p>If you are mapping Columns of different data types, enter a format string for the system to use in the conversion, if necessary. See <a href="#BABDHHHD">"Using Format Conversions"</a>.</p>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Apply</span>. The system validates the mappings you specified and returns you to the Program instance's Properties screen.</p>
<p>If you specified an invalid mapping, the system displays an error message.</p>
</li>
</ol>
<a id="BABDHHHD"></a>
<div id="LSHDG321" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Using Format Conversions</h5>
<p>If you map to a Table instance Column or a constant with a different data type or format than the Table Descriptor's Column, you can enter a format conversion string for Oracle LSH to convert the value that is upstream in the data flow to the correct format for the downstream value.</p>
<p>For example, if a source Table instance contains a number value that needs to be converted to a dollar amount for the Program to analyze, enter a format conversion such as: <code dir="ltr">format=$99,999.00</code>. If a source Column has a data value of 10000, Oracle LSH converts that value to $10,000.00.</p>
<p>For format models, see the <span class="italic">Oracle 9i SQL Reference Guide</span>.</p>
</div>
<!-- class="sect4" -->
<a id="BABIABJJ"></a>
<div id="LSHDG322" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Mapping Columns of Different Data Types and Lengths</h5>
<p>If the data types and/or lengths of the Table instance and Table Descriptor Columns do not match, mapping may still be allowed. The rules are different for source and target Table Descriptors. See <a href="#CHDFEGCJ">Figure 3-3</a> for an illustration of the data flow.</p>
<p>The principles are:</p>
<ul>
<li>
<p>Only Number data types can feed into Number data types and only Date data types can feed into Date data types.</p>
</li>
<li>
<p>Shorter lengths can feed into longer lengths, but longer lengths cannot feed into shorter lengths.</p>
</li>
<li>
<p>For Number data types, lesser precision can feed into greater precision, but greater precision cannot feed into lesser precision.</p>
</li>
<li>
<p>On the source side, Table instance Columns of Number and Date data types can feed into Table Descriptor Column Varchar2 data types.</p>
</li>
<li>
<p>On the target side, Table Descriptor Column Number data types can feed into Table instance Column Varchar2 data types, but Date data types cannot.</p>
</li>
</ul>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="BABJJACJ"></a>
<div id="LSHDG323" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Mapping Columns to Constants</h4>
<p>There may be cases where a Table instance or Table Descriptor upstream in the data flow does not contain a Column needed for mapping by a Table Descriptor or Table instance Column downstream in the data flow:</p>
<ul>
<li>
<p>a source Table instance does not contain a Column that is needed for mapping by a source Table Descriptor</p>
</li>
<li>
<p>a target Table Descriptor does not have a Column needed for mapping by the target Table instance</p>
</li>
</ul>
<p>In these cases, you can map the existing Column of the source Table Descriptor or target Table instance to a constant by supplying a default value for the Column. <a href="#CHDFEGCJ">Figure 3-3</a> shows how to supply constants for Columns in relation to the data flow direction.</p>
<p>If you are supplying a constant as a value to a Column whose data type is not Varchar2, you must provide conversion information. For example, to convert the text you enter as the constant to the Date data type, enter the value 04-JAN-2005 in the <span class="bold">Default Value</span> column, and enter DD-MON-YYYY in the <span class="bold">Format String</span> column. The system reads the constant as a date.</p>
<p>For any data type, the value after conversion cannot exceed the length defined for the Column.</p>
<p>NULL is a valid constant value (if allowed by the receiving Column).</p>
<p>When you pass a constant to a Column downstream from it in the data flow (either to a source Table Descriptor Column or a target Table instance Column (see <a href="#CHDFEGCJ">Figure 3-3</a>), the specific requirements differ according to the data type of the receiving Column, as follows:</p>
<p><a id="LSHDG324"></a><span class="subhead3">Varchar2&nbsp;</span>If you pass a constant to a Column with a data type of Varchar2, the length of the constant must be less than or equal to the length of the Column.</p>
<p><a id="LSHDG325"></a><span class="subhead3">Number&nbsp;</span>If you pass a constant to a Column with a data type of Number, the following rules apply:</p>
<ul>
<li>
<p>You must provide a number format (with a default) and the constant must be valid when passed to a to_number with the supplied number format.</p>
</li>
<li>
<p>The length of number produced by to_number (constant, number format) must be &lt;= the length of the Column.</p>
</li>
<li>
<p>The precision of number produced by to_number (constant, number format) must be &lt;= the precision of the Column.</p>
</li>
</ul>
<p><a id="LSHDG326"></a><span class="subhead3">Date&nbsp;</span>You must provide a date format and the constant must be valid when passed to a to_date with the supplied number format.</p>
<p><a id="LSHDG327"></a><span class="subhead3">Null&nbsp;</span>Allowed EXCEPT if mapping from a target Table Descriptor to a Table instance Column that is not nullable.</p>
<div id="LSHDG328" class="figure">
<p class="titleinfigure"><a id="CHDFEGCJ"></a>Figure 3-3 Data Flow from Table Instances to Program Instance to Table Instances</p>
<img width="415" height="628" src="img/map_to_constant.gif" alt="Description of Figure 3-3 follows" /><br />
<a id="sthref24" href="img_text/map_to_constant.htm">Description of ''Figure 3-3 Data Flow from Table Instances to Program Instance to Table Instances''</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BEIDBGDI"></a>
<div id="LSHDG330" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating and Mapping Table Descriptors and Table Instances at the Same Time</h3>
<p>This section contains information on the following topics:</p>
<ul>
<li>
<p><a href="#BEIFJCHB">Creating and Mapping Table Instances during Single Instance Installation</a></p>
</li>
<li>
<p><a href="#BABGDGDF">Creating Table Descriptors from Table Instances and Simultaneously Mapping Them</a></p>
</li>
<li>
<p><a href="#BEIDGAEJ">Creating Table Instances from Table Descriptors and Simultaneously Mapping Them</a></p>
</li>
</ul>
<a id="BEIFJCHB"></a>
<div id="LSHDG1943" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating and Mapping Table Instances during Single Instance Installation</h4>
<p>You can install an object from its Properties screen or Work Area even if its installation status is Non Installable. For objects that have target Table Descriptors, such as Programs and Load Sets, the system attempts to correct issues that are preventing the object from being installed:</p>
<ol>
<li>
<p>The system runs Automatic Mapping by Name to map any unmapped target Table Descriptors to Table instances with the same name in the current Work Area, if any.</p>
</li>
<li>
<p>If any target Table Descriptors remain unmapped, the system automatically creates new Table instances in the current Work Area and maps them.</p>
</li>
</ol>
<p>Both these tasks are performed by a batch job. If the system cannot resolve all issues automatically, the job fails. You can view the job log in your My Home screen.</p>
</div>
<!-- class="sect3" -->
<a id="BABGDGDF"></a>
<div id="LSHDG331" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating Table Descriptors from Table Instances and Simultaneously Mapping Them</h4>
<p>If the Table instance you need to read from or write to already exists in Oracle LSH, you can create a Table Descriptor from the Table instance. The system bases the Table Descriptor on the same Table definition the Table instance is based on, and automatically maps the new Table Descriptor to the Table instance.</p>
<p>You can use this method to create multiple Table Descriptors at the same time from Table instances located in a single Work Area.</p>
<p>This is the only method where the system creates a source Table Descriptor by default. You can change the setting to Is Target if necessary.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can create target Table Descriptors only from Table instances in the same Work Area as the Program.</div>
<p>To create a Table Descriptor from an existing Oracle LSH Table instance, do the following:</p>
<ol>
<li>
<p>In the Program's Properties screen, select <span class="bold">Table Descriptors from Existing Table Instances</span> from the <span class="bold">Actions</span> drop-down list and click <span class="bold">Go</span>.</p>
<p>The Create Table Descriptors from Table Instances screen opens.</p>
</li>
<li>
<p>Select the location of a Table instance for which you want to create a Table Descriptor:</p>
<ul>
<li>
<p>Select the Table instance's Domain from the <span class="bold">Domain</span> drop-down list.</p>
</li>
<li>
<p>Select the Table instance's Application Area from the <span class="bold">Application Area</span> drop-down list. The choices are limited to Application Areas contained in the Domain you selected.</p>
</li>
<li>
<p>Select the Table instance's Work Area from the <span class="bold">Work Area</span> drop-down list. The choices are limited to Work Areas contained in the Application Area you selected.</p>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Go</span>. The system displays all the Table instances in the Work Area you selected.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A Table instance can be mapped to only one Table Descriptor in a Program instance. In addition, only one Program instance can write to a particular Table instance. You get an error if you select a Table instance whose selection would violate either of those rules.</div>
</li>
<li>
<p>Select one or more Table instances by clicking the <span class="bold">Select</span> checkbox.</p>
</li>
<li>
<p>Click <span class="bold">Create Table Descriptor</span>. The system returns you to the Create Table Descriptors from Table Instances screen. To return to the Program's Properties screen, click <span class="bold">Return</span>. Check that the mappings are complete.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BEIDGAEJ"></a>
<div id="LSHDG333" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating Table Instances from Table Descriptors and Simultaneously Mapping Them</h4>
<p>You can create a Table instance in the current Work Area corresponding to each Table Descriptor and map each pair. The system bases the Table instance on the same Table definition the Table Descriptor is based on, and automatically maps the Table Descriptor to the new Table instance.</p>
<p>You can use this method to create multiple Table instances at the same time from Table Descriptors located in a single Load Set, Program, Data Mart, Business Area, Report Set or Workflow. In Report Sets and Workflows this option is available only at the Report Set and Workflow level, not from individual Program instances in the Report Set or Workflow.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Table instances are created with the default settings for all attributes, including Process Type (which is Staging with Audit). You can go to the Table instances and update them as necessary.</div>
<p>To create a Table instance from one or more existing Table Descriptors in a single Load Set, Program, Data Mart, or Business Area, do the following:</p>
<ol>
<li>
<p>In the object's Properties screen, select <span class="bold">Table Instances from Existing Table Descriptors</span> from the <span class="bold">Actions</span> drop-down list and click <span class="bold">Go</span>.</p>
<p>The Create Table Instances from Table Descriptors screen opens, displaying all the unmapped Table Descriptors.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you have created the object inside a Workflow, then use the Actions drop-down list job <span class="bold">Table Instances from Existing Tables Descriptors</span> from the Workflow's Properties screen. This job is not available in the object's Properties screen.</div>
</li>
<li>
<p>Select the Table Descriptors for which you want to create a Table instance by clicking the box in the <span class="bold">Select</span> column.</p>
</li>
<li>
<p>Click <span class="bold">Create Table Instance</span>. The system displays a message asking if you want to create the Table instance.</p>
</li>
<li>
<p>Click <span class="bold">Yes</span>.</p>
<p>The system returns you to the Create Table Instances from Table Descriptors screen. To return to the Program's Properties screen, click <span class="bold">Return</span>. Check that the mappings are complete.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BEICAGHC"></a>
<div id="LSHDG335" class="sect2">
<h3 class="sect2">Unmapping Table Descriptors</h3>
<p>If a Table Descriptor is mapped to one Table instance and you need to map it to a different Table instance, you must unmap it first.</p>
<p>To unmap a Table Descriptor, do the following:</p>
<ol>
<li>
<p>In an executable object instance, click the Table Descriptor you want to unmap.</p>
</li>
<li>
<p>Click the icon in the Mapping column. The Mapping page opens.</p>
</li>
<li>
<p>Click <span class="bold">Update</span>. The screen becomes editable and the <span class="bold">Unmap</span> button appears.</p>
</li>
<li>
<p>Click <span class="bold">Unmap</span>. The system unmaps the Table Descriptor.</p>
</li>
</ol>
<p>You can then click the <span class="bold">Reset to Default Mapping</span> button to automatically map columns according to column names, or remap the Table Descriptor using any of the methods described in this section; see <a href="#CIHDCCDA">"Mapping Table Descriptors to Table Instances"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BEIBCEHB"></a>
<div id="LSHDG336" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Modifying Table Descriptors</h3>
<p>To modify a Table Descriptor, you must also modify its source Table definition. You must check out both the Program, Load Set, Data Mart, or Business Area that contains the Table Descriptor and also check out the source Table definition. You can check out the Table definition from the Table Descriptor.</p>
<p>Any Table instances and Table Descriptors that are based on the original version of the source Table definition continue to reference the same version unless you choose to upgrade them to the new version; see <a href="#BEIHAHEE">"Upgrading Object Instances to a New Definition Version"</a>.</p>
<p>You can also remove a Table Descriptor and add a different one.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEIGAICB"></a>
<div id="LSHDG337" class="sect1">
<h2 class="sect1">Creating, Modifying, and Submitting Execution Setups</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BEIBFDEG">About Execution Setups and Templates</a></p>
</li>
<li>
<p><a href="#CHDBGHCF">Creating an Execution Setup</a></p>
</li>
<li>
<p><a href="#BABEIHJD">Modifying an Execution Setup and Setting Parameters</a></p>
</li>
<li>
<p><a href="#CIHGGGFH">Report Set and Workflow Execution Setups</a></p>
</li>
<li>
<p><a href="#BEIGIEAG">Removing an Execution Setup</a></p>
</li>
<li>
<p><a href="#BEIIFAEE">Activating a Version of an Execution Setup</a></p>
</li>
<li>
<p><a href="#BEIDBIDE">Submitting an Execution Setup</a></p>
</li>
</ul>
<p>See <a href="exec.htm#BCGGIGCJ">Chapter 13, "Execution and Data Handling"</a> for information on using Execution Setups in backchain execution and message-triggered submission.</p>
<a id="BEIBFDEG"></a>
<div id="LSHDG338" class="sect2">
<h3 class="sect2">About Execution Setups and Templates</h3>
<p>In order to run an Oracle LSH executable object&mdash;Program, Load Set, Report Set, Workflow, or Data Mart&mdash;you must create at least one Execution Setup for it.</p>
<p>Execution Setups become the submission form for the executable object. They can be displayed in the Reports tab so that users with the appropriate privileges can submit the associated Program, Load Set, Report Set, Workflow, or Data Mart for execution.</p>
<p>You can also create Execution Setups to submit a job at a single future point in time, on a regularly scheduled basis, or when triggered by the receipt of an XML message from an external system. These Execution Setups are not displayed in the Reports page, but run automatically.</p>
<p>Execution Setups include a predefined set of system Parameters; see <a href="#BEIJBIED">"System Parameters"</a>. They also include all the user-defined input and input/output Parameters defined as visible in the executable object. These Parameters are copies of the Parameters in the object and belong only to the Execution Setup. You can modify them without affecting the executable object itself. You determine whether these Parameters are visible to and settable by the person submitting the job.</p>
<p>More than one person can work on an Execution Setup at the same time, if they work on different Parameter Sets. For example, one person can work on a Program's Parameter settings and another person can work on system Parameters in the same Execution Setup at the same time.</p>
<p>You can define multiple Execution Setups for the same executable object instance. For example, you could define one Execution Setup for immediate execution, to be used to test the Program, and another Execution Setup to run at regular intervals, for use on production data. You could also define multiple Execution Setups with their Parameters bound to different values.</p>
<p><a id="LSHDG339"></a><span class="subhead3">Copying Execution Setups&nbsp;</span>You can create a copy of one or more Execution Setups for use with the same instance and then modify them as necessary.</p>
<p><a id="LSHDG340"></a><span class="subhead3">Execution Templates&nbsp;</span>If you create an Execution Setup that you think would be useful to other instances of the same executable definition, you can make it available for use as an Execution Template.</p>
<p>When you create an Execution Setup, you have the option of creating it from an Execution Template. If you choose this option, the system displays a list of all the Execution Setups that have been designated as Execution Templates in all instances of the same object definition version, if any. You can select one and modify it as necessary.</p>
<p><a id="LSHDG1944"></a><span class="subhead3">Forward Chaining&nbsp;</span>Forward chaining is a special type of processing that executes the programs automatically that directly or indirectly uses the data in a table, whenever that table is updated. A single job&mdash;for example, the execution of a Load Set to load data into Oracle LSH&mdash;triggers jobs that read from the tables the original job writes to, and then triggers the jobs that read from tables the second set of programs writes to, and so on. To be included in a forward chain, one Execution Setup for the executable must be marked as Forward Chain Enabled and, if it should trigger additional downstream forward chaining, as Cascade Enabled. In addition, the executable's Work Area, Application Area, and Domain(s) must have forward chaining enabled. See <a href="exec.htm#BCGDAAII">"Forward Chaining"</a> for more information.</p>
<p><a id="LSHDG341"></a><span class="subhead3">Backchaining&nbsp;</span>Backchaining is a special type of processing in Oracle LSH where the system checks the data sources of a given executable to see if more current data exists in Oracle LSH or even in a source data system, and if so, executes all the Load Sets and Programs necessary to bring the most current data to the executable being submitted. You can define a Submission Type of Backchain for an Execution Setup so that a Program that operates on data generated by the current Program (for which you are defining the Execution Setup) can trigger the execution of the current Program as part of a backchain process. See <a href="exec.htm#CHDHBIAB">"Backchaining"</a> for further information.</p>
<p><a id="LSHDG342"></a><span class="subhead3">Execution Setup Classifications&nbsp;</span>An Execution Setup has its own classifications. Its classifications determine where Oracle LSH displays the submission form in the Reports tab.</p>
<p>In addition, if a classification level value of any of the executable's Planned Outputs is set to Inherited, the system classifies the corresponding actual output using the classification value(s) of the Execution Setup for that level. The submission form and the actual output are then located in the same folder on the Reports tab.</p>
<p>An Execution Setup's classification values, if inherited, are inherited from its object (Program, Load Set, Data Mart, Report Set, or Workflow) instance. The object instance's inherited classification values are inherited from the Work Area.</p>
<p>See <a href="#CHDJADAD">"Classifying Objects and Outputs"</a> for instructions on classifying defined objects, including Execution Setups.</p>
<p><a id="LSHDG343"></a><span class="subhead3">Execution Setup and Output Security&nbsp;</span>Execution Setups have their own user group assignments, inherited from their executable instance, which inherits its assignments from the Work Area. You can change the user group assignments if necessary; see <a href="#CHDFEFII">"Applying Security to Objects and Outputs"</a>.</p>
<p>Execution Setup user group assignments determine two things:</p>
<ul>
<li>
<p>The user groups' members can submit the Execution Setup to run the Program or other executable, if they have the necessary privileges within the user group.</p>
</li>
<li>
<p>The user groups' members can view the output of the Program or other executable, if they have the necessary privileges within the user group.</p>
<p>You can change an output's user group assignments after the output is generated. To do so, navigate to the output in the Reports tab or from the job ID on your Home Page and select Apply Security from the Actions drop-down.</p>
</li>
</ul>
<p>If an output contains blinded or unblinded data, users needs special privileges to view it; see <a href="exec.htm#CJAIIFIJ">"Managing Blinded Data"</a>.)</p>
<p><a id="LSHDG344"></a><span class="subhead3">Execution Setup Versions&nbsp;</span>When you explicitly check out an Execution Setup, the system creates a new version of the Execution Setup. In addition, when you modify an Execution Setup, the system implicitly checks out the Execution Setup and gives it a new version number.</p>
<p>When an active Execution Setup is submitted, the system implicitly checks it in, if it is not already checked in; see <a href="#BEIIFAEE">"Activating a Version of an Execution Setup"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Only the user who first created or modified the Execution Setup, and thereby checked it out, can undo the checkout. You can see that person's username in the <span class="bold">Checked Out By</span> field.</div>
<p><a id="LSHDG345"></a><span class="subhead3">Execution Setup Upgrade&nbsp;</span>An Execution Setup must be synchronized with the definition of its executable object's Parameters. You can synchronize it at any time by selecting <span class="bold">Upgrade Execution Setup</span> from the <span class="bold">Actions</span> drop-down list in the Execution Setup screen. When you submit the Execution Setup and when you install its associated executable object, the system checks if an upgrade is required and performs it. If the Execution Setup is checked in, the system implicitly checks it out, upgrades it, and checks it in.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the executable instance is modified to point to a different object definition, the system cannot automatically upgrade the Execution Setup. You must create a new Execution Setup.</div>
</div>
<!-- class="sect2" -->
<a id="CHDBGHCF"></a>
<div id="LSHDG346" class="sect2">
<h3 class="sect2">Creating an Execution Setup</h3>
<p>The system creates an Execution Setup automatically if you click <span class="bold">Submit</span> directly in the Properties screen of an executable object instance and no Execution Setup currently exists. It is called Standard Execution Setup and is automatically set to be the default Execution Setup. In addition, you can create any number of Execution Setups manually as follows:</p>
<ol>
<li>
<p>In the executable object instance for which you want to create an Execution Setup, select <span class="bold">Execution Setup</span> from the <span class="bold">Actions</span> drop-down list.</p>
<p>The system opens the Execution Setup screen and displays any Execution Setups that have already been defined for this executable object.</p>
</li>
<li>
<p>Click <span class="bold">Create Execution Setup</span>. The Create Execution Setup screen opens.</p>
</li>
<li>
<p>Select one of the following options:</p>
<ul>
<li>
<p><a href="#BEIFEBJB">Creating a New Execution Setup</a></p>
</li>
<li>
<p><a href="#BEIJAJEE">Creating an Execution Setup from an Execution Template</a></p>
</li>
</ul>
</li>
</ol>
<a id="BEIFEBJB"></a>
<div id="LSHDG347" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating a New Execution Setup</h4>
<p>When you choose to create a new Execution Setup without an Execution Template, additional fields appear.</p>
<ol>
<li>
<p>Enter values for the following fields:</p>
<ul>
<li>
<p><span class="bold">Name.</span> Give the Execution Setup a meaningful name, including an indication of the Program or other executable it is for.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Execution Setup's name is very important because users submitting the executable from the Reports tab see only the Execution Setup name and description and executable object type (and its version number, validation status, and creation time). The Reports tab does not display information about the executable object to be run except for the object's type. Therefore the name/description combination must be informative enough to allow users to understand what they will get when they run the Execution Setup.
<p>If you plan to make this Execution Setup available as an Execution Template, remember that definers creating new Execution Setups based on this one will see only its name, its owning executable instance, and its validation and Runnable statuses.</p>
<p>If there are or will be other Execution Setups for the same object, indicate what is unique about this one.</p>
</div>
</li>
<li>
<p><span class="bold">Description</span>. Describe the Execution Setup, especially if there are multiple Execution Setups for the same executable object.</p>
</li>
<li>
<p><span class="bold">Allow Use as Execution Template</span>. Set to <span class="bold">Yes</span> if you want to make this Execution Setup available as a template to other instances of the same executable definition. Set to <span class="bold">No</span> if you do not want the Execution Setup to be available as a template. You can change this setting only when the Execution Setup is checked in.</p>
</li>
</ul>
</li>
<li>
<p>Select a subtype and change classifications if necessary. The output resulting from the submission of this Execution Setup may inherit its classifications from the Execution Setup; see <a href="#CHDCBGEI">"Classifying Outputs"</a>.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>. The system generates a default Execution Setup using the current Parameter settings and returns you to the Execution Setup screen with the Execution Setup name displayed in the Execution Setup List.</p>
<p>The current settings for Forward Chain Enabled and Cascade Enabled are displayed. You can change these settings by selecting the Execution Setup and clicking the appropriate button:</p>
<ul>
<li>
<p><span class="bold">Forward Chain Enabled</span>. If <span class="bold">Yes</span>, the Program or other executable can be triggered during a forward chain process or begin the forward chain process. Only one Execution Setup for the object can be set to Yes.</p>
</li>
<li>
<p><span class="bold">Cascade Enabled</span>. If <span class="bold">Yes</span>, the Program or other executable can trigger the execution of executables that read from the tables it writes to as part of the forward chain process. Only one Execution Setup for the object can be set to Yes, and it must also have Forward Chaining Enabled set to Yes.</p>
<div class="infobox-note">
<p class="notep1">Notes:</p>
Object types that do not write to tables, such as Data Marts, cannot have Cascade enabled.
<p>Even if these attributes are set to Yes, if forward chaining is not enabled for the Work Area, this object cannot be executed as part of a forward chaining process; see <a href="exec.htm#BCGDAAII">"Forward Chaining"</a> for more information.</p>
</div>
</li>
</ul>
</li>
<li>
<p>Click the Execution Setup's name in the <span class="bold">Execution Setup</span> column.</p>
<p>The system opens the Execution Setup Properties screen.</p>
</li>
<li>
<p>Modify as necessary. See <a href="#BABEIHJD">"Modifying an Execution Setup and Setting Parameters"</a>.</p>
</li>
<li>
<p>Set the Execution Setup version to Active; see <a href="#BEIIFAEE">"Activating a Version of an Execution Setup"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BEIJAJEE"></a>
<div id="LSHDG348" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating an Execution Setup from an Execution Template</h4>
<p>When you choose to use an Execution Template, a search field appears.</p>
<ol>
<li>
<p>Click the Search icon. The system displays all the Execution Setups available as Execution Templates that have been created for instances of the same execution object definition. For each Execution Template the system displays its Program instance name, validation status, and runnable status.</p>
</li>
<li>
<p>Click the icon in the Quick Select column for the Execution Template you want to use. The system returns you to the Create Execution Setup screen.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>. The system creates a new Execution Setup that is a copy of the Execution Template you selected and returns you to the Execution Setup screen with the Execution Setup name displayed in the lower portion of the screen.</p>
</li>
<li>
<p>Click the Execution Setup's name in the <span class="bold">Execution Setup</span> column.</p>
<p>The system opens the Execution Setup Properties screen.</p>
</li>
<li>
<p>Modify as necessary. See <a href="#BABEIHJD">"Modifying an Execution Setup and Setting Parameters"</a>.</p>
</li>
<li>
<p>Set the Execution Setup version to Active; see <a href="#BEIIFAEE">"Activating a Version of an Execution Setup"</a>.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABEIHJD"></a>
<div id="LSHDG349" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Modifying an Execution Setup and Setting Parameters</h3>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#BEIJIEGF">Name and Description</a></p>
</li>
<li>
<p><a href="#BEIDJHDF">Allow Use as Execution Template</a></p>
</li>
<li>
<p><a href="#BEIJBIED">System Parameters</a></p>
</li>
<li>
<p><a href="#BEIJCDHJ">Runtime Parameters</a></p>
</li>
</ul>
<p>See also:</p>
<ul>
<li>
<p><a href="#BEIGIEAG">Removing an Execution Setup</a></p>
</li>
<li>
<p><a href="#BEIIFAEE">Activating a Version of an Execution Setup</a></p>
</li>
<li>
<p><a href="#BEIDBIDE">Submitting an Execution Setup</a></p>
</li>
</ul>
<p>After you have generated a default Execution Setup you can modify the system Parameters and the default values of the runtime Parameters. The Parameters in the Execution Setup are copies of those in the executable object definition. Modifying them has no effect on the object definition.</p>
<p>To appear in the Reports tab where it is available for general use, an Execution Setup must be checked in and set to Active (see <a href="#BEIIFAEE">"Activating a Version of an Execution Setup"</a>). However, from the Execution Setup definition it is possible to submit the Execution Setup even if it is checked out.</p>
<a id="BEIJIEGF"></a>
<div id="LSHDG350" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Name and Description</h4>
<p>Click <span class="bold">Update</span> to modify the Execution Setup's Name and Description.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Execution Setup name is very important because it is what users see in the Reports tab. The name must be descriptive enough to allow users to understand what they will get when they run the Execution Setup.</div>
</div>
<!-- class="sect3" -->
<a id="BEIDJHDF"></a>
<div id="LSHDG351" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Allow Use as Execution Template</h4>
<p>Set to <span class="bold">Yes</span> to make this Execution Setup available for use as a template to other instances of this Program.</p>
<p>Set to <span class="bold">No</span> to make the Execution Setup unavailable as a template. This has no effect on any existing Execution Setups based on this one.</p>
</div>
<!-- class="sect3" -->
<a id="BEIJBIED"></a>
<div id="LSHDG1945" class="sect3">
<h4 class="sect3">System Parameters</h4>
<p>The same set of system Parameters are included in all Execution Setups. You can modify the Execution Setup to change the choices available to the person who uses the submission screen to submit a job. Each system Parameter is described below.</p>
<p>The standard system Parameters are described below:</p>
<ul>
<li>
<p><a href="#BEIBAEGH">Submission Type</a></p>
</li>
<li>
<p><a href="#BEIFAJDA">Notify on Completion</a></p>
</li>
<li>
<p><a href="#BEIBHCIC">Data Currency</a></p>
</li>
<li>
<p><a href="#BEIBFHJB">Execution Priority</a></p>
</li>
<li>
<p><a href="#BEIBBJEG">Submission Mode</a></p>
</li>
<li>
<p><a href="#BEICFGFH">Blind Break</a></p>
</li>
<li>
<p><a href="#BEIDFEAH">Force Execution</a></p>
</li>
<li>
<p><a href="#BEIFFGHA">Timeout Value</a></p>
</li>
<li>
<p><a href="#BEIEEEAI">Apply Snapshot Label</a></p>
</li>
</ul>
<p>To modify system Parameters, do the following:</p>
<ol>
<li>
<p>Click the <span class="bold">System Parameters</span> subtab in the Execution Setup screen. The System Parameters screen opens.</p>
</li>
<li>
<p>Click the <span class="bold">Update</span> button in the System Parameters subtab.</p>
</li>
<li>
<p>You can modify the settings for any system Parameter as follows:</p>
<ul>
<li>
<p>Select one of the following:</p>
<ul>
<li>
<p><span class="bold">Visible</span>. The Parameter is visible and its value is modifiable in the submission screen. This is the default value.</p>
</li>
<li>
<p><span class="bold">Read Only</span>. The Parameter is visible but not modifiable in the submission screen.</p>
</li>
<li>
<p><span class="bold">Hidden</span>. The Parameter is not visible or modifiable in the submission screen.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Allow</span>. Each system Parameter has a defined list of values. Select the checkbox for each value you want to make available to the user.</p>
</li>
<li>
<p><span class="bold">Default</span> (Optional). Set one of the allowed values as the default by clicking the radio button in the <span class="bold">Default</span> column next to the value. This value appears as the default value in the Submission screen.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are defining an Execution Setup for backchaining, for scheduled submission, or for triggered submission, you <span class="bold">must</span> define a default value for each Parameter, including the system Parameters.</div>
</li>
</ul>
</li>
</ol>
<p>The system Parameters are:</p>
<p><a id="BEIBAEGH"></a><a id="LSHDG1946"></a><span class="subhead3">Submission Type&nbsp;</span>This system Parameter determines which submission methods this Execution Setup accepts:</p>
<ul>
<li>
<p><span class="bold">Deferred</span>. A deferred submission runs once at a future scheduled time. Either you, working in the Execution Setup definition, or a user working in the Reports tab, can schedule the job to run one time in the future.</p>
</li>
<li>
<p><span class="bold">Immediate</span>. An immediate submission runs as soon as possible. Either you, working in the Execution Setup definition, or a user working in the Reports tab, can submit the job for immediate execution.</p>
</li>
<li>
<p><span class="bold">Scheduled</span>. A scheduled submission runs repeatedly on a regular schedule. Either you, working in the Execution Setup definition, or a user working in the Reports tab, can schedule the job to run on a regular basis in the future.</p>
</li>
<li>
<p><span class="bold">Backchain</span>. Backchain Execution Setups are called by another job&mdash;one that operates on data that has been loaded or generated directly or indirectly by this Program or Load Set&mdash;that has been submitted with the Data Currency Parameter set to Most Current Data Available. Users cannot submit a job for a backchain execution. They can, however, submit an immediate, deferred, or scheduled job that starts the backchain process. See <a href="exec.htm#CHDHBIAB">"Backchaining"</a> for further information.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you define a backchain Execution Setup, you must click <span class="bold">Submit</span> when you are finished. This creates a job of submission type Backchain that waits until triggered by a backchain process. The Execution Setup will not run during an actual backchain process unless you have already submitted it.</div>
</li>
<li>
<p><span class="bold">Triggered</span>. The Execution Setup accepts an XML message sent from an external system as the trigger for submission. For example, when Oracle Clinical batch validation has completed successfully, Oracle Clinical could send a message to trigger loading fresh data into Oracle LSH. Users cannot submit a job for a triggered execution. See <a href="exec.htm#BCGBFEHA">"Using Message-Triggered Submission from External Systems"</a> for further information.</p>
<div class="infobox-note">
<p class="notep1">Tip:</p>
When you define an Execution Setup to accept the Triggered submission type, allow Immediate and Deferred submission as well. The XML message must specify whether the job should be executed immediately upon receipt of the message or at a scheduled time in the future.</div>
</li>
</ul>
<p><a id="BEIFAJDA"></a><a id="LSHDG1947"></a><span class="subhead3">Notify on Completion&nbsp;</span>This setting determines when the person who submits a job using this Execution Setup receives a notification upon completion of the job:</p>
<ul>
<li>
<p><span class="bold">Job Failure</span>. The submitter receives a Notification only if the job fails.</p>
</li>
<li>
<p><span class="bold">Never</span>. The submitter does not receive any Notification about the status of the job.</p>
</li>
<li>
<p><span class="bold">Job Success</span>. The submitter receives a Notification only if the job succeeds.</p>
</li>
<li>
<p><span class="bold">Job Warning</span>. The submitter receives a Notification only if the job ends with a status of Warning.</p>
</li>
</ul>
<p><a id="BEIBHCIC"></a><a id="LSHDG1948"></a><span class="subhead3">Data Currency&nbsp;</span>This system Parameter has the following allowed values:</p>
<ul>
<li>
<p><span class="bold">Current Immediate Source</span>. This is the standard setting. The system processes the most current data contained in the source Table instances (or, in the case of a Load Set, the source data system).</p>
</li>
<li>
<p><span class="bold">Most Current Available (Triggers Backchain)</span>. This setting invokes a backchaining job that reexecutes all Program and Load Set instances that directly or indirectly feed data into the source Table instances of the current executable, if they meet the following criteria:</p>
<ul>
<li>
<p>They have a submitted Execution Setup with a Submission Type of Backchain.</p>
</li>
<li>
<p>Each executable instance between them and the current executable also has an Execution Setup with a Submission Type of Backchain.</p>
</li>
<li>
<p>Their source data is more current than their target data.</p>
</li>
</ul>
<p>See <a href="exec.htm#CHDHBIAB">"Backchaining"</a> for further information.</p>
</li>
<li>
<p><span class="bold">Specify Snapshot</span>. This setting enables the user to specify a particular labeled or timestamped snapshot of source data at a previous point in time to run the Program against. If you select <span class="bold">Specify Snapshot</span>, you may also want to set the following:</p>
<ul>
<li>
<p><span class="bold">Default Snapshot Label</span>. From the drop-down list, select a snapshot label. This label will appear as the default value in the submission form. The drop-down list displays all snapshot labels shared by all source Table instances.</p>
</li>
<li>
<p><span class="bold">Lock Default Snapshot Label</span>. If set to <span class="bold">Yes</span>, the person submitting the Execution Setup cannot change data currency; the Data Currency subtab is Read Only. If set to <span class="bold">No</span>, the submitter can change data currency in the Data Currency subtab.</p>
</li>
</ul>
</li>
</ul>
<p><a id="BEIBFHJB"></a><a id="LSHDG1949"></a><span class="subhead3">Execution Priority&nbsp;</span>Set this value to determine the priority the system gives to the execution of this job, compared to other jobs of the same technology type. The choices are <span class="bold">High</span>, <span class="bold">Normal</span>, and <span class="bold">Low</span>.</p>
<p><a id="BEIBBJEG"></a><a id="LSHDG1950"></a><span class="subhead3">Submission Mode&nbsp;</span>When the target Table instances require Reload or Transactional High Throughput processing, you must specify Full or Incremental Processing. The default value is Full.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The system does not display the Incremental options for jobs that do not have Reload or Transactional High Throughput Table instances as targets.</div>
<ul>
<li>
<p><span class="bold">Incremental mode for Reload processing</span>. The system processes all records, compares the primary or unique key of each record to the current records in the table, and updates or inserts records as appropriate. Incremental mode never deletes records and therefore takes less time to complete.</p>
</li>
<li>
<p><span class="bold">Full mode for Reload processing</span>. The system does the same processing as in incremental mode and then performs the additional step of soft-deleting all records that were not reloaded. Full processing takes more time to complete but accurately reflects the state of the data in the source.</p>
</li>
<li>
<p><span class="bold">Incremental mode for Transactional High Throughput processing</span>. The system appends data to the Table after the last record. The system hard-deletes data if the Oracle LSH Program explicitly issues a Delete statement.</p>
</li>
<li>
<p><span class="bold">Full mode for Transactional High Throughput processing</span>. The system truncates the existing Table and loads fresh data into it. In this mode, you will lose all the Blinded data in the Table, even if you run the job with the Dummy setting for Blind Break.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The default data loading mode is Full. If you do not want to lose all your existing data, change the data loading mode to Incremental.</div>
</li>
</ul>
<p>You may decide to use incremental mode on jobs that are run frequently, but use full mode at regular intervals on the same jobs when you need the most accurate data.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The submission screen contains additional system Parameters that allow the user to apply a snapshot label to target Table instances or to target and source Table instances at runtime. The user must also supply the text of the label at runtime. See "Setting Submission Details and Data Currency" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub User's Guide</span></span> for further information.</div>
<p><a id="BEICFGFH"></a><a id="LSHDG1951"></a><span class="subhead3">Blind Break&nbsp;</span>This Parameter is relevant only when one or more source Table instances either currently or formerly contained blinded data. Special privileges are required to run a job on real, sensitive, blinded data and to see the resulting output. The values available to the Definer in the Execution Setup depend on the current Blinding Status of the source Table instances:</p>
<ul>
<li>
<p>If none of the source Table instances has a Blinding Status, the only value available is <span class="bold">Not Applicable</span>. You may want to hide the Parameter (set it to <span class="bold">Hidden</span>) to avoid confusion.</p>
</li>
<li>
<p>If one or more of the source Table instances has a Blinding Status of <span class="bold">Blinded</span>, the values available include <span class="bold">Real (Blind Break)</span> and <span class="bold">Dummy</span>. You can make the Parameter Visible, allow both values, and make <span class="bold">Dummy</span> the default. Only users with Blind Break privileges on all blinded source Table instances will be able to select <span class="bold">Real (Blind Break)</span>.</p>
<p>If you are using DMW and all source tables with a Blinding Status of <span class="bold">Blinded</span> are blinded at the column, row, or cell level (not the table level), the <span class="bold">Dummy Blind Break</span> option allows processing the masking values in LSH. These are stored in the Dummy partition of the target table(s).</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
Oracle recommends processing DMW data in DMW, not LSH. In particular, do not run DMW transformations and validation checks in LSH.</div>
</li>
<li>
<p>If one or more of the source Table instances has a Blinding Status of <span class="bold">Unblinded</span>, and none of the source Table instances has a Blinding Status of <span class="bold">Blinded</span>, the values available include <span class="bold">Real (Unblinded)</span> and <span class="bold">Dummy</span>. You can make the Parameter Visible, allow both values, and make <span class="bold">Dummy</span> the default. Only users with Unblind or Blind Break privileges on all unblinded source Table instances will be able to select <span class="bold">Real (Unblinded)</span>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you set the default value to <span class="bold">Not Applicable</span> or <span class="bold">Dummy</span>, the System Parameters subtab displays the default value as <span class="bold">No</span>. If you set the default to <span class="bold">Real (Blind Break)</span> or <span class="bold">Real (Unblinded)</span> the System Parameters subtab displays it as <span class="bold">Yes</span>.</div>
</li>
</ul>
<p>For further information, see <a href="exec.htm#CJAIIFIJ">"Managing Blinded Data"</a>.</p>
<p><a id="BEIDFEAH"></a><a id="LSHDG1952"></a><span class="subhead3">Force Execution&nbsp;</span>If set to <span class="bold">No</span>, before running a job based on this Execution Setup, the system compares the following for the current job and for the previous time the same instance was executed and does not reexecute the job if all of the following are true:</p>
<ul>
<li>
<p>The Program (or other executable) definition version is the same.</p>
</li>
<li>
<p>The Parameter values are the same.</p>
</li>
<li>
<p>The Source Job ID for the source Table instances is the same.</p>
</li>
</ul>
<p>If all of the above are the same, then the same results should occur from running the job again. The system does not run the job and instead gives the user a message that it is a duplicate job. If any one of the above is different, the current job is not considered a duplicate of a past job and the system executes it.</p>
<p>If set to <span class="bold">Yes</span>, the system runs the job even if the data has not been refreshed, the Parameter settings are the same, and the Program version is the same.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In the case of a Report Set Execution Setup, the Report Set itself always executes, whether <span class="bold">Force Execution</span> is set to <span class="bold">Yes</span> or not. However, if <span class="bold">Force Execution</span> is set to <span class="bold">No</span>, the Programs in the Report Set do not run if the conditions outlined above are true. In addition, the <span class="bold">Force Execution</span> setting affects only Programs assigned to Report Set Entries that are selected for inclusion in the job.</div>
<p><a id="BEIFFGHA"></a><a id="LSHDG1953"></a><span class="subhead3">Timeout Value&nbsp;</span>You can set a default timeout value&mdash;the length of time the system should continue to try to run the job after it has been submitted&mdash;by entering a number in the Default Value field and selecting a default unit of time (Minutes, Hours, Days, Weeks, Months). For example, if a report is scheduled to run once a day, a timeout period of 24 hours would prevent generating two reports for the same day. Alternatively, you can specify the allowed and default units of time without specifying a default value, and let the user set the value.</p>
<p><a id="BEIEEEAI"></a><a id="LSHDG1954"></a><span class="subhead3">Apply Snapshot Label&nbsp;</span>The available values are:</p>
<ul>
<li>
<p><span class="bold">None</span>. Users cannot apply a snapshot label to any Table instances at runtime.</p>
</li>
<li>
<p><span class="bold">Both</span>. Users can apply a snapshot label to both source and target Table instances at runtime.</p>
</li>
<li>
<p><span class="bold">Target</span>. Users can apply a snapshot label only to target Table instances at runtime.</p>
</li>
</ul>
<p>Select one of these values to be the default. You can also specify a default label.</p>
</div>
<!-- class="sect3" -->
<a id="BEIJCDHJ"></a>
<div id="LSHDG360" class="sect3">
<h4 class="sect3">Runtime Parameters</h4>
<p>The system generates the runtime Parameters in an Execution Setup from the input and input/output Parameters, their default values and other settings, defined in the executable object instance.</p>
<p>In the Runtime Parameters subtab the system displays each Parameter's default value (if any) and its Required flag setting. You can change the default setting that will appear in the submission screen by entering a value in the Parameter Value column.</p>
<p>If you want to view or change other settings, including Visible, Read Only, Required, and the validation method, click the Parameter's hyperlink. See <a href="vars.htm#BCFIICIA">Chapter 6, "Defining Variables and Parameters"</a> for further information.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you add, remove, or modify Parameters in the executable object, when you install the object the system automatically upgrades its Execution Setups to reflect the change.</div>
<p><a id="LSHDG361"></a><span class="subhead3">Predefined Runtime Parameters&nbsp;</span>Some object types have predefined runtime Parameters. In general, you should not change these Parameters in any way.</p>
<p>In particular, do not set values for the following Parameters in the Execution Setup:</p>
<ul>
<li>
<p>In Oracle Load Sets, do not enter a remote location. This is a security risk. The user submitting the Load Set for execution must have his or her own remote location/connection, which requires a username and password on the external Oracle system, or proper security access to a shared connection.</p>
</li>
<li>
<p>In SAS and Text Load Sets, do not specify the file to be uploaded. The person submitting the Load Set for execution must enter a file name in the Server OS Filename parameter or the Data File Name parameter depending on whether Load From Server OS is Yes or No. The system uploads the file at the time that you specify it. If you specify it during Load Set or Execution Setup definition, the data in the file may be out of date by the time the user runs the Load Set.</p>
</li>
</ul>
<p>Details about each predefined Parameter are included in the chapter about each object type: <a href="load.htm#BJEBBCFJ">"Setting Load Set Parameters"</a> and <a href="dm.htm#BABFHJHE">"Setting Data Mart Parameter Values"</a>. Also see <a href="progs.htm#CHDFHAHE">"Setting Oracle BI Publisher Program Parameters"</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHGGGFH"></a>
<div id="LSHDG363" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Report Set and Workflow Execution Setups</h3>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHJIBJJ">About Report Set and Workflow Execution Setups</a></p>
</li>
<li>
<p><a href="#BABHCJFA">Modifying a Report Set or Workflow Execution Setup</a></p>
</li>
</ul>
<p>For information on submitting a Report Set or Workflow for execution, see "Running a Job from Reports, My Home, or Applications" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub User's Guide</span></span>.</p>
<a id="CIHJIBJJ"></a>
<div id="LSHDG364" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Report Set and Workflow Execution Setups</h4>
<p>Report Sets and Workflows have complex structures and contain other executable objects, so their Execution Setups are more complex than other objects'.</p>
<p><a id="LSHDG365"></a><span class="subhead3">Concurrent Editing&nbsp;</span>Many people can work on a Report Set or Workflow Execution Setup at the same time. However, only one person can work on a particular object or Parameter Set at a time.</p>
<p><a id="CIHEHGJA"></a><a id="LSHDG366"></a><span class="subhead3">Upgrading Execution Setup Structure and Parameters&nbsp;</span>The structure and Parameters of the Report Set or Workflow definition and the Execution Setup must remain synchronized. The system performs an automatic upgrade of the whole Execution Setup&mdash;synchronizing it with both the structure and the Parameters of the Report Set or Workflow&mdash;when the Report Set or Workflow is installed. In addition, when a Program instance in a Report Set or Workflow is installed, the system upgrades the Report Set or Workflow's Execution Setup to synchronize with the Program's Parameters.</p>
<p>You can trigger synchronization manually at any time by selecting <span class="bold">Upgrade Execution Setup</span> from the <span class="bold">Actions</span> drop-down list in the Execution Setup screen.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must install a Program instance in a Report Set for the system to reflect changes to the Program's Parameters in the Report Set's Execution Setup.</div>
<p><a id="LSHDG367"></a><span class="subhead3">Execution Setup Versioning&nbsp;</span>When a Report Set or Workflow is installed or submitted, the system implicitly checks in any of its Execution Setups that are not already checked in. When any user modifies any section of the Execution Setup, the system implicitly checks out the Execution Setup and gives it a new version number.</p>
<p>The system also checks in the Report Set or Workflow and all its Execution Setups when the Report Set or Workflow is copied.</p>
<p>Whenever the system performs an implicit checkin, if other people are working on any part of the Execution Setup, the system immediately checks it out again so that they can continue their work.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Only the user who first created or modified the Execution Setup, and thereby checked it out, can undo the checkout. You can see that person's username in the <span class="bold">Checked Out By</span> field for the Report Set-level Execution Setup.</div>
</div>
<!-- class="sect3" -->
<a id="BABHCJFA"></a>
<div id="LSHDG368" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Modifying a Report Set or Workflow Execution Setup</h4>
<p>This section contains information on the following sections of the screen:</p>
<ul>
<li>
<p><a href="#BABFDFEA">Execution Setup Properties</a></p>
</li>
<li>
<p><a href="#BABEBJEC">Instances</a></p>
</li>
<li>
<p><a href="#BABHBCDB">Overlay Template Parameters</a></p>
</li>
<li>
<p><a href="#BABFFFCB">Post-Processing Parameters</a></p>
</li>
<li>
<p><a href="#BABCBJFI">System Parameters</a></p>
</li>
</ul>
<p><a id="BABFDFEA"></a><a id="LSHDG369"></a><span class="subhead3">Execution Setup Properties&nbsp;</span>You can click <span class="bold">Update</span> and modify the following properties that belong to the Report Set Execution Setup as a whole:</p>
<ul>
<li>
<p><span class="bold">Name</span> of the Execution Setup.</p>
</li>
<li>
<p><span class="bold">Description</span> of the Execution Setup.</p>
</li>
<li>
<p><span class="bold">Allow Use as Execution Template</span>. Set to <span class="bold">Yes</span> to make this Execution Setup available as a template for other Execution Setups in the Report Set definition.</p>
</li>
</ul>
<p><a id="BABEBJEC"></a><a id="LSHDG370"></a><span class="subhead3">Instances&nbsp;</span>This tab displays information a little differently for Report Set and Workflows:</p>
<ul>
<li>
<p><span class="bold">Report Sets</span>. For Report Sets, you see the Report Set structure, with Report Set Entries displayed inside their parent Report Set Entries. You can <span class="bold">Expand All</span>, expand a particular node, or select a <span class="bold">Focus</span> icon to expand a particular node and hide the rest.</p>
<p>Click any Report Set Entry's hyperlink to set the runtime Parameters for that Report Set Entry or its assigned Program instance.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you submit a Report Set for execution, you can specify which Report Set Entries to execute by using the checkboxes in the <span class="bold">Include</span> column.</div>
</li>
<li>
<p><span class="bold">Workflows</span>. For Workflows, you see all executable objects contained in the Workflow. Click any object's hyperlink to set its runtime Parameters.</p>
</li>
</ul>
<p>The Instances subtab displays the following information:</p>
<ul>
<li>
<p><span class="bold">Full Title</span>. For <span class="bold">Report Sets</span>, this column displays each Report Set Entry's concatenated full title that includes its Entry Number Prefix, Parent Number, Delimiter, Entry Number, Entry Number Suffix, and Title.</p>
<p>For <span class="bold">Workflows</span>, this column displays the name of each executable object contained in the Workflow.</p>
</li>
<li>
<p><span class="bold">Ready</span>. If a checkmark in a green circle (the Ready icon) is displayed, all required Parameters associated with the object on that line have a value. For Parameters with a static list of values, the system checks if the value is valid. In Report Sets, the system checks all Report Set Entries that are children of the Report Set instance or Report Set Entry for which the icon is displayed; if any child Report Set Entry is not ready, the Not Ready icon is displayed for the parent as well.</p>
<p>If an X in a red circle (the Not Ready icon) is displayed, at least one Parameter does not have a value, or has an invalid value.</p>
<p>In the submission screen you can use the <span class="bold">Refresh</span> button to recalculate the status of all the <span class="bold">Ready?</span> flags at the same time, to verify that all interdependent values are valid.</p>
</li>
<li>
<p><span class="bold">Validation Status</span> of the object on that line.</p>
</li>
<li>
<p><span class="bold">Volume Name</span>. (Applies only to Report Sets) If the Report Set Entry begins a new volume of the Report Set, the system displays the volume name.</p>
</li>
<li>
<p><span class="bold">Program Name</span>. (Applies only to Report Sets) If a Program instance is assigned to the Report Set Entry, the system displays its name.</p>
</li>
<li>
<p><span class="bold">Program Checked Out By</span>. (Applies only to Report Sets) If the assigned Program instance is checked out, the system displays the username of the person who checked it out.</p>
</li>
<li>
<p><span class="bold">Planned Output Name</span>. (Applies only to Report Sets) If a Planned Output of the assigned Program instance is assigned to the Report Set Entry, the system displays its name.</p>
</li>
<li>
<p><span class="bold">Filename Reference</span>. (Applies only to Report Sets) If there is a Planned Output assigned, the system displays its filename.</p>
</li>
</ul>
<p><a id="LSHDG371"></a><span class="subhead3">Parameters&nbsp;</span>See <a href="rsets.htm#BABEFFGI">"Creating Parameters for Sharing Values within the Report Set"</a>.</p>
<p><a id="BABHBCDB"></a><a id="LSHDG372"></a><span class="subhead3">Overlay Template Parameters&nbsp;</span>(Applies only to Report Sets) See <a href="rsets.htm#BABBCIAA">"Setting Overlay Template Parameter Values"</a> for information about each Parameter.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Overlay Template Parameters are displayed in the Execution Setup but not in the submission form.</div>
<p><a id="BABFFFCB"></a><a id="LSHDG373"></a><span class="subhead3">Post-Processing Parameters&nbsp;</span>(Applies only to Report Sets) See <a href="rsets.htm#CIHFHIIG">"Setting Post-Processing Parameter Values"</a> for information about each Parameter.</p>
<p><a id="BABCBJFI"></a><a id="LSHDG374"></a><span class="subhead3">System Parameters&nbsp;</span>The system displays the current values for the Execution Setup's System Parameters; see <a href="#BEIJBIED">"System Parameters"</a> for information about each Parameter.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BEIGIEAG"></a>
<div id="LSHDG375" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Removing an Execution Setup</h3>
<p>You can remove an Execution Setup if you have delete privileges on Execution Setups of the relevant subtype and also Modify privileges on the parent object's subtype.</p>
<p>To remove an Execution Setup, do the following:</p>
<ol>
<li>
<p>In the Applications tab, go to the object instance that contains the Execution Setup you want to remove.</p>
</li>
<li>
<p>Check out the object instance.</p>
</li>
<li>
<p>Select <span class="bold">Execution Setup</span> from the <span class="bold">Actions</span> drop-down list.</p>
</li>
<li>
<p>Click <span class="bold">Go</span>. The system opens the Execution Setup screen.</p>
</li>
<li>
<p>Select the Execution Setup you want to remove.</p>
</li>
<li>
<p>Click <span class="bold">Remove</span>. The system removes the Execution Setup.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BEIIFAEE"></a>
<div id="LSHDG376" class="sect2">
<h3 class="sect2">Activating a Version of an Execution Setup</h3>
<p>Only one version of an Execution Setup can appear in the Reports tab for submission at any one time. Typically, it is the most recent version. However, you can select a different version if you want to. Whichever version you want to use, you must explicitly activate it or it does not appear in the Reports tab.</p>
<ol>
<li>
<p>In the Applications tab, go to the object instance that contains the Execution Setup you want to activate.</p>
</li>
<li>
<p>Select <span class="bold">Execution Setup</span> from the <span class="bold">Actions</span> drop-down list.</p>
</li>
<li>
<p>Click <span class="bold">Go</span>. The system opens the Execution Setup screen.</p>
</li>
<li>
<p>Click the link to the Execution Setup. The system opens the Execution Setup's Properties screen.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down list, select <span class="bold">View Version History</span>.</p>
</li>
<li>
<p>Click <span class="bold">Go</span>. The system opens the Execution Setup Version History screen with the status of each version of the Execution Setup displayed in the Status column.</p>
</li>
<li>
<p>Select the version you want to be available for execution in the Reports tab and click <span class="bold">Set As Active</span>. The system changes the status of that version to <span class="bold">Runnable Active</span>. See <a href="#BEIEIIFE">"Execution Setup Statuses"</a>.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must also check in the Execution Setup on its Properties screen or it does not appear in the Reports tab.</div>
<p><a id="BEIEIIFE"></a><a id="LSHDG377"></a><span class="subhead3">Execution Setup Statuses&nbsp;</span>To see an Execution Setup's status, select <span class="bold">View Version History</span> from the <span class="bold">Actions</span> drop-down list. Execution Setups can have the following statuses:</p>
<ul>
<li>
<p><span class="bold">Not Runnable</span>. An Execution Setup can be Not Runnable for the following reasons:</p>
<ul>
<li>
<p>Its containing executable object instance has never been installed. To make the Execution Setup runnable, install the object instance.</p>
</li>
<li>
<p>Since the executable object instance was installed, one or more Parameters have been modified. To make the Execution Setup runnable, select <span class="bold">Upgrade Execution Setup</span> from the <span class="bold">Actions</span> drop-down list in the Execution Setup screen.</p>
</li>
<li>
<p>Changes have been made to the executable object instance (or its source definition) that are incompatible with the Execution Setup and that the system cannot automatically upgrade; for example, the executable instance now points to a different object definition. In this case, you cannot make the Execution Setup runnable. You must create a new Execution Setup.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Installable</span>. The containing executable object instance has been installed, then modified and checked in but not yet reinstalled. To make the Execution Setup runnable, install the instance. The system automatically upgrades the Execution Setup and changes its status to Runnable (unless the system cannot upgrade it, in which case its status changes to Not Runnable).</p>
</li>
<li>
<p><span class="bold">Runnable</span>. The Execution Setup is in synch with its containing executable object instance but has not been set to Active. To make the Execution Setup runnable, set it to Active.</p>
</li>
<li>
<p><span class="bold">Runnable Active</span>. The Execution Setup is in synch with its containing executable object instance and has been set to Active. It appears in the Reports tab. (Only one version of an Execution Setup can be set to Active.)</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BEIDBIDE"></a>
<div id="LSHDG378" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Submitting an Execution Setup</h3>
<p>When you have created an Execution Setup, you can submit it to execute the Program, Load Set, Report Set, Workflow, or Data Mart, by clicking <span class="bold">Submit</span> in the Execution Setups screen or in the Reports tab.</p>
<p>You can then set any Parameters defined as Visible and not Read Only and schedule the job if the Execution Setup definition allows it. Instructions are included in "Generating Reports and Running Other Jobs" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub User's Guide</span></span>.</p>
<p>You can see the job's progress and details in the Jobs subtab of the object's Properties screen or the Job Execution section of your My Home screen. Click the Job ID to open the Job Details screen. Instructions for using the My Home screen are included in "Viewing Reports and Other Outputs" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub User's Guide</span></span>. You can also resubmit the Execution Setup from here.</p>
<p>If the job results in an output, you can see the output from the Job Details screen. If the output is classified, you can also see it in the Reports tab. Instructions for browsing and searching in the Reports tab are in "Viewing Reports and Other Outputs" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub User's Guide</span></span>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEIEHAAA"></a>
<div id="LSHDG379" class="sect1">
<h2 class="sect1">Viewing Data</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABEHCDE">Viewing Data within the Oracle Life Sciences Data Hub</a></p>
</li>
<li>
<p><a href="#CHDDBDGG">Viewing Data with Visualizations</a></p>
</li>
<li>
<p><a href="#CHDJGECJ">Viewing Data with Program-Generated Reports</a></p>
</li>
<li>
<p><a href="#BEIDFCGJ">Viewing Data Through an IDE</a></p>
</li>
</ul>
<a id="BABEHCDE"></a>
<div id="LSHDG380" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Viewing Data within the Oracle Life Sciences Data Hub</h3>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BJGIBFGI">About Data Browsing</a></p>
</li>
<li>
<p><a href="#BGBIFGAC">Customizing Data Browsing</a></p>
</li>
</ul>
<a id="BJGIBFGI"></a>
<div id="LSHDG381" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">About Data Browsing</h4>
<p>You can view a Table instance's data only if:</p>
<ul>
<li>
<p>The latest version of the Table instance is installed.</p>
</li>
<li>
<p>You have Read Data privileges for the Table instance.</p>
</li>
<li>
<p>For a blinded Table instance, you have blinding-related security privileges.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
In a Work Area you can see whether or not a Table instance contains data. If the value in the <span class="bold">Has Data</span> column for the Table instance is <span class="bold">Yes</span>, it contains data; if it is <span class="bold">No</span>, it does not contain data.
<p>You can also see the latest and the installed Table instance version numbers in the Work Area's Properties screen.</p>
</div>
<p><a id="LSHDG382"></a><span class="subhead3">Navigation&nbsp;</span>You can access the Browse Data feature in the following ways:</p>
<ul>
<li>
<p><span class="bold">Work Area's Properties screen</span>. Click the icon in the <span class="bold">Browse Data</span> column. The icon is enabled only for Table instances whose latest version is installed.</p>
</li>
<li>
<p><span class="bold">Table instance's Properties screen</span>. Select <span class="bold">Browse Data</span> from the <span class="bold">Actions</span> drop-down list.</p>
</li>
</ul>
<p><a id="LSHDG383"></a><span class="subhead3">Data Currency&nbsp;</span>By default you see the current data.</p>
<p>You can select a timestamp from the <span class="bold">Data Currency</span> drop-down list to view data which is not current. The <span class="bold">Data Currency</span> drop-down list contains timestamps only if you have loaded data into the Table instance multiple times. You can see the Table instance's snapshot labels, if any, in parentheses next to the timestamp in the <span class="bold">Data Currency</span> drop-down list.</p>
<p>For blinded Table instances, the Data Currency drop-down list contains different sets of timestamps for dummy and real data. You can see the real data timestamps if you select <span class="bold">Real</span> from the <span class="bold">Blind Break</span> option in the Customize screen. See <a href="#BGBIFGAC">"Customizing Data Browsing"</a>. You need the necessary privileges to use this feature.</p>
<p><a id="LSHDG384"></a><span class="subhead3">Blinding&nbsp;</span>For Table instances that support blinding, the following rules apply:</p>
<ul>
<li>
<p>If the table contains blinded data, the system displays dummy data by default.</p>
</li>
<li>
<p>If the table contains unblinded data and you have the required privileges, the system displays real data by default. If you do not have the privileges required to see unblinded data, the system displays dummy data.</p>
</li>
<li>
<p>If the table does not support blinding, the system always displays real data.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BGBIFGAC"></a>
<div id="LSHDG385" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Customizing Data Browsing</h4>
<p>If you do not want to see all the Table Columns, or if you have the required privileges and want to see blinded data, then click the <span class="bold">Customize</span> button on the Browse Data screen.</p>
<p>You can customize the display through the following options:</p>
<p><a id="LSHDG386"></a><span class="subhead3">Columns.&nbsp;</span>When you click the <span class="bold">Customize</span> button for the first time, you can see the Table's Column names in an area titled <span class="bold">Included Columns</span>. Another area titled <span class="bold">Available Columns</span> contains no Column names. This is because by default, all Columns are selected for viewing.</p>
<p>You can remove one or more Columns from view and also reorder them. After reordering, the Column on the top in the <span class="bold">Included Columns</span> area in the Customize Data Browse screen appears on the left in the Browse Data screen, and so on.</p>
<p>Do the following:</p>
<ol>
<li>
<p><span class="bold">To remove Columns from view</span>. Select the Column or Columns you want to remove from view and move them into the <span class="bold">Available Columns</span> area of the shuttle. You can use Shift+Click or Ctrl+Click to select multiple Columns. You can double-click to move them or use the arrows.</p>
</li>
<li>
<p><span class="bold">To reorder columns.</span> Use the Up and Down arrows to reorder the Columns in the <span class="bold">Included Columns</span> area.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>.</p>
</li>
</ol>
<p>You can now see the Columns you selected, in the order you selected.</p>
<p><a id="LSHDG387"></a><span class="subhead3">Where Clause.&nbsp;</span>You can use the <span class="bold">Filter Table instance where</span> feature to restrict the data you see. To set up a Where filter,</p>
<ol>
<li>
<p>Select either of the conditions to associate with a Table instance Column.</p>
<ul>
<li>
<p>Show results when ALL results are met</p>
</li>
<li>
<p>Show results when ANY results are met</p>
</li>
</ul>
</li>
<li>
<p>Select a Column from the drop-down list in the <span class="bold">Column</span> field. All available Columns are listed according to their position.</p>
</li>
<li>
<p>Select a filter condition from the drop-down list. The available conditions depend on the type of data in the particular Column.</p>
</li>
<li>
<p>Enter a value to filter by and select <span class="bold">Apply</span>. If the data type is VARCHAR 2, you can select the <span class="bold">Match Case</span> checkbox to filter values by case.</p>
</li>
</ol>
<p>You can add different filter conditions to the same Column or view a combination of different Columns and conditions.</p>
<p>To include more Columns, select a Column from the drop-down list in the Add Another section and select <span class="bold">Add</span>. You can then apply filter conditions to the second Column. Similarly, use the <span class="bold">Remove</span> button to remove a Column and its filter conditions.</p>
<p>For example, for a Demography table with Columns Age, Sex and Race, you can set up the following Where filters:</p>
<ul>
<li>
<p>To retrieve data about patients who are over 50 years old, select:</p>
<p>Column&mdash;Age, Condition&mdash;Greater than, Value&mdash;50</p>
</li>
<li>
<p>To see data about female patients who are older than 50 years, select:</p>
<p>Column&mdash;Age, Condition&mdash;Greater than, Value&mdash;50. Add another Column and select:</p>
<p>Column&mdash;Sex, Condition&mdash;Is, Value&mdash;Female</p>
</li>
<li>
<p>To see records for patients of all races except white, select:</p>
<p>Column&mdash;Race, Condition&mdash;Is not, Value&mdash;White</p>
</li>
</ul>
<p><span class="bold">Order By Clause</span>. You can organize the data retrieved in any order using the <span class="bold">Order Table Instance by</span> feature. You can specify an ascending or descending order for the Column's values. By default, the system displays records by sorting the values from the Column with an order number of 1 in ascending alphabetical or numerical order, depending on the Column's data type.</p>
<p>To order a Table instance:</p>
<ol>
<li>
<p>Select a Column from the drop-down list in the <span class="bold">Column</span> field. Columns are listed according to their position in ascending order. Once selected, a Column does not appear in the list.</p>
</li>
<li>
<p>Select either Ascending or Descending from the drop-down condition list. Data is sorted in ascending order by default.</p>
</li>
<li>
<p>Select <span class="bold">Apply</span>.</p>
</li>
</ol>
<p>You can add more Columns to order and view by using the choice list in the Add Another section, and selecting the <span class="bold">Add</span> button.</p>
<p>Use the <span class="bold">Remove</span> button to remove a column from the Table instance display.</p>
<p>For example, for a Demography table with Columns Age, Race, and Sex:</p>
<ul>
<li>
<p>To sort data by Age, select:</p>
<p>Column&mdash;Age</p>
</li>
<li>
<p>To sort data by Race,&nbsp; select:</p>
<p>Column&mdash;Race</p>
</li>
<li>
<p>To sort data in descending order of Age, and then ascending order of Sex, select:</p>
<p>Column&mdash;Age, Condition&mdash;Descending. Add another column and select:</p>
<p>Column &mdash;Sex</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
You can find more information on SQL in these books:
<p><span class="italic">Oracle&reg; DatabaseSQL Language Reference</span> at <code dir="ltr"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e17118.pdf">http://download.oracle.com/docs/cd/E11882_01/server.112/e17118.pdf</a><a href=""></a></code></p>
<p><span class="italic">Oracle&reg; Database PL/SQL Language Reference</span> at <code dir="ltr"><a href="http://download.oracle.com/docs/cd/E11882_01/appdev.112/e17126.pdf">http://download.oracle.com/docs/cd/E11882_01/appdev.112/e17126.pdf</a><a href=""></a></code></p>
<p><span class="italic">Oracle&reg; Database Reference</span> at <code dir="ltr"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e17110.pdf">http://download.oracle.com/docs/cd/E11882_01/server.112/e17110.pdf</a><a href=""></a></code></p>
</div>
<p><a id="LSHDG1957"></a><span class="subhead3">Blind Break&nbsp;</span>The options you see in the <span class="bold">Blind Break</span> drop-down list depend on the state of the Table instance and on your privileges:</p>
<ul>
<li>
<p><span class="bold">Currently Blinded Table Instance</span>. If the table contains blinded data, you may see the following options:</p>
<ul>
<li>
<p><span class="bold">Dummy</span>. The system displays dummy data, not the real, sensitive data. This is the default behavior.</p>
</li>
<li>
<p><span class="bold">Real (Blind Break)</span>. The system breaks the blind to show you the real, sensitive data. This option is available only if you have the necessary blinding-related privileges. The Table instance remains blinded.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Unblinded Table Instance</span>. If the table has been unblinded, you may see the following options:</p>
<ul>
<li>
<p><span class="bold">Real (Unblinded)</span>. The system displays the real, sensitive data that has been unblinded (made available to everyone with Read Unblind privileges). This option is available only if you have the necessary privileges. This is the default behavior for people with those privileges.</p>
</li>
<li>
<p><span class="bold">Dummy</span>. The system displays dummy data, not the real, sensitive data. This is the default behavior for people who do not have Read Unblind privileges.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Table Instance without Blinding</span>. If the table does not support blinding (its <span class="bold">Blinding Flag</span> is set to <span class="bold">No</span>), the system always displays real data; the Table instance does not contain dummy data. The only option in the <span class="bold">Blind Break</span> drop-down list is <span class="bold">Not Applicable</span>.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDDBDGG"></a>
<div id="LSHDG389" class="sect2">
<h3 class="sect2">Viewing Data with Visualizations</h3>
<p>After you have defined Business Areas (see <a href="defvis.htm#BABHJGBB">Chapter 11, "Defining Business Areas for Visualizations"</a>) you can create instantaneous on-screen visualizations of the data specified in the Business Area.</p>
</div>
<!-- class="sect2" -->
<a id="CHDJGECJ"></a>
<div id="LSHDG390" class="sect2">
<h3 class="sect2">Viewing Data with Program-Generated Reports</h3>
<p>You can define a Program to display data in a report and run it at any time to see current data. See <a href="progs.htm#BABBDBEC">Chapter 5, "Defining Programs"</a> and <a href="#BEIGAICB">"Creating, Modifying, and Submitting Execution Setups"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BEIDFCGJ"></a>
<div id="LSHDG391" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Viewing Data Through an IDE</h3>
<p>After you have installed a Work Area and loaded data into it (or, in the case of Oracle data, created a view of data stored in an external system) you can use one of the integrated development environments (IDEs) to view data in Oracle LSH. To do this, you must set up a Program for this purpose:</p>
<ol>
<li>
<p>Create a Program, including:</p>
<ul>
<li>
<p>Source Table Descriptors mapped to the Table instances whose data you want to view.</p>
</li>
<li>
<p>A Source Code object. You do not need to upload any actual source code files.</p>
</li>
</ul>
</li>
<li>
<p>Check in and install both the Program and the Table instances.</p>
</li>
<li>
<p>Check out the Program definition.</p>
</li>
<li>
<p>In the Program instance, launch the IDE.</p>
</li>
<li>
<p>Query the data as necessary.</p>
</li>
</ol>
<p>For further information, see <a href="progs.htm#BABBDBEC">Chapter 5, "Defining Programs"</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEIIGDGF"></a>
<div id="LSHDG1958" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Viewing Jobs</h2>
<p>You can see a record of each submission of an executable object instance from the Jobs subtab on its Properties screen. The Jobs subtab shows jobs submitted by all users for all versions of the object instance.</p>
<p>You can set the <span class="bold">Show</span> filter to:</p>
<ul>
<li>
<p><span class="bold">All</span>. Displays all submissions of the object instance.</p>
</li>
<li>
<p><span class="bold">Deferred</span>. Displays all submissions generated by Execution Setups with a single deferred execution.</p>
</li>
<li>
<p><span class="bold">Scheduled</span>. Displays all submissions generated by Execution Setups with an execution schedule.</p>
</li>
<li>
<p><span class="bold">Today's</span>. Displays all jobs with a Start TS of sysdate (the system ignores the time).</p>
</li>
</ul>
<p>For each job, the system displays the following information. You can sort on any column by clicking the column header.</p>
<ul>
<li>
<p><span class="bold">Job ID</span>. Click the hyperlink to see Job Execution Details. (Job execution details are explained in the My Home section of the <span class="italic">Oracle Life Sciences Data Hub User's Guide</span> chapter on tracking job execution.)</p>
</li>
<li>
<p><span class="bold">Submission Type</span>. The way the job was submitted for execution:</p>
<ul>
<li>
<p><span class="bold">Immediate</span>. The job was run as soon as it was submitted.</p>
</li>
<li>
<p><span class="bold">Deferred</span>. The job was set up to run once at a later point in time from when it was submitted.</p>
</li>
<li>
<p><span class="bold">Scheduled</span>. The job was one of series of regularly sch</p>
<p>eduled executions of the same executable object.</p>
</li>
<li>
<p><span class="bold">Backchain</span>. The job was run as part of a backchain process ensuring that another job ran on the most current data available. For further information see <a href="exec.htm#CHDHBIAB">"Backchaining"</a>.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Job Status</span>. The highest job status the job has achieved. If the job is in progress, the status displayed is the current status. If the job has ended in failure or been aborted, the system displays the execution status the job had at the time it ended. For an explanation of job statuses, see the <span class="italic">Oracle Life Sciences Data Hub User's Guide</span> chapter on job execution.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To update the job status as the system processes the job, click <span class="bold">Refresh</span>.</div>
</li>
<li>
<p><span class="bold">User Name</span>. The name of the user who submitted the job.</p>
</li>
<li>
<p><span class="bold">Instance Version</span>. The version number of the object instance at the time of submission.</p>
</li>
<li>
<p><span class="bold">Execution Setup Name</span>. The name of the Execution Setup used for submission.</p>
</li>
<li>
<p><span class="bold">Submit TS</span>. The submission timestamp.</p>
</li>
<li>
<p><span class="bold">Start TS</span>. The timestamp of the time the job started.</p>
</li>
<li>
<p><span class="bold">End TS</span>. The timestamp of the time the job ended.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BEIEHIJF"></a>
<div id="LSHDG393" class="sect1">
<h2 class="sect1">Viewing All Outputs of a Program or Report Set</h2>
<p>You can view all existing outputs of executable objects several ways:</p>
<a id="BEIHEHDB"></a>
<div id="LSHDG1959" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Viewing All Outputs of an Instance in the Work Area Properties Screen</h3>
<p>You can see all outputs of a particular executable object instance from its Work Area; see <a href="wa_install.htm#CHDEGBEH">"View All Outputs"</a> for information.</p>
</div>
<!-- class="sect2" -->
<div id="LSHDG1960" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref25"></a>
<h3 class="sect2">Viewing All Outputs from the My Home or Reports Tab</h3>
<p>You can also see outputs from the My Home and Reports tabs by clicking the Job ID. For further information, see "Viewing Reports and Other Outputs" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub User's Guide</span></span>.</p>
</div>
<!-- class="sect2" -->
<div id="LSHDG1961" class="sect2"><a id="sthref26"></a>
<h3 class="sect2">Viewing All Outputs of a Program or Report Set</h3>
<p>In addition to the preceding options, you can view all outputs of a Program or Report Set as follows:</p>
<div id="LSHDG1962" class="sect3"><a id="sthref27"></a>
<h4 class="sect3">Viewing All Program Outputs</h4>
<p>To view existing outputs for a Program, do the following:</p>
<ol>
<li>
<p>Navigate to a Program definition or instance.</p>
</li>
<li>
<p>In the Planned Output subtab, click the name of the Planned Output whose actually outputs you want to see. The selected Planned Output's Properties screen opens.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down list, select <span class="bold">View Existing Output</span>. The View Existing Outputs screen opens, listing all existing outputs.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The system displays existing outputs for all instances of the Program definition, even if you are in the Program instance's Properties screen. You can click on the Program Instance Name column heading to sort by Program instance.</div>
</li>
<li>
<p>Click the icon in the View column to open the actual output file.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div id="LSHDG1963" class="sect3"><a id="sthref28"></a>
<h4 class="sect3">Viewing All Report Set or Report Set Entry Outputs</h4>
<p>To view existing outputs for a Report Set, do the following:</p>
<ol>
<li>
<p>Navigate to a Report Set or Report Set instance Structure view screen.</p>
</li>
<li>
<p>Select the Report Set top level or the Report Set Entry whose outputs you want to see.</p>
</li>
<li>
<p>From the Select Object and: drop-down, select <span class="bold">View All Outputs</span> and click <span class="bold">Go</span>. The View Existing Outputs screen opens, listing all existing outputs.</p>
</li>
<li>
<p>Click the icon in the View column to open the actual output file.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div id="LSHDG1964" class="sect3"><a id="sthref29"></a>
<h4 class="sect3">Information Displayed</h4>
<p>For each Program, Report Set, or Report Set Entry output, the View Existing Outputs screen displays the following information:</p>
<ul>
<li>
<p>File Name. Click the hyperlink to see the output's properties.</p>
</li>
<li>
<p>Output Validation Status</p>
</li>
<li>
<p>Creation TS (timestamp)</p>
</li>
<li>
<p>Creation User (the username of the person who ran the Program instance that generated the output)</p>
</li>
<li>
<p>Job ID. Click the hyperlink to see the job execution details.</p>
</li>
<li>
<p>Program Instance Name</p>
</li>
<li>
<p>Program Instance Version</p>
</li>
<li>
<p>Path to Executable Instance (the location of the Program or Report Set instance)</p>
</li>
<li>
<p>Title</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHDAIFF"></a>
<div id="LSHDG397" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using the Actions Drop-Down List</h2>
<p>You can use the <span class="bold">Actions</span> drop-down list to modify an object's classifications, security user group assignments, validation status, and more.</p>
<p><span class="bold">Actions</span> apply only to the object definition or the instance, not both. If you are in a Work Area, you are working on an object instance and the action applies only to the instance. To apply them to the definition, you must work in the definition directly in its Domain or Application Area.</p>
<p>Not all actions are available for both object definitions and instances. Also, not all actions change the object definition or instance; some actions only display specific information about the object definition or instance.</p>
<p>You do not need to click either <span class="bold">Update</span> or <span class="bold">Check Out</span>.</p>
<p>The following choices are available. Unless otherwise noted, they are available for both the definition (in its Domain or Application Area only) and the instance (in its Work Area) if you have the necessary privileges.</p>
<ul>
<li>
<p><span class="bold">Assign Classification</span>. You can change the classification values assigned to the object. Classification values help users find the object using Advanced Search and in the case of instances, may affect the classification of the object's outputs. See <a href="#CHDJADAD">"Classifying Objects and Outputs"</a> for further information.</p>
</li>
<li>
<p><span class="bold">Apply Security</span>. Objects automatically inherit the user group assignments of their parent. You can remove those assignments and add others as necessary. See <a href="#CHDFEFII">"Applying Security to Objects and Outputs"</a> for further information.</p>
</li>
<li>
<p><span class="bold">Automatic Mapping by Name</span> (executable instances only). Map Table Descriptors to Table instances with the same name. See <a href="#CIHJJIIA">"Automatic Mapping by Name"</a> for further information.</p>
</li>
<li>
<p><span class="bold">Execution Setups</span> (executable instances only). See <a href="#BEIGAICB">"Creating, Modifying, and Submitting Execution Setups"</a> for further information.</p>
</li>
<li>
<p><span class="bold">Reports</span>. You can generate reports that provide information about Table definitions and instances; see <a href="obj_reports.htm#CIHJIAJE">Chapter 14, "System Reports"</a> for further information.</p>
</li>
<li>
<p><span class="bold">Support Validation Info</span>. You can change the instance's validation status and add outputs and documents as supporting information. See <a href="#BABGFFBG">"Validating Objects and Outputs"</a> for further information.</p>
</li>
<li>
<p><span class="bold">Table Descriptors from Existing Table Instances</span> (executable instances only). Create Table Descriptors from existing Table instances and map them at the same time. See <a href="#BABGDGDF">"Creating Table Descriptors from Table Instances and Simultaneously Mapping Them"</a> for further information.</p>
</li>
<li>
<p><span class="bold">Table Instances from Existing Table Descriptors</span> (executable instances only). Create Table instances from existing Table Descriptors and map them at the same time. See <a href="#BEIDGAEJ">"Creating Table Instances from Table Descriptors and Simultaneously Mapping Them"</a> for further information.</p>
</li>
<li>
<p><span class="bold">Upgrade All Instances</span> From the definition, you can upgrade any or all instances of the definition to the latest version of the definition. See <a href="#BEIFHFAA">"Upgrading One or More Instances from the Definition"</a> for further information.</p>
</li>
<li>
<p><span class="bold">Upgrade Instance</span> (instances only). See <a href="#BEIHAHEE">"Upgrading Object Instances to a New Definition Version"</a> for further information.</p>
</li>
<li>
<p><span class="bold">Version Label</span>. You can apply a label to the current version of the object definition or instance. See <a href="#BEIHIEIG">"Version Labels"</a> for further information.</p>
</li>
<li>
<p><span class="bold">View All Outputs</span>. (Program definitions and instances only) Use this option to see all outputs generated by a particular Program definition or instance; see <a href="#BEIEHIJF">"Viewing All Outputs of a Program or Report Set"</a> for further information.</p>
</li>
<li>
<p><span class="bold">View Version History</span> Use this option to see all previous versions of the definition. See <a href="#BEIHEFCJ">"Version History"</a> for further information.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BEIFIDGB"></a>
<div id="LSHDG398" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining Planned Outputs</h2>
<p>Different types of objects have different requirements for Planned Output definitions, which are placeholders for the actual outputs generated by the object during execution. See:</p>
<ul>
<li>
<p><a href="progs.htm#BABJEDHC">Defining Planned Outputs</a></p>
</li>
<li>
<p><a href="load.htm#BJECEFHF">Oracle Load Set Planned Outputs</a></p>
</li>
<li>
<p><a href="load.htm#BJECFCJB">SAS Load Set Planned Outputs</a></p>
</li>
<li>
<p><a href="load.htm#BJEIIIJJ">Text Load Set Planned Outputs</a></p>
</li>
<li>
<p><a href="load.htm#BJEHGCJJ">OC Stable Interface Tables Load Set Planned Outputs</a></p>
</li>
<li>
<p><a href="load.htm#BJEGAIJE">OC DX SAS Views Load Set Planned Outputs</a></p>
</li>
<li>
<p><a href="load.htm#BJEJCDEI">OC Data Extract Views Load Set Planned Outputs</a></p>
</li>
<li>
<p><a href="load.htm#BJEDJIDB">OC Design and Definition Load Set Planned Outputs</a></p>
</li>
<li>
<p><a href="load.htm#BJEIEJGF">OC Global Metadata Load Set Planned Outputs</a></p>
</li>
<li>
<p><a href="load.htm#BJEBAAHB">OC Labs Load Set Planned Outputs</a></p>
</li>
<li>
<p><a href="load.htm#BJEEEGGJ">OC Randomization Load Set Planned Outputs</a></p>
</li>
<li>
<p><a href="load.htm#BJEEBJJA">OC Study Data Load Set Planned Outputs</a></p>
</li>
<li>
<p><a href="dm.htm#CHDEGDIG">Text Data Mart Planned Outputs</a></p>
</li>
<li>
<p><a href="dm.htm#CHDIFIGH">SAS Data Mart Planned Outputs</a></p>
</li>
<li>
<p><a href="dm.htm#CHDJJDFH">Oracle Export Data Mart Planned Outputs</a></p>
</li>
<li>
<p><a href="rsets.htm#CIHGJJFG">About Report Set Planned Outputs</a></p>
</li>
<li>
<p><a href="wkfl.htm#BEIFAECJ">Workflow Planned Outputs</a></p>
</li>
</ul>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment70">
<tr>
<td class="cellalignment77">
<table class="cellalignment75">
<tr>
<td class="cellalignment74"><a href="dev_ui.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment74"><a href="tables.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2018,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment79">
<table class="cellalignment73">
<tr>
<td class="cellalignment74"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment74"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment74"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment74"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
