<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Defining Programs</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1093" />
<meta name="dcterms.created" content="2018-05-25T8:22:15Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Life Sciences Data Hub Application Developer's Guide" />
<meta name="dcterms.identifier" content="E95831-01" />
<meta name="dcterms.isVersionOf" content="LSHDG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2018,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="tables.htm" title="Previous" type="text/html" />
<link rel="Next" href="vars.htm" title="Next" type="text/html" />
<link rel="alternate" href="LSHDG.pdf" title="PDF version" type="application/pdf" />
<link rel="alternate" href="LSHDG.epub" title="ePub version" type="application/epub+zip" />
<link rel="alternate" href="LSHDG.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../dcommon/css/fonts.css">
<link rel="stylesheet" href="../dcommon/css/foundation.css">
<link rel="stylesheet" href="../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../nav/css/html5.css">
<link rel="stylesheet" href="../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/20</span> <!-- End Header -->
<div id="LSHDG475" class="chapter"><a id="BABBDBEC"></a>
<h1 class="chapter"><span class="secnum">5</span> Defining Programs</h1>
<p>This section contains information on the following topics:</p>
<ul>
<li>
<p><a href="#BABEBCGF">About Programs</a></p>
</li>
<li>
<p><a href="#CHDFGBAI">Creating a Program</a></p>
</li>
<li>
<p><a href="#BACIDDJF">Using the Program Properties Screen</a></p>
</li>
<li>
<p><a href="#BACIFFJD">Defining Table Descriptors</a></p>
</li>
<li>
<p><a href="#BACBGAIC">Defining Source Code</a></p>
</li>
<li>
<p><a href="#BABGGGFH">Defining Parameters</a></p>
</li>
<li>
<p><a href="#BABJEDHC">Defining Planned Outputs</a></p>
</li>
<li>
<p><a href="#BABHIAIJ">Defining PL/SQL Programs</a></p>
</li>
<li>
<p><a href="#CIHDCGAB">Defining View Programs</a></p>
</li>
<li>
<p><a href="#BABGIHIB">Defining SAS Programs</a></p>
</li>
<li>
<p><a href="#BABGHJBI">Defining Oracle Reports Programs</a></p>
</li>
<li>
<p><a href="#CHDGAIBI">Defining Informatica Programs</a></p>
</li>
<li>
<p><a href="#CHDCHJFC">Defining Oracle Business Intelligence Publisher Programs</a></p>
</li>
<li>
<p><a href="#BABIBAGJ">Installing Program Instances</a></p>
</li>
<li>
<p><a href="#CHDEEBGJ">IDE Launch Settings</a></p>
</li>
<li>
<p><a href="#BACJEBAG">Modifying Programs</a></p>
</li>
<li>
<p><a href="#CHDDFHHE">Setting Up Integrated Development Environments (IDEs)</a></p>
</li>
</ul>
<div id="LSHDG476" class="figure">
<p class="titleinfigure"><a id="BABEGFAD"></a>Figure 5-1 Process of Creating a Program Definition and Instance</p>
<img width="583" height="252" src="img/program_process.gif" alt="Description of Figure 5-1 follows" /><br />
<a id="sthref34" href="img_text/program_process.htm">Description of ''Figure 5-1 Process of Creating a Program Definition and Instance''</a><br />
<br /></div>
<!-- class="figure" -->
<a id="BABEBCGF"></a>
<div id="LSHDG477" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">About Programs</h2>
<p>To create an Oracle Life Sciences Data Hub (Oracle LSH) Program you write or upload source code in SAS, PL/SQL, or Oracle Reports as you normally would. In addition, you must create a defined object in Oracle LSH called a Program, and create defined objects for each of the following included in your source code:</p>
<ul>
<li>
<p>You must define a Table Descriptor object for each source and target table or data set that your program reads from and writes to. You must then map each Table Descriptor to the actual Table instance the program reads from or writes to.</p>
</li>
<li>
<p>You must define a Source Code object for the primary source code you write and for any separate subroutines, macros, or formats you use.</p>
</li>
<li>
<p>You must define a Parameter object for each input, output, or input/output parameter you declare in your source code.</p>
</li>
<li>
<p>You must define a Planned Output object for each output the Program will produce, including reports, error files, and log files (except SAS log files, which the system creates automatically).</p>
</li>
<li>
<p>As with other Oracle LSH executables, you must define at least one Execution Setup to enable users to run the Program. See <a href="deftasks.htm#BEIGAICB">"Creating, Modifying, and Submitting Execution Setups"</a> for further information.</p>
</li>
</ul>
<p>Because these Program components are defined objects, Oracle LSH can keep them and the Program as a whole under version control, and you can validate the Program.</p>
<p>A Program of any technology type (SAS, PL/SQL, or Oracle Reports) can operate on any Oracle LSH data, regardless of the type of external system where the data originated because all Oracle LSH Tables are compatible with both Oracle tables and SAS data sets. Only one Program instance can write to any particular Table instance.</p>
<p>When you run a Program, the system launches the appropriate engine to execute the code, compiles source code files as necessary in that environment, and launches the primary source code file, running in batch mode. You must create an instance of a Program definition and install it and the Table instances to which it is mapped before you can run the Program; see <a href="#BABIBAGJ">"Installing Program Instances"</a>.</p>
<p><a id="LSHDG478"></a><span class="subhead3">Program Usage&nbsp;</span>You can use a Program in several basic ways:</p>
<ul>
<li>
<p><span class="bold">Standalone Object</span>. You can use a Program to do one or both of the following:</p>
<ul>
<li>
<p>generate one or more reports on data</p>
</li>
<li>
<p>manipulate data and write the transformed data to tables</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Component of a Report Set</span>. Report Sets must contain Programs in order to generate the reports contained in the Report Set (see <a href="rsets.htm#CIHJGCGI">Chapter 9, "Defining Report Sets"</a>).</p>
</li>
<li>
<p><span class="bold">Component of a Workflow</span>. Any data transformation or generation of reports done within a Workflow can only be accomplished by Programs (see <a href="wkfl.htm#CHDBEIJJ">Chapter 10, "Defining Workflows"</a>).)</p>
</li>
<li>
<p><span class="bold">Container</span>. Source Code objects must be stored in Programs. You may want to create Programs specifically to store reusable source code files for reference as subroutines in other Programs</p>
</li>
<li>
<p><span class="bold">Data Viewer</span>. After the Program and its source Table instances are installed, you can view data in the database tables in the Integrated Development Environment (IDE). After the Program runs, you can also view data in the target Table instances.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
For information about writing Programs that touch blinded data, see <a href="tables.htm#BABHFFDA">"Setting and Modifying Table Attributes"</a> and <a href="exec.htm#CJAIIFIJ">"Managing Blinded Data"</a>.</div>
<p><a id="LSHDG479"></a><span class="subhead3">Reports on Program Definitions and Instances&nbsp;</span>From the <span class="bold">Actions</span> drop-down list, you can generate reports that provide information on a Program definition or instance; see <a href="obj_reports.htm#CIHJIAJE">Chapter 14, "System Reports"</a> for information.</p>
</div>
<!-- class="sect1" -->
<a id="CHDFGBAI"></a>
<div id="LSHDG481" class="sect1">
<h2 class="sect1">Creating a Program</h2>
<p>When you create a Program in a Work Area, you are actually creating an instance of a Program definition.</p>
<p>To create a new Program instance:</p>
<ol>
<li>
<p>In a Work Area, select <span class="bold">Program</span> from the <span class="bold">Add</span> drop-down list.</p>
</li>
<li>
<p>Click <span class="bold">Go</span>.</p>
<p>The system displays the Create Program screen.</p>
</li>
<li>
<p>Choose one of the following options:</p>
<ul>
<li>
<p><span class="bold">Create a new Program definition and instance</span>. Choose this option if no Program definition exists that can meet your needs, either as it is or with some modification.</p>
</li>
<li>
<p><span class="bold">Create an instance from an existing Program definition</span>. Choose this option if a Program definition already exists that meets your needs.See <a href="deftasks.htm#CHDEHHAG">"Finding an Appropriate Definition"</a> and <a href="deftasks.htm#CHDJIJBH">"Reusing Existing Definitions"</a> for further information.</p>
</li>
</ul>
</li>
<li>
<p>Depending on your choice, follow one of these sets of instructions:</p>
<ul>
<li>
<p><a href="#CIHJGEEH">Creating a New Program Definition and Instance</a></p>
</li>
<li>
<p><a href="deftasks.htm#CHDGAIDJ">Creating an Instance of an Existing Definition</a></p>
</li>
</ul>
</li>
</ol>
<a id="CIHJGEEH"></a>
<div id="LSHDG482" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating a New Program Definition and Instance</h3>
<p>When you select <span class="bold">Create a new Program definition and instance</span> in the Create Program screen, additional fields appear.</p>
<ol>
<li>
<p>Enter values in the following fields:</p>
<ul>
<li>
<p><span class="bold">Name</span>. See <a href="deftasks.htm#CHDBIJAH">"Naming Objects"</a>.</p>
</li>
<li>
<p><span class="bold">Description</span>. See <a href="deftasks.htm#CHDIHBBC">"Creating and Using Object Descriptions"</a>.</p>
</li>
<li>
<p><span class="bold">Program Type</span>. The options are: PL/SQL, Oracle Reports, SAS Program, SAS Format Catalog, SAS Macro Catalog, BI Publisher, and View. Your company may support other Program Types and they may appear in this list. Follow your company's instructions for such Program Types.</p>
</li>
</ul>
</li>
<li>
<p>In the <span class="bold">Classification</span> section, select the following for both the definition and the instance:</p>
<ul>
<li>
<p><span class="bold">Subtype</span>. Select a subtype according to your company's policies.</p>
</li>
<li>
<p><span class="bold">Classification Values</span>. See <a href="deftasks.htm#CHDJADAD">"Classifying Objects and Outputs"</a> for instructions.</p>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Apply</span> to save your work and continue defining the Program.</p>
<p>The system opens the Properties screen for the new Program instance.</p>
</li>
<li>
<p><span class="bold">Force Output Validation Status to 'Development'</span> If selected, outputs of instances of this Program definition are always created with a validation status of Development. If deselected, the outputs inherit the validation status of the Execution Setup that produced them, which in turn can inherit its validation status from the Program instance. Your company can determine the default setting using an Oracle profile; see "Setting Profile Values" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub System Administrator's Guide</span></span>. To change this value, do the following:</p>
<ol>
<li>
<p>Click the hyperlink to the Program definition in the Program in the Instance Properties section of the screen. The Program definition's Properties screen opens.</p>
</li>
<li>
<p>Click <span class="bold">Update</span>. Fields become enterable.</p>
</li>
<li>
<p>Select or deselect <span class="bold">Force Output Validation Status to 'Development'</span>.</p>
</li>
<li>
<p>Click <span class="bold">Apply</span>. The system saves the change.</p>
</li>
<li>
<p>To return to the Program instance and continue defining the Program instance and definition at the same time, click the breadcrumb link to the Program instance just above the screen title.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Notes:</p>
This flag is a property of the Program definition, not the Program instance. Its value applies to all instances of this Program definition version.
<p>The setting of this attribute is version-specific; if you change it in one version, any other existing versions retain their existing value. Subsequently created versions of this Program definition get their default setting from the previous version.</p>
<p>Your company can set the default value for this attribute in a lookup. For further information see "Adding and Modifying Lookup Values" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub System Administrator's Guide</span></span>. Newly created Programs get their default setting for this attribute from the lookup.</p>
</div>
</li>
<li>
<p>Define the Program details. For information and instructions see:</p>
<ul>
<li>
<p><a href="deftasks.htm#BACBIIJA">Defining and Mapping Table Descriptors</a></p>
</li>
<li>
<p><a href="#BACBGAIC">Defining Source Code</a></p>
</li>
<li>
<p><a href="vars.htm#BACHGJBH">Defining Parameters</a></p>
</li>
<li>
<p><a href="#BABJEDHC">Defining Planned Outputs</a></p>
</li>
<li>
<p><a href="deftasks.htm#BEIGAICB">Creating, Modifying, and Submitting Execution Setups</a></p>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Check In</span>. The system checks in Version 1 of both the Program definition and instance.</p>
</li>
<li>
<p>Install the Program instance (see <a href="wa_install.htm#BABHJGHA">Chapter 12, "Using, Installing, and Cloning Work Areas"</a>). You can use the <span class="bold">Install</span> button on the Program instance Properties screen or install the Program instance as part of a Work Area installation. The Install button always performs an installation of type upgrade, installing the Program instance only if the current version has not been installed previously.</p>
</li>
<li>
<p>Validate both the definition and the instance according to your company's policies.</p>
</li>
</ol>
<p>For information on creating the different types of Programs, see:</p>
<ul>
<li>
<p><a href="#BABHIAIJ">Defining PL/SQL Programs</a>.</p>
</li>
<li>
<p><a href="#BABGIHIB">Defining SAS Programs</a>.</p>
</li>
<li>
<p><a href="#BABGHJBI">Defining Oracle Reports Programs</a>.</p>
</li>
<li>
<p><a href="#CHDCHJFC">Defining Oracle Business Intelligence Publisher Programs</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDEHEFA"></a>
<div id="LSHDG484" class="sect2">
<h3 class="sect2">Creating an Instance of an Existing Program Definition</h3>
<p>If you use an existing Program as a definition source, its Source Code, Table Descriptors, Parameters and other properties are already defined. See <a href="deftasks.htm#CHDGAIDJ">"Creating an Instance of an Existing Definition"</a> for instructions.</p>
<p>After you have created the Program instance, you must map the Table Descriptors to Table instances; see <a href="deftasks.htm#CIHDCCDA">"Mapping Table Descriptors to Table Instances"</a>. You must also create at least one Execution Setup for the Program instance; see <a href="deftasks.htm#BEIGAICB">"Creating, Modifying, and Submitting Execution Setups"</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BACIDDJF"></a>
<div id="LSHDG486" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using the Program Properties Screen</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BACCEBDH">Instance Properties</a></p>
</li>
<li>
<p><a href="#BACJHCIF">Definition Properties</a></p>
</li>
<li>
<p><a href="#BACHAJCF">Buttons</a></p>
</li>
<li>
<p><a href="deftasks.htm#CIHDAIFF">Using the Actions Drop-Down List</a></p>
</li>
<li>
<p>Subtabs:</p>
<ul>
<li>
<p><a href="#BACIFFJD">Defining Table Descriptors</a></p>
</li>
<li>
<p><a href="#BACBGAIC">Defining Source Code</a></p>
</li>
<li>
<p><a href="#BABGGGFH">Defining Parameters</a></p>
</li>
<li>
<p><a href="#BABJEDHC">Defining Planned Outputs</a></p>
</li>
<li>
<p><a href="deftasks.htm#BEIIGDGF">Viewing Jobs</a></p>
</li>
</ul>
</li>
</ul>
<p>See also <a href="#BABEGFAD">Figure 5-1, "Process of Creating a Program Definition and Instance"</a>.</p>
<p>See <a href="#BACJEBAG">"Modifying Programs"</a> for information on modifying Programs.</p>
<p>If you are working in a Work Area, you see the properties of both the Program instance and the Program definition it references. If you are working directly on the definition in an Application Area or Domain, you see only the properties of the definition.</p>
<a id="BACCEBDH"></a>
<div id="LSHDG487" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Instance Properties</h3>
<p>You can see the following instance properties:</p>
<p><a id="LSHDG488"></a><span class="subhead3">Name&nbsp;</span>You can click <span class="bold">Update</span> and modify the name. See <a href="deftasks.htm#CHDBIJAH">"Naming Objects"</a> for further information.</p>
<p><a id="LSHDG489"></a><span class="subhead3">Description&nbsp;</span>You can click <span class="bold">Update</span> and modify the description. See <a href="deftasks.htm#CHDIHBBC">"Creating and Using Object Descriptions"</a> for further information.</p>
<p><a id="BACFIHFC"></a><a id="LSHDG490"></a><span class="subhead3">Definition&nbsp;</span>This field specifies the Program definition to which this Program instance points. For further information, see <a href="#BACHBIAH">"Definition Source"</a>.</p>
<p>To upgrade to a new version of the same definition, use the <span class="bold">Upgrade to Latest</span> button. See <a href="deftasks.htm#BEIFAIDB">"Upgrading to a Different Definition Version from an Instance"</a>.</p>
<p><a id="LSHDG491"></a><span class="subhead3">Blind Break&nbsp;</span>This field indicates whether you can see real or dummy data in blinded Table instances when you work on this Program from an IDE. Click <span class="bold">Launch Settings</span> to make this selection. The choices depend on your privileges. If none of the Table instances mapped to the Program instance contains either blinded or unblinded data, the only possible setting is Not Applicable. See <a href="#CHDEEBGJ">"IDE Launch Settings"</a> for further information.</p>
<p><a id="LSHDG492"></a><span class="subhead3">Shared Snapshot Label&nbsp;</span>The default value you see here comes from the default Execution Setup for this Program, if there is one. Otherwise the default value is determined by your privileges. If the source Table instances have shared snapshot labels, you can click <span class="bold">Launch Settings</span> and select one of them. See <a href="#CHDEEBGJ">"IDE Launch Settings"</a> for further information.</p>
<p><a id="LSHDG493"></a><span class="subhead3">Validation Status&nbsp;</span>This field displays the current validation status of the Program instance. If you have the necessary privileges, you can change the validation status by selecting <span class="bold">Validation Supporting Information</span> from the <span class="bold">Actions</span> drop-down list. See <a href="deftasks.htm#BABGFFBG">"Validating Objects and Outputs"</a> for further information.</p>
<p><a id="LSHDG494"></a><span class="subhead3">Status&nbsp;</span>This field displays the installable status of the Program: Installable or Non Installable. Programs have an additional status called Installable IDE. You can install a Program without a Source Code, if the Program has the Installable IDE status. You can work on such a Program's Source Code in an IDE. See <a href="status.htm#BABHIEJG">Appendix A, "Installation Requirements for Each Object Type"</a>.</p>
<p><a id="LSHDG495"></a><span class="subhead3">Version&nbsp;</span>This field displays the current version number of the Program instance.</p>
<p><a id="LSHDG496"></a><span class="subhead3">Version Label&nbsp;</span>This field displays the version label, if any, for the current Program instance version.</p>
<p>For further information on object versions, see <a href="deftasks.htm#BEIBHCFH">"Understanding Object Versions and Checkin/Checkout"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BACJHCIF"></a>
<div id="LSHDG497" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Definition Properties</h3>
<p><a id="LSHDG498"></a><span class="subhead3">Checked Out Status&nbsp;</span>This field displays the status of the definition: either Checked Out or Checked In. You must check out the definition to modify Table Descriptors, Source Code, Parameters, or Planned Outputs. However, you can change Table Descriptor mappings without checking out the definition. See <a href="deftasks.htm#BEIBHCFH">"Understanding Object Versions and Checkin/Checkout"</a> for further information.</p>
<p><a id="LSHDG499"></a><span class="subhead3">Latest Version&nbsp;</span>If set to <span class="bold">Yes</span>, this Program instance is pointing to the latest version of the Program definition. If set to <span class="bold">No</span>, this Program instance is pointing to an older version of the Program definition.</p>
<p><a id="LSHDG500"></a><span class="subhead3">View Latest&nbsp;</span>You can see this button only if the current Program instance does not point to the latest definition version. Click this button to view the latest Program definition.</p>
<p><a id="LSHDG501"></a><span class="subhead3">Upgrade to Latest&nbsp;</span>This button is grayed out if the current Program instance already points to the latest Program definition. Click this button to upgrade the current Program instance to the latest definition version. For more information on upgrading instances, see <a href="deftasks.htm#BEIHAHEE">"Upgrading Object Instances to a New Definition Version"</a>.</p>
<p><a id="LSHDG502"></a><span class="subhead3">Checked Out By&nbsp;</span>This field displays the username of the person who has the Program definition checked out. See <a href="deftasks.htm#BEIBHCFH">"Understanding Object Versions and Checkin/Checkout"</a> for further information.</p>
<p><a id="LSHDG503"></a><span class="subhead3">Version Label&nbsp;</span>This field displays the version label, if any, for this definition version.</p>
<p><a id="LSHDG504"></a><span class="subhead3">Program Type&nbsp;</span>This field displays this Program definition's type: Oracle Reports, PLSQL, SAS Program, SAS Format Catalog, or SAS Macro Catalog. See <a href="#BABHIAIJ">"Defining PL/SQL Programs"</a>, <a href="#BABGIHIB">"Defining SAS Programs"</a>, and <a href="#BABGHJBI">"Defining Oracle Reports Programs"</a>.</p>
<p><a id="LSHDG505"></a><span class="subhead3">Development Tool&nbsp;</span>This field displays the tool required to work on the source code of the Program: Oracle Reports, PL/SQL, or SAS.</p>
<p><a id="LSHDG506"></a><span class="subhead3">Validation Status&nbsp;</span>This field displays the current validation status of the Program definition. If you are working directly in the definition in an Application Area or Domain and you have the necessary privileges, you can change the validation status by selecting <span class="bold">Validation Supporting Information</span> from the <span class="bold">Actions</span> drop-down list. If you are working in an instance of the Program in a Work Area, and you want to change the validation status of the definition, you must go to the definition. See <a href="deftasks.htm#BABGFFBG">"Validating Objects and Outputs"</a> for further information.</p>
<p><a id="LSHDG507"></a><span class="subhead3">Status&nbsp;</span>This field displays the installable status of the Program: Installable or Non Installable. See <a href="status.htm#BABHIEJG">Appendix A, "Installation Requirements for Each Object Type"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BACHAJCF"></a>
<div id="LSHDG508" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Buttons</h3>
<p>From a Program instance in a Work Area, you can use the following buttons:</p>
<p><a id="LSHDG509"></a><span class="subhead3">Install&nbsp;</span>Click <span class="bold">Install</span> to install the Program instance, including mapping target Table Descriptors and installing mapped target Table instances; see <a href="#BABIBAGJ">"Installing Program Instances"</a>. For a list of reasons a Program instance may not be installable, see <a href="status.htm#BABHIEJG">Appendix A, "Installation Requirements for Each Object Type"</a>.</p>
<p><a id="LSHDG510"></a><span class="subhead3">Launch IDE&nbsp;</span>Click <span class="bold">Launch IDE</span> to launch the integrated development environment (IDE) in which you write your program source code.</p>
<p><a id="LSHDG511"></a><span class="subhead3">Submit&nbsp;</span>Click <span class="bold">Submit</span> to run the Program instance. Before you can run the Program, you must install it and create an Execution Setup for it (select <span class="bold">Execution Setups</span> from the <span class="bold">Actions</span> drop-down list).</p>
<p><a id="LSHDG512"></a><span class="subhead3">Update&nbsp;</span>Click <span class="bold">Update</span> to modify the Program instance properties. See <a href="#BACJGBFG">"Modifying Program Instance Properties"</a>.</p>
<p><a id="LSHDG513"></a><span class="subhead3">Launch Settings&nbsp;</span>Click <span class="bold">Launch Settings</span> to set the blinding status and currency of the data you want to view while developing your Program; see <a href="#CHDEEBGJ">"IDE Launch Settings"</a>.</p>
<p><a id="LSHDG514"></a><span class="subhead3">Check In/Out and Uncheck&nbsp;</span>Click these buttons to check out, check in, or uncheck the Program definition. Different buttons are displayed in the Program Definition Properties section depending on the Checked Out Status and whether or not you are the person who has the definition checked out. If someone else has checked out the definition, you cannot check it in or uncheck it. The username of the person who has checked it out is displayed. See <a href="deftasks.htm#BEIBHCFH">"Understanding Object Versions and Checkin/Checkout"</a>.</p>
<p><a id="LSHDG515"></a><span class="subhead3">View Latest/Upgrade to Latest&nbsp;</span>If the definition is not the latest version, you can click to view the latest version and upgrade to the latest version if you want to. See <a href="deftasks.htm#BEIFAIDB">"Upgrading to a Different Definition Version from an Instance"</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BACIFFJD"></a>
<div id="LSHDG517" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining Table Descriptors</h2>
<p>To enable different instances of a single Program definition to run against different source or target Tables&mdash;even Tables with different names or structure&mdash;Oracle LSH requires Table Descriptors as part of the Program definition. You must include one Table Descriptor for each Table instance the Program will read from or write to. Like a Table instance, a Table Descriptor contains a pointer to a Table definition. The difference is that a Table Descriptor exists only inside a Program or other executable object definition, while a Table instance is installed independently in the database. See <a href="deftasks.htm#BACBIIJA">Defining and Mapping Table Descriptors</a> for further information.</p>
<p>You must map each Table Descriptor to the corresponding Table instance that the Program instance will read from or write to. The system can do the mapping automatically if you choose to create Table Descriptors from existing Table instances or if the Table Descriptor has the same name as the Table instance. However, if the Table instance is different enough from the Table Descriptor, you must map them manually. See <a href="deftasks.htm#CIHDCCDA">"Mapping Table Descriptors to Table Instances"</a>).</p>
<p>The Program definition's source code refers to the Table Descriptor by name and Column name as if it were an actual table or SAS data set containing data. The system uses the mappings to translate the names used in the source code to those of the Table instance to which the Table Descriptor is mapped.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Only one Program can write to any particular Table instance. The system prevents you from mapping a Table instance to more than one target Table Descriptor.</div>
<p>Target Table instances must have a processing type. Be sure that the processing type of each target Table instance is compatible with your source code; see <a href="exec.htm#CHDHFBGG">"Data Processing Types"</a> for further information.</p>
<p>There are several ways to create a Table Descriptor:</p>
<ul>
<li>
<p><a href="deftasks.htm#BABGDGDF">Creating Table Descriptors from Table Instances and Simultaneously Mapping Them</a></p>
</li>
<li>
<p><a href="deftasks.htm#BEIHFFAA">Adding a New Target Table Descriptor</a></p>
</li>
<li>
<p><a href="deftasks.htm#BEIGAEJF">Adding Target Table Descriptors from a SAS File</a></p>
</li>
<li>
<p><a href="deftasks.htm#BEIHECAF">Adding a Target Table Descriptor from an Existing Table Definition</a></p>
</li>
</ul>
<p>See also <a href="deftasks.htm#CIHDCCDA">"Mapping Table Descriptors to Table Instances"</a>.</p>
<p>For information on how you can make data available to Program instances in an Integrated Development Environment (IDE), see <a href="#CHDEEBGJ">"IDE Launch Settings"</a>.</p>
</div>
<!-- class="sect1" -->
<a id="BACBGAIC"></a>
<div id="LSHDG519" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining Source Code</h2>
<p>This section contains information about Source Code in Oracle LSH, including:</p>
<ul>
<li>
<p><a href="#BABBBCHG">About Source Code</a></p>
</li>
<li>
<p><a href="#BABCEAEF">Creating Source Code</a></p>
</li>
<li>
<p><a href="#BABGHFHG">Calling APIs from Source Code</a></p>
</li>
<li>
<p><a href="#BABBIDGC">Creating and Using Static Reference Source Code</a></p>
</li>
<li>
<p><a href="#BACFIBFF">Upgrading Source Code And Undoing Source Code Upgrades</a></p>
</li>
</ul>
<p>See also:</p>
<ul>
<li>
<p><a href="#BABHIAIJ">Defining PL/SQL Programs</a></p>
</li>
<li>
<p><a href="#BABGIHIB">Defining SAS Programs</a></p>
</li>
<li>
<p><a href="#BABGHJBI">Defining Oracle Reports Programs</a></p>
</li>
<li>
<p><a href="#CHDCHJFC">Defining Oracle Business Intelligence Publisher Programs</a></p>
</li>
</ul>
<a id="BABBBCHG"></a>
<div id="LSHDG520" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Source Code</h3>
<p>A Source Code definition encapsulates the file containing the actual source code, so that the source code is stored under version control, in compliance with industry regulations (see <a href="deftasks.htm#CHDHHFEB">"Versions of Component Objects"</a>).</p>
<p>Every Oracle LSH Program must contain one <span class="bold">primary</span> source code object and may contain any number of additional (<span class="glossaryterm">secondary</span>) source code objects serving as subroutines.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Source Code for Oracle LSH Programs of the BI Publisher adapter type is automatically generated by the system. Do not edit or upload the Source Code manually or the BI Publisher Program may not work properly.
<p>See <a href="#CHDEHAIH">"About Oracle BI Publisher Program Source Code"</a></p>
</div>
<p><a id="BABEHJFA"></a><a id="LSHDG521"></a><span class="subhead3">Primary Source Code&nbsp;</span>Each Program contains one primary Source Code definition, listed first and given an Order number of one (1). When you execute the Program, the system launches the Source Code definition you have defined as Primary. Normally you write the primary source code especially for a particular Program. The primary Source Code definition contains the file the system executes when the Program is submitted. The primary source code references Table Descriptors, Parameters, Planned Outputs, and other Source Code instances defined in the Program by their Oracle or SAS name, as appropriate for the technology type (see <a href="#BABJAHEG">"Writing Primary Source Code in PL/SQL"</a> and<a href="#BABGHCAJ">"SAS Program and Source Code Types"</a>).</p>
<p><a id="BABECICC"></a><a id="LSHDG522"></a><span class="subhead3">Secondary Source Code&nbsp;</span>Secondary Source Code objects are those with any order number other than one (1). They are SAS macros or formats or PL/SQL packages that are, in most cases, called by the primary source code.</p>
<p>Source Code definitions have a Sharable attribute that, if set to <span class="bold">Yes</span>, makes them available for use as a definition source for Source Code instances in other Programs. You can create Program definitions especially for the purpose of storing sharable Source Code definitions. If you are working in SAS, you must create a Program definition of type Macro Catalog to store macros, or a Program definition of type Format Catalog to store formats. If you are working in Oracle technologies (Oracle Reports or PL/SQL) you can create a Program definition of type PL/SQL to hold sharable PL/SQL packages.</p>
<p>You can also create secondary Source Code especially for a particular program. In this case Oracle LSH stores both the Source Code instance and its definition in the Program in which you create them.</p>
<p>See <a href="#BACFIBFF">"Upgrading Source Code And Undoing Source Code Upgrades"</a> for information on how to upgrade Source Code instances pointing to a sharable Source Code definition.</p>
<p>For further information, see:</p>
<ul>
<li>
<p><a href="#BABDFCHA">Creating a SAS Macro Catalog</a></p>
</li>
<li>
<p><a href="#BABGDJJF">Creating a SAS Format Catalog</a></p>
</li>
<li>
<p><a href="#CHDCAAJF">Creating a PL/SQL Package Storage Program</a></p>
</li>
</ul>
<p><a id="LSHDG523"></a><span class="subhead3">Execution&nbsp;</span>When you submit an Execution Setup to run a Program, the system does the following in sequence:</p>
<ol>
<li>
<p>Initializes the batch environment for the appropriate technology</p>
</li>
<li>
<p>If necessary, compiles all the Source Code files in the order in which they are listed in the Source Code subtab (all SAS macros and formats included in the Program are compiled)</p>
</li>
<li>
<p>Launches the primary Source Code file using the Parameter values specified in the Execution Setup</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot set a Static-reference Source Code as primary. Also, you cannot set a Source Code that points directly to a Program definition as primary.</div>
</li>
<li>
<p>Launches any secondary Source Code files when they are called from the primary file</p>
</li>
<li>
<p>Writes data to Table instances, if so directed by the source code</p>
</li>
<li>
<p>If directed by the source code, generates reports and classifies them as specified in Planned Output definitions</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BABCEAEF"></a>
<div id="LSHDG525" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating Source Code</h3>
<p>When you create Source Code in a Program, you can either create an instance of an existing Source Code definition, or a new Source Code definition and instance at the same time:</p>
<ol>
<li>
<p>In the Source Code subtab of a Program, click <span class="bold">Add</span>. The system displays the Create Source Code screen.</p>
</li>
<li>
<p>Choose one of the following options:</p>
<ul>
<li>
<p><span class="bold">Create a new Source Code definition and instance</span>. Select this option in any of the following situations:</p>
<ul>
<li>
<p>You are creating the primary Source Code for a Program</p>
</li>
<li>
<p>The source code you want to use exists only outside Oracle LSH (you can upload the actual source code file, but you must create a new Source Code definition to store the uploaded file)</p>
</li>
<li>
<p>You are creating a subroutine that does not yet exist in Oracle LSH (see <a href="#BABDFCHA">"Creating a SAS Macro Catalog"</a>, <a href="#BABGDJJF">"Creating a SAS Format Catalog"</a>, and <a href="#CHDCAAJF">"Creating a PL/SQL Package Storage Program"</a>).</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Create an instance of an existing Source Code definition</span>. Select this option in any of the following situations:</p>
<ul>
<li>
<p>You are working in a PL/SQL Program and you want to reference a package in another Program.</p>
</li>
<li>
<p>You are working in a SAS Program and you want to reference a macro or format in another Program.</p>
</li>
</ul>
<p>Your company may have Programs created especially to store sharable Source Code files in a designated Library or Application Area.</p>
<p>For more information on using SAS Format Catalogs and SAS Macro Catalogs, see <a href="#BABEABCH">"Using a SAS Macro Catalog"</a> and <a href="#BABBFABG">"Using a SAS Format Catalog"</a>.</p>
</li>
</ul>
</li>
<li>
<p>Depending on your choice, follow one of the following sets of instructions:</p>
<ul>
<li>
<p><a href="#BABFIBBD">Creating a New Source Code Definition and Instance</a></p>
</li>
<li>
<p><a href="#BABIAEBJ">Creating an Instance of an Existing Source Code Definition</a></p>
</li>
</ul>
</li>
</ol>
<p>You can also create a source code instance that points to a Program definition. This is so that you can use the same SAS Macro Catalog and SAS Format Catalog in other Programs. See <a href="#BABGHCAJ">"SAS Program and Source Code Types"</a>.</p>
<a id="BABFIBBD"></a>
<div id="LSHDG526" class="sect3">
<h4 class="sect3">Creating a New Source Code Definition and Instance</h4>
<p>When you select <span class="bold">Create a new Source Code definition and instance</span> in the Create Source Code screen, additional fields appear.</p>
<p>This section contains instructions for all technology types. For instructions specific to each technology, see the following sections:</p>
<ul>
<li>
<p><a href="#BABHIAIJ">Defining PL/SQL Programs</a></p>
</li>
<li>
<p><a href="#BABGIHIB">Defining SAS Programs</a></p>
</li>
<li>
<p><a href="#BABGHJBI">Defining Oracle Reports Programs</a></p>
</li>
<li>
<p><a href="#CHDCHJFC">Defining Oracle Business Intelligence Publisher Programs</a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle LSH creates the Source Code automatically for Oracle LSH BI Publisher Programs. Do not create or edit this Source Code. See <a href="#CHDEHAIH">"About Oracle BI Publisher Program Source Code"</a> for more information.</div>
</li>
</ul>
<ol>
<li>
<p>Enter values in the following fields:</p>
<ul>
<li>
<p><span class="bold">Name</span>. The system uses the name you enter for the actual source code file. If you do not specify an extension, Oracle LSH appends the default extension for that technology type: .sas for SAS source code, .rdf for Oracle Reports, or .sql for PL/SQL. Do not use reserved words or special characters. See <a href="deftasks.htm#CHDBIJAH">"Naming Objects"</a> for further information.</p>
</li>
<li>
<p><span class="bold">Description</span>. See <a href="deftasks.htm#CHDIHBBC">"Creating and Using Object Descriptions"</a>.</p>
</li>
<li>
<p><span class="bold">File Type</span>. Select the file type from the list. The choices vary depending on the Program Type. For an explanation, see <a href="#BABGIHIB">"Defining SAS Programs"</a> or <a href="#BABGHJBI">"Defining Oracle Reports Programs"</a>. PL/SQL Programs' Source Code must have a SQL file type.</p>
</li>
<li>
<p><span class="bold">Sharable</span>. Select <span class="bold">Yes</span> to make the Source Code definition available for reuse. See <a href="#CHDCAAJF">"Creating a PL/SQL Package Storage Program"</a> and <a href="#BABDFCHA">"Creating a SAS Macro Catalog"</a> for information about sharable Source Code definitions.</p>
<p>Depending on your company's validation policies you may choose not to set the <span class="bold">Sharable</span> flag to <span class="bold">Yes</span> until you have fully tested and validated the Source Code. You can change the setting at any time in the Source Code subtab by selecting the Source Code and clicking either <span class="bold">Set Sharable</span> or <span class="bold">Set Not Sharable</span>.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot set any SAS Macro Catalog or SAS Format Catalog Source Code instance that points directly to a Program definition as Sharable.</div>
</li>
<li>
<p>Enter additional fields specific to each Program type:</p>
<ul>
<li>
<p><span class="bold">SAS File Reference Name</span>. If the Program is of type SAS, you may need to enter a SAS File Reference Name:</p>
<ul>
<li>
<p>The first Source Code you create of type Program is automatically created as the Program's primary Source Code. The SAS File Reference Name value defaults to <code dir="ltr">MAINPRG</code> and you cannot change it. If you later set another Source Code as primary, the system automatically changes its SAS File Reference Name to MAINPRG and changes the original primary Source Code's SAS File Reference Name to the Source Code instance name, truncated to 8 characters.</p>
</li>
<li>
<p>If the Source Code is a secondary Source Code that is not shared from another Source Code, the value defaults to the Source Code's name, truncated to 8 characters. You can change this value.</p>
</li>
<li>
<p>If the Source Code is shared from another Program, the SAS File Reference Name defaults from the shared Source Code and you cannot change it.</p>
</li>
<li>
<div class="infobox-note">
<p class="notep1">Note:</p>
In cases where the SAS File Reference Name value defaults, if there are two names with the same value, the system truncates the second one by one character and appends <code dir="ltr">1</code> (or increments the number if there are three or more).</div>
</li>
</ul>
</li>
<li>
<p><span class="bold">Oracle Package Name</span>. If the Program is of type PL/SQL, enter a package name. The package name must be unique within the Program. The package name must match the package name in the actual PL/SQL source code.</p>
</li>
<li>
<p><span class="bold">Oracle Procedure Name</span>. If the Program is of type PL/SQL, enter a procedure name. The procedure name must match the procedure name in the actual PL/SQL source code.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the Program is of type PL/SQL and you are defining the primary Source Code, you must enter both a package name and a procedure name.</div>
</li>
</ul>
</li>
<li>
<p>Write or upload the actual source code. Do one of the following:</p>
<ul>
<li>
<p>For text-based source code files (PL/SQL and SAS), write code directly in the Source Code Editor box.</p>
</li>
<li>
<p>If a source code file that fits your needs already exists on your PC or network, click the <span class="bold">Upload</span> button to look for and select the file.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For Informatica Programs, you must only upload existing XML files that contain Informatica mappings and workflows.</div>
</li>
<li>
<p>Click <span class="bold">Launch IDE</span> to open the development environment. Write source code there to use in the Program, then upload the source code file to the Source Code definition in Oracle LSH.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Before you can use the <span class="bold">Launch IDE</span> button you must install the Program. To make the Program installable you must either create and map at least one Table Descriptor or add one Source Code object (Steps 1 and 2 above). For more information see <a href="#BABIBAGJ">"Installing Program Instances"</a>.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are using SAS in a connected mode and the SAS development environment does not open when you click <span class="bold">Launch IDE</span>, you may need to define services for the environment and start Oracle LSH Distributed Processes Server code in the same location. See "Stopping and Starting Services and Queues" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub System Administrator's Guide</span></span>.
<p>If you are using SAS in Disconnected mode, SAS does not open when you click Launch IDE. Instead, Oracle LSH puts the required data set files on your personal computer and displays a message giving the location. You must then open SAS locally and access the files as necessary.</p>
<p>See <a href="#BABGHAAC">"Connecting to SAS"</a> for further information.</p>
</div>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Save and Continue</span> to save your work. The system saves your work in the database and returns to the Program instance screen.</p>
<p>By default the system sets the first Source Code you create for a Program to Primary. If you want to specify that a different Source Code is the primary one&mdash;the one executed first&mdash;in the Source Code subtab check the Select check box of the Source Code you want to set as Primary and click <span class="bold">Set As Primary</span>. The system changes the Primary setting for that Source Code to Yes, and for the previous primary Source Code to No.</p>
</li>
<li>
<p>Validate both the definition and the instance according to your company's policies.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BABIAEBJ"></a>
<div id="LSHDG527" class="sect3">
<h4 class="sect3">Creating an Instance of an Existing Source Code Definition</h4>
<p>If you use an existing Source Code as a definition source, its contents are already defined. However, you must specify whether or not to use a static reference; see <a href="#BABBIDGC">"Creating and Using Static Reference Source Code"</a> for information.</p>
<p>See <a href="deftasks.htm#CHDGAIDJ">"Creating an Instance of an Existing Definition"</a> for general instructions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the Program containing the Source Code or the Source Code itself is ever deleted, the Programs that contain instances of the deleted Source Code will no longer compile.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABGHFHG"></a>
<div id="LSHDG529" class="sect2">
<h3 class="sect2">Calling APIs from Source Code</h3>
<p>Oracle publishes public PL/SQL APIs that allow you to do many things programmatically that you can do through the user interface, including creating, modifying, and installing objects. You can call these APIs within the context of defined Oracle LSH Programs without any extra security. Refer to the <span class="italic">Oracle Life Sciences Data Hub Application Programming Interface Guide</span> for details.</p>
<p>For an example of calling a PL/SQL API from a SAS Program, see <a href="#BABDCCJD">"Calling an API to Capture Output Parameter Values"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABBIDGC"></a>
<div id="LSHDG530" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating and Using Static Reference Source Code</h3>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABHFIBC">About Static Reference Source Code</a></p>
</li>
<li>
<p><a href="#BABEJCHC">Creating a Source Code for Use as a Static Reference</a></p>
</li>
<li>
<p><a href="#BABGGHJD">Using Static Reference Source Code</a></p>
</li>
</ul>
<a id="BABHFIBC"></a>
<div id="LSHDG531" class="sect3">
<h4 class="sect3">About Static Reference Source Code</h4>
<p>You can write source code (PL/SQL package or SAS format) that is intended for reuse in other Programs. If that Source Code is located in an installed Program instance&mdash;usually because it reads data such as lookup values from an Oracle LSH Table instance&mdash;you must specify a static reference when you create an instance of the Source Code in another Program.</p>
<p>For example, if you want to supply an Investigator ID and return an Investigator Name, you can do either of the following:</p>
<ul>
<li>
<p>Create a Table Descriptor in your Program and map it to a Table instance that includes columns for both Investigator ID and Name and reference that Table Descriptor in the Source Code you create for your Program. This method does not involve a static reference Source Code.</p>
</li>
<li>
<p>Reference a sharable Source Code in another Program instance whose purpose is to take an Investigator ID and return the corresponding Investigator Name. The Program instance that contains this sharable Source Code must have a Table Descriptor that is mapped to a Table instance that includes columns for both Investigator ID and Name. This is a static reference Source Code.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle LSH does not support creating a static reference to Source Code contained in a Program instance inside a Report Set.</div>
</div>
<!-- class="sect3" -->
<a id="BABEJCHC"></a>
<div id="LSHDG532" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Creating a Source Code for Use as a Static Reference</h4>
<p>If you are creating a PL/SQL Program or SAS Format Catalog to store static reference Source Code definitions, you must create an instance of the Program and map one of its source Table Descriptors to each Table instance required to be read, and install both the Program instance and the Table instance. Do not define snapshot labels for these Table instances and do not set their Blinding Flag to Yes.</p>
</div>
<!-- class="sect3" -->
<a id="BABGGHJD"></a>
<div id="LSHDG533" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using Static Reference Source Code</h4>
<p>In the Program in which you want to use the Source Code:</p>
<ol>
<li>
<p>Add a Source Code object by creating an instance of an existing Source Code definition. The Static Reference attribute appears.</p>
</li>
<li>
<p>Select <span class="bold">Yes</span> for Static Reference.</p>
</li>
<li>
<p>Click the Search icon for the Definition Source field.</p>
<p>The system then searches for installed Program instances rather than Program definitions, because the Program containing the static reference Source Code must be mapped to the necessary installed Table instance. Also, because only one version of a Program instance can be installed at any given time, your Program always references the current installed version of the static reference Source Code's Program instance.</p>
</li>
<li>
<p>Enter the Domain, Application Area, and Work Area where the Program instance is located and select the Program instance.</p>
</li>
<li>
<p>Apply.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BACFIBFF"></a>
<div id="LSHDG534" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Upgrading Source Code And Undoing Source Code Upgrades</h3>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABGBBBD">Upgrading a Single Source Code Instance</a></p>
</li>
<li>
<p><a href="#BABCBGEJ">Upgrading Multiple Source Code Instances</a></p>
</li>
<li>
<p><a href="#BABHFGCI">Undoing Source Code Instance Upgrades</a></p>
</li>
</ul>
<p>If the Source Code definition your Source Code instance is pointing to is not the most current version, Oracle LSH sets the <span class="bold">Latest Version</span> field to <span class="bold">No</span> and allows you to view the latest version and upgrade to it if you want to; see <a href="#BABGBBBD">"Upgrading a Single Source Code Instance"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot upgrade a Source Code instance whose definition is statically referenced. See <a href="#BABBIDGC">"Creating and Using Static Reference Source Code"</a>.</div>
<p>You can also undo an upgrade or choose a noncurrent version of a Source Code definition at any time; see <a href="#BABHFGCI">"Undoing Source Code Instance Upgrades"</a>.</p>
<p>Working in the Source Code definition, you can upgrade all instances to the latest version, using the <span class="bold">Upgrade All Instances</span> button or the <span class="bold">Actions</span> drop-down list.</p>
<p>If you created a Source Code instance along with a definition, then your Source Code definition and instance are synchronized unless at some point you or someone else manually pointed the Source Code instance to another version of the definition; see <a href="#BABHFGCI">"Undoing Source Code Instance Upgrades"</a>.</p>
<p>If you created a Source Code instance that points to an existing Source Code definition, any changes that have been made to the Source Code definition after you created the Source Code instance are not reflected in the instance and <span class="bold">Latest Version</span> is set to <span class="bold">No</span>.</p>
<p>For Source Code instances that point to an existing Source Code definition, you can see a hyperlink to the Source Code definition that the Source Code instance points to, in the instance properties section of the Source Code screen.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A Source Code instance and the Source Code definition it points to, both always share the same screen. Therefore, in this section <span class="bold">Source Code screen</span> refers to the screen that shows Source Code instance properties in the upper portion and Source Code definition properties in the lower portion of the screen.</div>
<a id="BABGBBBD"></a>
<div id="LSHDG535" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Upgrading a Single Source Code Instance</h4>
<p>You can upgrade a single Source Code instance in one of the following ways:</p>
<ul>
<li>
<p><a href="#BABJDCHD">Upgrade to Latest</a> button. This method allows upgrade to the latest version of the Source Code definition only.</p>
</li>
<li>
<p><a href="#BABHEDBD">Upgrade Instance</a> from the <span class="bold">Actions</span> drop-down list. This method allows changing to any version of the Source Code definition.</p>
</li>
</ul>
<p><a id="BABJDCHD"></a><a id="LSHDG536"></a><span class="subhead3">Upgrade to Latest&nbsp;</span>Use the <span class="bold">Upgrade to Latest</span> button to upgrade the Source Code instance to the latest version of its definition.</p>
<p>This button is not available if:</p>
<ul>
<li>
<p>The Source Code definition to which you want to upgrade is not checked in.</p>
</li>
<li>
<p>The Program definition containing the Source Code instance you want to upgrade is not checked out, or is checked out by someone else.</p>
</li>
<li>
<p>The Source Code instance is already pointing to the latest version of its Source Code definition (<span class="bold">Latest Version</span> is set to <span class="bold">Yes</span>).</p>
</li>
<li>
<p>The Source Code Definition is a static reference Source Code; see <a href="#BABBIDGC">"Creating and Using Static Reference Source Code"</a>.</p>
</li>
<li>
<p>You do not have Modify privileges on the Source Code instance</p>
</li>
</ul>
<p>To upgrade a Source Code instance to the latest version of its definition using the Upgrade to Latest button, do the following:</p>
<ol>
<li>
<p>Navigate to the Program instance or definition that contains the Source Code instance you want to upgrade.</p>
</li>
<li>
<p>In the Source Code subtab, click the Source Code's hyperlink in the Name column. The Source Code screen opens.</p>
</li>
<li>
<p>If you want to look at the latest version of the Source Code definition before upgrading, click <span class="bold">View Latest</span> in the Definition Properties section of the screen.</p>
<p>To upgrade, click <span class="bold">Upgrade to Latest</span>. You receive a confirmation message.</p>
</li>
<li>
<p>In the confirmation message, click <span class="bold">Yes</span>. The system upgrades the Source Code instance to the latest version of its source definition.</p>
</li>
</ol>
<p><a id="BABHEDBD"></a><a id="LSHDG537"></a><span class="subhead3">Upgrade Instance&nbsp;</span>Use the <span class="bold">Upgrade Instance</span> item from the <span class="bold">Actions</span> drop-down list on the Source Code screen, to upgrade the Source Code instance to any version of its definition.</p>
<p>This option is not available (the <span class="bold">Go</span> button is grayed out) if:</p>
<ul>
<li>
<p>The Source Code definition to which you want to upgrade is not checked in.</p>
</li>
<li>
<p>The Program definition containing the Source Code instance you want to upgrade is not checked out, or is checked out by someone else.</p>
</li>
<li>
<p>The Source Code Definition is a static reference Source Code; see <a href="#BABBIDGC">"Creating and Using Static Reference Source Code"</a>.</p>
</li>
<li>
<p>You do not have Modify privileges on the Source Code instance.</p>
</li>
</ul>
<p>To point a Source Code instance to any version of its definition, do the following.</p>
<ol>
<li>
<p>Navigate to the Program instance or definition that contains the Source Code instance you want to upgrade.</p>
</li>
<li>
<p>In the Source Code subtab, click the Source Code's hyperlink in the Name column. The Source Code screen opens.</p>
</li>
<li>
<p>If you want to look at the latest version of the Source Code definition before upgrading, click <span class="bold">View Latest</span> in the Definition Properties section of the screen.</p>
<p>To change the underlying definition to a different version, select <span class="bold">Upgrade Instance</span> from the <span class="bold">Actions</span> drop-down list.</p>
</li>
<li>
<p>Click <span class="bold">Go</span>. The system displays the available versions of the Source Code definition in the lower portion of the screen.</p>
<p>For each version of the definition, the system displays the following information:</p>
<ul>
<li>
<p><span class="bold">Source Code Version</span>. The version number of the Source Code definition version.</p>
</li>
<li>
<p><span class="bold">Upgrade</span>. The <span class="bold">Upgrade</span> icon is grayed out if the current Source Code instance already points to that Source code definition version, or if that Source Code definition version is currently checked out (someone is currently modifying it).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If someone is currently creating a new version, the new version is not displayed at all.</div>
</li>
<li>
<p><span class="bold">Program Name</span>. The name of the Program definition that owns the Source Code definition. This remains the same for one Source Code definition.</p>
</li>
<li>
<p><span class="bold">Program Version</span>. The version number of the Program that owns that Source Code definition version.</p>
</li>
<li>
<p><span class="bold">Program Validation Status</span>. The validation status of the Program that owns that Source Code definition version.</p>
</li>
<li>
<p><span class="bold">Program Version Label</span>. The label associated with the Program definition version, if any.</p>
</li>
<li>
<p><span class="bold">Program Checked Out By</span>. If the Program definition version is checked out, the system displays the username of the person who checked it out. You cannot upgrade to a version that is checked out, and only the person who checked it out can check it in.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
People with Checkin Administrator privileges can check in objects checked out by other users.</div>
</li>
</ul>
</li>
<li>
<p>Click the icon in the <span class="bold">Upgrade</span> column for the version to which you want to point the instance.</p>
<p>The system upgrades the Source Code instance and grays out its row, as it now points to the version you selected.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BABCBGEJ"></a>
<div id="LSHDG538" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Upgrading Multiple Source Code Instances</h4>
<p>A Source Code instance may point to a Source Code definition or, in the case of SAS Source Code instances, to a SAS Macro or Format Catalog Program definition. You can upgrade Source Code instances from a Source Code screen or in the case of SAS Source Code instances, from a Program instance's Properties screen.</p>
<p>As with other object types, you can go to a version of a definition and upgrade all the instances that point to it.</p>
<p>If the Source Code definition is a SAS Macro or Format Catalog, follow the instructions for upgrading Program and other object definitions at <a href="deftasks.htm#BEIFHFAA">"Upgrading One or More Instances from the Definition"</a>.</p>
<p><a id="LSHDG539"></a><span class="subhead3">From the Source Code definition screen.&nbsp;</span>To upgrade one or more Source Code instances from a Source Code definition, do the following:</p>
<ol>
<li>
<p>Navigate to the Program that contains the Source Code definition whose instances you want to upgrade.</p>
</li>
<li>
<p>Check in the Program definition if it is not already checked in.</p>
</li>
<li>
<p>In the Source Code subtab, click the Source Code's hyperlink in the Name column. The Source Code screen opens.</p>
</li>
<li>
<p>Click the <span class="bold">Upgrade All Instances</span> button in the Source Code definition properties section of the screen.</p>
</li>
<li>
<p>The system opens the Upgrade Instances screen with all instances of the Source Code definition displayed.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the check box next to an instance is grayed out, then either the Program instance that owns it is checked out by someone else, or the Source Code instance already points to the latest Source Code definition.</div>
<p>For each instance, the system displays the following information:</p>
<ul>
<li>
<p><span class="bold">Program Name</span>. The Program name that contains the Source Code instance.</p>
</li>
<li>
<p><span class="bold">Program Version</span>. The version number of the Program that contains the Source Code instance.</p>
</li>
<li>
<p><span class="bold">Program Version Label</span>. The version label of the Program that contains the Source Code instance.</p>
</li>
<li>
<p><span class="bold">Program Validation Status</span>. The validation status of the Program that contains the Source Code instance.</p>
</li>
<li>
<p><span class="bold">Program Checked Out By</span>. The name of the person who has checked out the Program definition, parent to the Source Code instance. If a person other than you has the Program checked out, then you cannot upgrade the Source Code instance: the check box next to it is grayed out.</p>
</li>
<li>
<p><span class="bold">Source Code Definition Version</span>. The version number of the Source Code definition to which that instance currently points.</p>
</li>
<li>
<p><span class="bold">Source Code Name</span>. The name of the Source Code instance to which that instance currently points.</p>
</li>
<li>
<p><span class="bold">SAS File Reference Name</span>. The SAS file reference name, if any.</p>
</li>
<li>
<p><span class="bold">Container</span>. The Domain &gt; Application Area hierarchy for the instance.</p>
</li>
</ul>
</li>
<li>
<p>Select one or more instances to upgrade. You can use the <span class="bold">Select All</span> and <span class="bold">Select None</span> functions and/or select or deselect instances individually by checking or unchecking their <span class="bold">Select</span> checkbox. Instances that already point to the current version of the definition cannot be selected.</p>
</li>
<li>
<p>Click <span class="bold">Upgrade</span>. The system changes the source definition of the selected instances to the version of the definition where you are working.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the <span class="bold">Upgrade</span> button is not enabled, then the Source Code definition you want to upgrade to, is not checked in. To check in that Source Code definition, you must check in the Program definition that owns it.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
The newly upgraded version of the definition is not necessarily the latest version. It is the version you are currently working on. To go to the latest Source Code definition version, click the <span class="bold">View Latest</span> button from the Source Code definition properties section of the Source Code screen.</div>
</li>
</ol>
<p><a id="BABHFHHD"></a><a id="LSHDG540"></a><span class="subhead3">From the Program Definition screen.&nbsp;</span>To upgrade multiple Source Code instances that refer to a Program definition, do the following:</p>
<ol>
<li>
<p>Navigate to the Program definition in the Applications tab.</p>
</li>
<li>
<p>Check in the definition if it is not already checked in.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down list, select <span class="bold">Upgrade All Instances</span> and click <span class="bold">Go</span>. The system opens the Upgrade Instances screen displaying all Program instances and Source Code instances that point to the Program definition.</p>
</li>
<li>
<p>From the <span class="bold">View</span> drop-down list, select <span class="bold">Program Definition (Source Code Instances)</span>. The system refreshes the screen and lists only the Source Code instances that point to this Program definition.</p>
</li>
<li>
<p>For each instance, the system displays the following information:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In the following, <span class="bold">Object</span> refers to the Program definition that owns the Source Code instance. If you are viewing this information with the selection <span class="bold">Program Instance</span> or <span class="bold">Both</span> in the <span class="bold">View</span> drop-down list (see point 4 above), then <span class="bold">Object</span> refers to a Program instance, where it is a Program instance that is referring to this Program definition.</div>
<ul>
<li>
<p><span class="bold">Object Name</span>. The name of the Program definition that contains the Source Code instance.</p>
</li>
<li>
<p><span class="bold">Object Type</span>. The type of the object. See Note above.</p>
</li>
<li>
<p><span class="bold">Object Version</span>. The version number of the Program definition that contains the Source Code instance.</p>
</li>
<li>
<p><span class="bold">Version Label</span>. The version label of the Program definition that contains the Source Code instance.</p>
</li>
<li>
<p><span class="bold">Installed Version</span>. This field is not applicable for Source Code instance upgrades because a Source Code instance is referred to by its owning Program definition and Oracle LSH object definitions cannot be installed. This field refers to the most recent version of the Program instance that was successfully installed. It is relevant only for Program instances pointing to this Program definition.</p>
</li>
<li>
<p><span class="bold">Validation Status</span>. The Program definition's validation status.</p>
</li>
<li>
<p><span class="bold">Checked Out By</span>. The name of the person who has checked out the Program definition, parent to the Source Code instance. If a person other than you has the Program checked out, then you cannot upgrade the Source Code instance that points to it: the check box next to it is grayed out.</p>
</li>
<li>
<p><span class="bold">Definition Version</span>. The version number of the definition to which the instance currently points.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In the following, <span class="bold">Parent</span> refers to the <span class="bold">Object's</span> parent. So for Source Code instances, it is the parent of the Program definition that owns the Source Code. That is, parent of a Program definition - such as an Application Area.</div>
</li>
<li>
<p><span class="bold">Definition Validation Status</span>. This field does not apply to Source Code instances. It is the validation status of the Program instance that points to a version of the current Program definition.</p>
</li>
<li>
<p><span class="bold">Parent Name</span>. The name of the Parent object.</p>
</li>
<li>
<p><span class="bold">Parent Object Type</span>. The type of object that contains the Program definition that owns the Source Code instance.</p>
</li>
<li>
<p><span class="bold">Parent Status</span>. The parent's installation status.</p>
</li>
<li>
<p><span class="bold">Parent Validation Status</span>. The parent's validation status.</p>
</li>
<li>
<p><span class="bold">Source Code Name</span>. The name of the Source Code instance.</p>
</li>
<li>
<p><span class="bold">SAS File Reference Name</span>. The SAS file reference name, if any.</p>
</li>
<li>
<p><span class="bold">Container</span>. The Domain &gt; Application Area hierarchy for the Program definition that owns the Source Code instance.</p>
</li>
</ul>
</li>
<li>
<p>Select one or more instances you want to upgrade. You can use the <span class="bold">Select All</span> and <span class="bold">Select None</span> functions and/or select or deselect instances individually by checking or unchecking their <span class="bold">Select</span> checkbox. Instances that already point to the current version of the definition cannot be selected.</p>
</li>
<li>
<p>Click <span class="bold">Upgrade</span>. The system changes the source definition of the selected instances to the new version of the definition.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When upgrading a Source Code instance, you are actually upgrading the Program definition that owns the Source Code instance. However, for the sake of readability, the document describes operations on the Source Code instance. Please remember that you cannot check in or check out a Source Code instance, you can perform these operations on only the Program definition that owns it.</div>
</li>
</ol>
<p>Note the following:</p>
<ul>
<li>
<p>The Upgrade button is grayed out if the Program definition you want to upgrade to, is not checked in. Click <span class="bold">Return</span> to go back to the previous screen and check in the definition first.</p>
</li>
<li>
<p>If a version of the Source Code Instance already points to the Program definition you want to upgrade it to, then its row is grayed out.</p>
</li>
<li>
<p>If the latest version of the Source Code instance is checked out, then all older versions are grayed out.</p>
<p>If you want to upgrade an older version of the Source Code instance, then you should check in the latest Program definition that owns the Source Code instance and return to this screen. Older version are now available for upgrading. When you select an older version and click <span class="bold">Upgrade</span>, the system checks out the Source Code instance, creates a new version and then upgrades it. The system refreshes the screen with this information.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BABHFGCI"></a>
<div id="LSHDG541" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Undoing Source Code Instance Upgrades</h4>
<p>You undo a Source Code instance upgrade by pointing the Source Code instance to an earlier version of the Source Code definition than the one you upgraded the Source Code instance to.</p>
<p>You can undo Source Code upgrades for a single Source Code instance or for multiple Source Code instances.</p>
<p><a id="LSHDG542"></a><span class="subhead3">Single Source Code instance&nbsp;</span>To undo a Source Code instance upgrade, see <a href="#BABHEDBD">"Upgrade Instance"</a>.</p>
<p><a id="LSHDG543"></a><span class="subhead3">Multiple Source Code instances&nbsp;</span>To undo multiple Source Code instances, see <a href="#BABCBGEJ">"Upgrading Multiple Source Code Instances"</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGGGFH"></a>
<div id="LSHDG544" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining Parameters</h2>
<p>Parameters enable you to use the same Source Code definition to achieve multiple results, controlling the processing flow differently under different conditions, or processing different data in different executions of the same Program. For example, you can use the same Program to process data for different studies by defining a Parameter for the study name.</p>
<p>If you use a parameter in your source code internally only, you do not need to create a Parameter definition for it. However, if you want the Parameter to be settable at runtime or in the Execution Setup definition, you must define it. When you define a Parameter you can give it a default value and/or a list of values. See <a href="vars.htm#BACHGJBH">"Defining Parameters"</a> for further information.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Programs of BI Publisher adapter type contain predefined Parameters that you should not modify. See <a href="#CHDFHAHE">"Setting Oracle BI Publisher Program Parameters"</a>.</div>
</div>
<!-- class="sect1" -->
<a id="BABJEDHC"></a>
<div id="LSHDG545" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining Planned Outputs</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABIIJDF">About Planned Outputs</a></p>
</li>
<li>
<p><a href="#BABIJCAG">Defining a Planned Output</a></p>
</li>
</ul>
<a id="BABIIJDF"></a>
<div id="LSHDG546" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Planned Outputs</h3>
<p>A Planned Output is a placeholder for a file to be generated by a Program during execution. There are three types: Primary, Secondary, and Error File. You can define any number of any type of Planned Output.</p>
<p>Planned Outputs are not required; you can create Programs whose purpose is to transform and write data to a Table rather than to produce a report.</p>
<p>You must create a different Planned Output for each file you want to generate. If you want to create the same report in two file types, define a Planned Output for each of them (in that case you might also want to use a Parameter to determine which one to produce at runtime).</p>
<p>The source code for the Program must specify how to create each Planned Output defined in the Program and refer to each one by the name appropriate to the development environment (for example, Oracle or SAS).</p>
<p><a id="BABHJADB"></a><a id="LSHDG547"></a><span class="subhead3">Primary Output&nbsp;</span>A primary output is a report on data generated during the successful execution of the Program. The purpose of the Program is to produce one or more primary outputs (and may also transform data). You must write source code that produces the report you want, and refer to the primary Planned Output by name in the source code.</p>
<p>You can define more than one primary output for a single Program. For example, you could create two primary Planned Outputs to present the same information in two ways, such as a table and a graph; or you could divide the data results into two or more categories for presentation, with a Planned Output for each category.</p>
<p><a id="LSHDG548"></a><span class="subhead3">Secondary Output&nbsp;</span>A secondary output is one that is not defined as either Primary or Error File; for example, a log file. The execution engine produces a log file for every execution of an Oracle LSH Program, but you may or may not need to define a Planned Output as a placeholder for the log file:</p>
<ul>
<li>
<p>The system automatically creates one secondary Planned Output for each SAS-type Source Code definition, to hold the log file. SAS log files therefore appear in the Reports tab navigation tree.</p>
</li>
<li>
<p>You can view the log file for Programs of all Oracle types from the Job screen. If you want to have the log file appear as an entry in the Reports tab navigation tree as well, you must create a secondary Planned Output for it.</p>
</li>
<li>
<p>For Oracle LSH Informatica Programs, defining Planned Outputs for the log files has no effect. You can see the log files through the job. The Oracle LSH Informatica Program generates an unexpected output for each log file at the time of execution, but does not fail on account of this.</p>
</li>
</ul>
<p><a id="BABGGEBJ"></a><a id="LSHDG549"></a><span class="subhead3">Error File&nbsp;</span>An Error File Planned Output is a file generated automatically by the system if a Program execution fails to generate a primary output defined as Required. To define an Error File Planned Output you must also define at least one primary Planned Output as Required in the same Program definition.</p>
<p>The very existence of an error file as an output indicates a failure.</p>
<p><a id="LSHDG550"></a><span class="subhead3">Classifying Planned Outputs&nbsp;</span>You can classify Planned Outputs. The system assigns the same classification values to the actual output when the Program generates it. Users find report outputs by their classifications in the Reports tab of the Oracle LSH user interface. See <a href="#BABJEDHC">"Defining Planned Outputs"</a> and <a href="deftasks.htm#CHDCBGEI">"Classifying Outputs"</a>.</p>
<p><a id="BABECGIH"></a><a id="LSHDG551"></a><span class="subhead3">Report Sets and Planned Outputs&nbsp;</span>To use a Planned Output as a report in a Report Set, you must create an instance of the Program that generates the Planned Output in a Report Set Entry in the Report Set.</p>
<p>All the primary Planned Outputs generated by the Program are included in the Report Set Entry, in the order in which they are displayed in the Program. If there are more than one primary Planned Outputs and you want to be able to choose which one(s) to include, you should create the Program with an input Parameter for this purpose.</p>
<p>Secondary outputs and error files are not included in the Report Set's table of contents.</p>
<p>The Report Set produces the output in the file type you specify as part of the Planned Output definition. If you have Publishing Light installed and want to use those features for this Report, you must specify a file type of PDF.</p>
</div>
<!-- class="sect2" -->
<a id="BABIJCAG"></a>
<div id="LSHDG553" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Defining a Planned Output</h3>
<p>To define a Planned Output:</p>
<ol>
<li>
<p>In the Planned Output subtab of a Program, click <span class="bold">Add</span>. The system displays the Planned Output For screen.</p>
</li>
<li>
<p>Enter values in the following fields:</p>
<ul>
<li>
<p><span class="bold">Name</span>. See <a href="deftasks.htm#CHDBIJAH">"Naming Objects"</a>.</p>
</li>
<li>
<p><span class="bold">Title</span>. Enter text or accept the default value. The system automatically creates the default from the text you entered in the Name field.</p>
</li>
<li>
<p><span class="bold">Description</span>. See <a href="deftasks.htm#CHDIHBBC">"Creating and Using Object Descriptions"</a>.</p>
</li>
<li>
<p><span class="bold">File Name</span>. You must define a File Name for each defined Planned Output of a Program of any type. For most technology types it must include a file extension. The system converts any spaces you enter to underscores (_). The system uses the File Name to match the actual generated output to the corresponding Planned Output in order to classify the actual output file.</p>
<p>In a non-SAS Program, refer to the output as the File Name in your source code. In a SAS Program, make the File Name the same as the File Reference Name plus a file extension; for example, if the File Reference Name is <code dir="ltr">out1</code>, make the File Name <code dir="ltr">out1.pdf</code>.</p>
</li>
<li>
<p><span class="bold">Primary</span>. If <span class="bold">Yes</span>, indicates that the output file will contain a report on data generated by the Program during execution.</p>
</li>
<li>
<p><span class="bold">Error if generated</span>. If <span class="bold">Yes</span>, the system generates an error if Program execution fails to generate the output.</p>
</li>
<li>
<p><span class="bold">Error if not generated</span>. If <span class="bold">Yes</span>, the system generates this output only if Program execution fails to generate a Primary Planned Output. Its presence is an indication that the Program failed. You must write the source code to generate the text of the file. Note: You cannot define an Error file as Required.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You do not need to define a Planned Output for the .log file.</div>
</li>
<li>
<p><span class="bold">File Reference Name</span>. You must define a File Reference Name for each Planned Output of a SAS Program. It should conform to SAS rules. You should also define a File Reference Name if you plan to use an instance of the Program in a Report Set and to pass Report Set Entry properties' values to the Program. Oracle recommends making Planned Output File Reference Names unique within a Program, but this is not enforced. See <a href="rsets.htm#BABJJBIC">"Passing Report Set Entry Values to and from Programs"</a>.</p>
<p>The File Reference Name defaults to out1 for the first Planned Output, out2 for the second, and so on.</p>
</li>
</ul>
</li>
<li>
<p>Click <span class="bold">Apply</span>. The system saves the changes and returns you to the Program Instance screen.</p>
</li>
</ol>
<a id="BABBBEGI"></a>
<div id="LSHDG554" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Planned Output Classification</h4>
<p>You must define default classification values for the Planned Output. The system applies these classifications to the actual output when it is generated by the execution of the Program. The classifications you define for a Planned Output determine who can see the actual output when it is generated, and where it appears in the navigation tree in the Reports tab in Oracle LSH.</p>
<p>For further information, see <a href="deftasks.htm#CHDCBGEI">"Classifying Outputs"</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHIAIJ"></a>
<div id="LSHDG560" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining PL/SQL Programs</h2>
<p>This section includes information on:</p>
<ul>
<li>
<p><a href="#BABJAHEG">Writing Primary Source Code in PL/SQL</a></p>
</li>
<li>
<p><a href="#BABFEFGI">Testing PL/SQL Source Code</a></p>
</li>
<li>
<p><a href="#CHDCAAJF">Creating a PL/SQL Package Storage Program</a></p>
</li>
<li>
<p><a href="#BABJGEAI">Using a Sharable PL/SQL Package</a></p>
</li>
<li>
<p><a href="#BABIBCDF">Compiling and Executing a PL/SQL Program</a></p>
</li>
<li>
<p><a href="#BABBAEJD">Manipulating Documents through a PL/SQL Program</a></p>
</li>
</ul>
<p>See also: <a href="#BACGEAJG">Setting Up Oracle SQL Developer or SQL*Plus as an IDE</a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Each PL/SQL Source Code definition within a particular Program must have a unique Oracle package name.</div>
<a id="BABJAHEG"></a>
<div id="LSHDG561" class="sect2">
<h3 class="sect2">Writing Primary Source Code in PL/SQL</h3>
<p>When a Program is executed, the system launches its primary source code file. You must use a specific syntax at the beginning of the PL/SQL source code and also write the source code in such a way that it calls every secondary Source Code instance you define and refers to all defined subcomponents by their Oracle name.</p>
<p><a id="BABBDDBB"></a><a id="LSHDG562"></a><span class="subhead3">Required Syntax: Must Match Definitions&nbsp;</span>In the primary Source Code of a PL/SQL Program, the source code must begin by providing the Oracle Package name and Oracle Procedure name defined for the Source Code, and declare all Parameters defined in the Program with their data type, as shown in the following example, where the first Parameter is a number and the second Parameter is a varchar2:</p>
<div id="LSHDG563" class="example">
<p class="titleinexample"><a id="CIHGAGDF"></a>Example 5-1 Required Beginning of PL/SQL Code in a Primary Source Code File</p>
<pre dir="ltr">
create or replace package <span class="italic">PACKAGE_NAME</span> asprocedure <span class="italic">PROCEDURE_NAME</span> (<span class="italic">parameter_1</span>  number,<span class="italic">parameter_2</span>   varchar2);end <span class="italic">PACKAGE_NAME</span>;/create or replace package body <span class="italic">PACKAGE_NAME</span> asprocedure MAIN (<span class="italic">parameter_1</span> number,         <span class="italic">parameter_2</span>  varchar2) isbegin
</pre></div>
<!-- class="example" -->
<p><a id="LSHDG564"></a><span class="subhead3">Required Security Syntax&nbsp;</span>There is a potential security hole in PL/SQL Programs because they can be executed directly in the database outside of Oracle LSH security.</p>
<p>Oracle LSH can prevent this if you add a specific code template. You should add this to the beginning of the initialization block of your primary PL/SQL source code, as shown below. When you first install the Program, the system compiles the PL/SQL source code and inserts the actual Program ID generated by the system for the Program. At runtime, the system checks that a database account corresponding to the Program ID has been created. The service instance creates this database account to allow execution of the PL/SQL packages. If the account exists, then the job has been created through proper channels and is allowed to proceed. If it has not, the system does not allow execution to proceed.</p>
<p>If you do not include the recommended code template, when you install the Program, the system looks for either <code dir="ltr">END;</code> or <code dir="ltr">END</code> <code dir="ltr"><span class="codeinlineitalic">package_name;</span></code> beginning at the end of the source code, and inserts the security code at that point. However, at runtime the Program is allowed to run up until that point. Any statements that appear in the initialization block before the security code are allowed to execute.</p>
<p>Add the following template exactly as appears:</p>
<pre dir="ltr">
BEGIN  /*Package initialization here*/
/* LSH GENERATES SECURITY CODE HERE, DO NOT REMOVE THIS COMMENT. */
/* Define your package initialization here */
NULL;
</pre>
<p>Insert the above template into the package initialization block of the package body, as follows:</p>
<pre dir="ltr">
CREATE OR REPLACE PACKAGE pkg1 AS
/* define your procedures here */
PROCEDURE proc1;
END pkg1;
/
CREATE OR REPLACE PACKAGE BODY pkg1 AS
/* define your parameters here */
 
/* define your procedures here */
PROCEDURE proc1 IS
BEGIN
/* Define code here */
NULL;
END proc1;
 
<span class="bold">BEGIN  /*Package initialization here*/</span>
<span class="bold">/* LSH GENERATES SECURITY CODE HERE, DO NOT REMOVE THIS COMMENT. */</span>
<span class="bold">/* Define your package initialization here */</span>
<span class="bold">NULL;</span>
END pkg1;
</pre>
<p>The first time you install the Program, the system updates your source code by inserting the following code, including the actual program_id generated for the program by the system:</p>
<pre dir="ltr">
IF NVL(SYS_CONTEXT('CDR_RUNTIME', &lt;program-id&gt;), 'X') &lt;&gt; 'Y'
THEN
   RAISE_APPLICATION_ERROR(-20005, 'EXECUTE NOT enabled.');
END IF;
</pre>
<p><a id="LSHDG565"></a><span class="subhead3">Subcomponent References in PL/SQL&nbsp;</span>You must refer to the defined subcomponents of the Program in your PL/SQL source code as follows:</p>
<ul>
<li>
<p><span class="bold">Table Descriptors</span>. For each table you read from or write to in your source code, you must define a source or target Table Descriptor. Refer to each Table Descriptor as if it were a real database table, using its Oracle name. If the Table instance to which a Table Descriptor is mapped has a different name from the Table Descriptor, use the Table Descriptor's name, not the Table instance's.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In a PL/SQL Program a Source Code and a Table Descriptor cannot have the same Oracle name.</div>
</li>
<li>
<p><span class="bold">Secondary Source Code</span>. Refer to secondary Source Code instances by their Oracle name.</p>
</li>
<li>
<p><span class="bold">Parameters</span>. You must create a defined Parameter for each input and output Parameter you use in your primary source code, and declare them in your source code (see <a href="#BABBDDBB">"Required Syntax: Must Match Definitions"</a>). Refer to defined Parameters by their Oracle name.</p>
</li>
<li>
<p><span class="bold">Planned Outputs</span>. You must create a defined Planned Output for every output generated by the primary source code at execution, including the log file. Refer to each defined Planned Output by its File Name.</p>
</li>
</ul>
<p><a id="LSHDG566"></a><span class="subhead3">API for Ending PL/SQL Programs with a Status of Success, Warning, or Failure&nbsp;</span>Normally PL/SQL programs end with a status of Success unless there is a system failure or unhandled SQL exception. However, if you are using a Program in a Workflow, you may need to write your code so that the Program completes with a status of Warning or Failure, depending on circumstances. In a Workflow, you can use the completion status of a Program to determine which branch of activities to execute.</p>
<p>Oracle LSH ships with an API for this purpose called:</p>
<p>CDR_EXE_USER_UTILS.setCompletionStatus()</p>
<p>To call the package, enter one of the following lines of code in your source code exactly as it appears below, at the point where you want the Program to return a status of Success, Warning, or Failure:</p>
<pre dir="ltr">
CDR_EXE_USER_UTILS.setCompletionStatus(1); 
CDR_EXE_USER_UTILS.setCompletionStatus(2); 
CDR_EXE_USER_UTILS.setCompletionStatus(3); 
</pre>
<br />
CDR_EXE_USER_UTILS.setCompletionStatus(1) returns a status of Success.<br />
CDR_EXE_USER_UTILS.setCompletionStatus(2) returns a status of Warning.<br />
CDR_EXE_USER_UTILS.setCompletionStatus(3) returns a status of Failure.</div>
<!-- class="sect2" -->
<a id="BABFEFGI"></a>
<div id="LSHDG567" class="sect2">
<h3 class="sect2">Testing PL/SQL Source Code</h3>
<p>To test PL/SQL code, you must first map the Table Descriptors to the Table instances and check in and install the Program instance and all the Table instances it reads from and writes to. You can then execute the Program. If the Program writes data to tables, you can check the data; see <a href="deftasks.htm#BEIEHAAA">"Viewing Data"</a>.</p>
<p>If the Program generates a report, you can see the report in the Reports tab. You can link to the report and the log file from the Job ID link in the Job Executions section of your My Home tab.</p>
</div>
<!-- class="sect2" -->
<a id="CHDCAAJF"></a>
<div id="LSHDG568" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating a PL/SQL Package Storage Program</h3>
<p>You can create PL/SQL Programs especially for the purpose of containing PL/SQL packages as reusable (sharable) Source Code definitions, so that Definers can more easily find them. You can group logically related packages in the same container Program.</p>
<p>You can then use these sharable PL/SQL packages in Oracle LSH Programs of type PL/SQL or Oracle Report (see <a href="#BABJGEAI">"Using a Sharable PL/SQL Package"</a>).</p>
<p>To create a storage Program for PL/SQL packages:</p>
<ol>
<li>
<p>Create a Program of type PL/SQL. Give it a name and description that describe its purpose, such as "Sharable Demography Subroutines."</p>
</li>
<li>
<p>(Optional) Add a primary Source Code definition of type PL/SQL to test the packages. Set its <span class="bold">Sharable</span> flag to <span class="bold">No</span>.</p>
</li>
<li>
<p>Add the secondary Source Code definitions you want to share. You can create them and write the code from within the storage Program, or you can copy them from other Programs and paste them into the storage Program. They must all be of type PL/SQL.</p>
</li>
<li>
<p>Check in, install, and test the Program.</p>
</li>
<li>
<p>When you have tested each one, set its <span class="bold">Sharable</span> flag to <span class="bold">Yes</span>. You can change this setting without checking out the Program definition.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BABJGEAI"></a>
<div id="LSHDG569" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using a Sharable PL/SQL Package</h3>
<p>In Oracle LSH Programs of type PL/SQL or Oracle Report, you can create an instance of a Source Code definition stored in another Program and marked as Sharable. Your company may have Programs created especially for the purpose of storing sharable PL/SQL packages.</p>
<p>To use a Sharable Source Code definition:</p>
<ol>
<li>
<p>In a PL/SQL or Oracle Reports Program, create a secondary Source Code object as an instance of an existing Source Code definition (see <a href="#BABIAEBJ">"Creating an Instance of an Existing Source Code Definition"</a>).</p>
</li>
<li>
<p>When you search for the definition source, specify the PL/SQL package storage Program as the Program search criterion.</p>
</li>
<li>
<p>You can select one or more of the PL/SQL packages. The system includes the source code for each package you select in the Source Code instance of your Program.</p>
</li>
</ol>
<p>See <a href="#BACFIBFF">"Upgrading Source Code And Undoing Source Code Upgrades"</a> for information on how to upgrade Source Code instances pointing to a sharable Source Code definition.</p>
</div>
<!-- class="sect2" -->
<a id="BABIBCDF"></a>
<div id="LSHDG570" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Compiling and Executing a PL/SQL Program</h3>
<p>The system compiles PL/SQL source code when you install the Program instance. Therefore, when a Program containing PL/SQL packages is submitted for execution, the system does not need to compile its source code.</p>
</div>
<!-- class="sect2" -->
<a id="BABBAEJD"></a>
<div id="LSHDG571" class="sect2">
<h3 class="sect2">Manipulating Documents through a PL/SQL Program</h3>
<p>You can write a PL/SQL Program to retrieve BLOBs (binary large objects such as documents created using the Microsoft Office Suite) from the database and use them, for example, as a Planned Output of the Program for inclusion in a Report Set. You can also stream a BLOB into a Program.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHDCGAB"></a>
<div id="LSHDG1965" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining View Programs</h2>
<p>This section includes information on:</p>
<ul>
<li>
<p><a href="#CIHJFJAF">Creating Source Code for a View Program</a></p>
</li>
<li>
<p><a href="#CIHGIJDB">About View Table Instances</a></p>
</li>
<li>
<p><a href="#CIHFIJDB">About Table Descriptors in View Programs</a></p>
</li>
</ul>
<p>The View-type Program creates a database view of data in multiple Table instances. When you install the View Program, the system creates a Table definition, a Target Table Descriptor and a Table instance object of type View; and maps the Table instance to the target Table Descriptor.</p>
<p>The resulting View Table instance created in the Work Area schema functions like any database view and always displays current data available in the source Table instances. You can combine data from various Table instances without storing the data multiple times in the database. Other Programs, Business Areas and Data Marts can also read from the View Table instance. View-type Programs cannot be executed and therefore you cannot create them under a Report Set or Workflow.</p>
<p>The status of a View Program is 'Installable' if the View Program contains both a Source Code and a source Table Descriptor. The View Program's Launch IDE behavior is the same as that of a PL/SQL Program.</p>
<a id="CIHJFJAF"></a>
<div id="LSHDG1966" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating Source Code for a View Program</h3>
<p>When you launch the View Program, the system launches its primary source code file.</p>
<p>The following is a format of a SELECT statement that can be customized and saved as Source Code in a View Program:</p>
<pre dir="ltr">
SELECT [ hint ] [ { { DISTINCT | UNIQUE } | ALL } ] select_list FROM table_reference [, table_reference ]... [ where_clause ] [ hierarchical_query_clause ] [ group_by_clause ] [ HAVING condition ] [ model_clause ] [ { UNION [ ALL ] | INTERSECT | MINUS } (subquery) ] [ order_by_clause ]
</pre>
<p>The SELECT query in the View Program Source Code can only reference the source Table descriptors. It may call functions which are part of PL/SQL programs that are statically referencedby the View Programs.</p>
<p>A View Program cannot contain any definition, runtime parameter or Planned Outputs.</p>
<p>During installation, the system validates the SQL statement for any external references. Therefore, the SQL statement cannot reference any public object in the database.</p>
</div>
<!-- class="sect2" -->
<a id="CIHGIJDB"></a>
<div id="LSHDG1967" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About View Table Instances</h3>
<p>You can only create a View Table instance by installing a View Program. You cannot create or update a View Table instance from the Oracle LSH User Interface or through APIs. Once created, the target Table Descriptor cannot be unmapped from its Table instance. If you remove a View Program instance, its corresponding target Table instance is also removed.</p>
<p>If you modify the SELECT statement before installing the program, the system synchronizes the Target Table Descriptor and the Table instance at the time of install.</p>
<p>A View Table instance has full currency traceability and can be used as a source table for other Oracle LSH Programs, Data Marts and Business Areas. Every time you access the view's current data, a currency timestamp is applied to the View Table.</p>
<p>You can use the <span class="bold">Browse Data</span> UI to view data in the View Table instance. You can use the <span class="bold">Apply Snapshot Label</span> UI to select snapshot labels for all source Tables and apply a snapshot label to the target View Table instance. You can remove a snapshot label using the <span class="bold">Manage Snapshot Label</span> UI.</p>
<p>The validation status of a View Table instance must always be equal to or lower than that of the source Table instances.</p>
<p>Any destructive change to a source Table Instance invalidates the View Table instance. You must update and reinstall the View Program to resolve differences. The system does not allow you to remove source Tables if the validation status of a View Table instance is Production.</p>
<p class="subhead2"><a id="LSHDG1968"></a>Blinding Status</p>
<p>The blinding status of the View Table instance is determined by that of the Table Instances mapped to the source Table Descriptors in the View Program.</p>
<p>If you have blind-break privileges on source Table instances that support blinding, you can authorize a view based on those Tables. You can authorize reading from blinded sources only if all the source Table Descriptors are mapped. Use the <span class="bold">Authorize Read from Blinded Sources</span> radio button on the View Program instance Properties page to authorize a View Table. By default, the setting is <span class="bold">No</span>.</p>
<p>If mapping of any source Table Descriptors becomes incomplete or new Descriptors are added, the <span class="bold">Authorize Read from Blinded Sources</span> setting is automatically set to <span class="bold">No</span>. When the authorize setting is modified, the Program instance is implicitly checked out.</p>
</div>
<!-- class="sect2" -->
<a id="CIHFIJDB"></a>
<div id="LSHDG1969" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Table Descriptors in View Programs</h3>
<p>You cannot map source Table Descriptors of a View Program to a View Table instance.</p>
<p>In a View Progam, if the target Table Descriptor and its corresponding View Table instance exist, and if the SELECT query in the Source Code is modified, installation automatically updates the corresponding Table definition in the Application Area containing the Work Area. The system then updates the Table Descriptor and Table instance to refer to the modified Table definition.</p>
<p>If the Table definition for the Table Descriptor is updated during installation, the system checks if the Table definition exists in the local Application Area. If not, a copy of the Table definition is created in the local Application Area and modified.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGIHIB"></a>
<div id="LSHDG573" class="sect1">
<h2 class="sect1">Defining SAS Programs</h2>
<p>This section includes information on:</p>
<ul>
<li>
<p><a href="#BABGHAAC">Connecting to SAS</a></p>
</li>
<li>
<p><a href="#BABGHCAJ">SAS Program and Source Code Types</a></p>
</li>
<li>
<p><a href="#BACFHDIJ">Writing SAS Primary Source Code</a></p>
</li>
<li>
<p><a href="#BABDFCHA">Creating a SAS Macro Catalog</a></p>
</li>
<li>
<p><a href="#BABGDJJF">Creating a SAS Format Catalog</a></p>
</li>
<li>
<p><a href="#BABDCCJD">Calling an API to Capture Output Parameter Values</a></p>
</li>
</ul>
<p>See also: <a href="#CHDDFAHC">Setting Up SAS as an IDE</a></p>
<div id="LSHDG1970" class="sect2"><a id="sthref35"></a>
<h3 class="sect2">SAS Program Development Process</h3>
<p>There are three basic ways to use SAS source code in Oracle LSH:</p>
<ul>
<li>
<p><a href="#BABGFDCH">Open SAS as an IDE from Oracle LSH</a></p>
</li>
<li>
<p><a href="#BABECHII">Upload Existing SAS Programs to Oracle LSH</a></p>
</li>
<li>
<p><a href="#BABBJGAB">Enter Source Code Directly in the Oracle LSH Source Code Definition</a></p>
</li>
</ul>
<a id="BABGFDCH"></a>
<div id="LSHDG1971" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Open SAS as an IDE from Oracle LSH</h4>
<p>If you have the SAS client installed on your PC, you can launch the SAS integrated development environment (IDE) from an Oracle LSH Program instance.</p>
<p>If you plan to use the SAS (IDE) to develop an Oracle LSH Program, before you launch the IDE:</p>
<ul>
<li>
<p>Define and map the source Table Descriptors you need; see <a href="deftasks.htm#BACBIIJA">"Defining and Mapping Table Descriptors"</a>.</p>
</li>
<li>
<p>Install the Program instance; see <a href="wa_install.htm#CHDGCFAF">"Installing a Work Area and Its Objects"</a>.</p>
</li>
</ul>
<p>Oracle LSH then downloads the data views or files to SAS (depending on the type of connection you are using; see <a href="#BABGHAAC">Connecting to SAS</a>) when you launch SAS and you can read the data as necessary while you write the source code in SAS.</p>
<p>You can go back and forth between working in SAS and working in Oracle LSH as you develop a Program. For example, if you declare an input or output parameter in your SAS code, you can immediately go to Oracle LSH and create the required corresponding Parameter in the Oracle LSH Program, and then go back to writing SAS code.</p>
<p>When you are ready, go to the Source Code definition in the Oracle LSH Program instance and upload your SAS source code.</p>
</div>
<!-- class="sect3" -->
<a id="BABECHII"></a>
<div id="LSHDG1972" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Upload Existing SAS Programs to Oracle LSH</h4>
<p>You may have many legacy SAS programs that you want to use on Oracle LSH data. You can upload an existing SAS program to a Source Code definition in an Oracle LSH SAS Program and create defined Parameters, Source Codes, Table Descriptors, and Planned Outputs as required by Oracle LSH for the SAS source code.</p>
</div>
<!-- class="sect3" -->
<a id="BABBJGAB"></a>
<div id="LSHDG1973" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Enter Source Code Directly in the Oracle LSH Source Code Definition</h4>
<p>When you create a new Source Code definition and instance at the same time, you can type or copy and paste source code text directly into the large Source Code field.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABGHAAC"></a>
<div id="LSHDG574" class="sect2">
<h3 class="sect2">Connecting to SAS</h3>
<p>There are three ways to connect to SAS for Program development: <a href="#CIHDAGAB">Connected Mode</a>, <a href="#BABICFAE">SAS Connected Mode with Work Area Data</a>, and <a href="#CIHCCHGE">Disconnected Mode</a>. You can specify the mode you want to use in your User Preferences, although your choices may be restricted by your company.</p>
<ul>
<li>
<p><a id="CIHDAGAB"></a><span class="bold">Connected Mode</span>. Your PC has the SAS client and SAS Access to Oracle installed and is connected to the Oracle LSH database through a network. When you launch SAS from a Program instance, Oracle LSH downloads views based on the Table Descriptors defined in the Program. You write your program locally on the SAS client, using the views to see data in Oracle LSH. You cannot write data to Oracle LSH Table instances. If you run the Program locally, you write data to local data set files.</p>
<p>When you are ready, go to the Program instance in Oracle LSH, upload the SAS source code and upload any target SAS data sets you have created as Table Descriptors.</p>
</li>
<li>
<p><a id="BABICFAE"></a><span class="bold">SAS Connected Mode with Work Area Data</span>. This mode is the same as Connected mode except that it connects to the Work Area schema in the database. From SAS, you can browse views of current data in all Table instances in the Work Area, not just the Table instances linked to Table Descriptors of the Program.</p>
<p>You must use the SAS Access to Oracle tool to connect to Oracle LSH.</p>
</li>
<li>
<p><a id="CIHCCHGE"></a><span class="bold">Disconnected Mode</span>. Your PC has the SAS client installed and is connected to the Oracle LSH database through a network. When you launch SAS from a Program instance, Oracle LSH downloads data sets with the same structure as the Program's Table Descriptors. In addition, Oracle LSH downloads the actual data contained in the Table instances to which the Table Descriptors are mapped. You can write your program, working locally on the downloaded data.</p>
<p>Oracle LSH creates a directory structure on your personal computer based on the location of the Program, starting with the Domain (if you are using multiple levels of Domains, all are represented): <code dir="ltr"><span class="codeinlineitalic">Drive:/</span></code><code dir="ltr">CdrWork</code><code dir="ltr"><span class="codeinlineitalic">/your_LSH_database_acount_name/Domain_name_(all_existing_domains)/Application_Area_name/Work_Area_name/Program_instance_name/Program_instance_version/Table_Descriptor_SAS_libname/</span></code>data set file.</p>
<p>For Source Codes, Oracle LSH creates directories on your PC to contain the source code files. The system creates one directory for Source Code definitions of type Program and another for those of type Macro:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">Drive:/</span></code><code dir="ltr">CdrWork</code><code dir="ltr"><span class="codeinlineitalic">/your_LSH_database_acount_name/Domain_name_(all_existing_domains)/Application_Area_name/Program_definition_name/Program_version</span></code><code dir="ltr">Programs/</code>source code files.</p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">Drive:/</span></code><code dir="ltr">CdrWork</code><code dir="ltr"><span class="codeinlineitalic">/your_LSH_database_acount_name/Domain_name_(all_existing_domains)/Application_Area_name/Program_definition_name/Program_version/</span></code><code dir="ltr">Macros/</code>source code files.</p>
</li>
</ul>
<p>When you are ready, go to the Program instance in Oracle LSH, upload the SAS source code and upload any target SAS data sets you have created as Table Descriptors.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
It is possible to work on the same Program in different modes at different times. However, if you work first in Disconnected mode, so that the system downloads data to your personal computer, and then change to Connected mode, you may get an error that the source data set already exists. In this case, the system continues to point to the local data set instead of live data in Oracle LSH.
<p>To avoid this problem, delete or move the data sets on your personal computer that were downloaded from Oracle LSH.</p>
</div>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Developing SAS code is an option only for customers who purchase SAS separately from Oracle LSH. See <a href="#CHDDFHHE">"Setting Up Integrated Development Environments (IDEs)"</a> for instructions on how to set up SAS to work with Oracle LSH.</div>
</div>
<!-- class="sect2" -->
<a id="BABGHCAJ"></a>
<div id="LSHDG576" class="sect2">
<h3 class="sect2">SAS Program and Source Code Types</h3>
<p>Oracle LSH supports three types of SAS Programs and handles each one differently during execution:</p>
<ul>
<li>
<p><a href="#BABCHABF">SAS Program</a></p>
</li>
<li>
<p><a href="#BABHHAAI">SAS Macro Catalog</a></p>
</li>
<li>
<p><a href="#BABEHFBB">SAS Format Catalog</a></p>
</li>
</ul>
<p>SAS Macro Catalogs and SAS Format Catalogs can be referenced by primary or secondary Source Code instances in a SAS Program and are compiled each time the Program is executed, before the primary Source Code is launched.</p>
<p><a id="BABCHABF"></a><a id="LSHDG577"></a><span class="subhead3">SAS Program&nbsp;</span>Define an Oracle LSH Program of type SAS Program to hold the source code of a normal SAS program that manipulates data or generates one or more reports. Upload this SAS source code to Oracle LSH as primary source code. In this primary source code you can call SAS macros or formats stored in Oracle LSH Programs of type SAS Macro Catalog or SAS Format Catalog, or stored in the same Program as secondary Source Code of type <a href="#BABGIBBJ">Macro</a>.</p>
<p>Before you launch the SAS development environment to write source code, you must define a Program's source Table Descriptors and map them to Table instances so that Oracle LSH can download the views or data for you to use.</p>
<p>In a SAS Program you can have two types of source code:</p>
<ul>
<li>
<p><span class="bold">Program</span>. Source Code of type Program is intended to hold the source code that accomplishes the business purpose of the Program: merging or transforming data and/or producing one or more figures, listings, or table reports. You must designate the Source Code that serves this purpose as the primary Source Code so that the system sends it to the SAS engine for execution. The actual SAS source code file contained in the Source Code definition can call other Source Codes of type Program or Macro, or Oracle LSH Programs of type SAS Macro Catalog or SAS Format Catalog.</p>
</li>
<li>
<p><a id="BABGIBBJ"></a><span class="bold">Macro</span>. You can define a macro specifically for use within a particular Program. These Source Code definitions can be displayed in any order. The system compiles them before each execution and executes them in the order they are called by the primary source code.</p>
</li>
</ul>
<p>See <a href="#BACFHDIJ">"Writing SAS Primary Source Code"</a>.</p>
<p><a id="BABHHAAI"></a><a id="LSHDG578"></a><span class="subhead3">SAS Macro Catalog&nbsp;</span>an Oracle LSH Program of type SAS Macro Catalog is intended to store a set of macros that are approved for reuse in a variety of SAS Programs. You can group a set of macros with related functions in a single Catalog; for example, demography macros. In a SAS Macro Catalog Program you can have two types of source code:</p>
<ul>
<li>
<p><a id="BABJJDJE"></a><span class="bold">Macro</span>. A Source Code definition of type Macro to hold the source code for a single SAS macro. Set each macro's <span class="bold">Sharable</span> flag to <span class="bold">Yes</span>.</p>
</li>
<li>
<p><span class="bold">Program</span>. One or more Source Code definitions of type Program to test the macros. Set its <span class="bold">Sharable</span> flag to <span class="bold">No</span>. This Source Code must be listed in the first (primary) position so that Oracle LSH sends it to the SAS engine to test the macros.</p>
</li>
</ul>
<p><a id="BABEHFBB"></a><a id="LSHDG579"></a><span class="subhead3">SAS Format Catalog&nbsp;</span>an Oracle LSH Program of type SAS Format Catalog is intended to store a set of formats that are approved for reuse in a variety of SAS Programs. You can group a set of formats with related functions in a single Catalog; for example, demography formats. In a SAS Format Catalog Program you can have two types of source code:</p>
<ul>
<li>
<p><span class="bold">Macro</span>. A Source Code definition of type Macro to hold additional source code to support the format building steps. Set each macro's <span class="bold">Sharable</span> flag to <span class="bold">Yes</span>.</p>
</li>
<li>
<p><span class="bold">Program</span>. One or more Source Code definitions of type Program to test the formats. Set its <span class="bold">Sharable</span> flag to <span class="bold">No</span>. This Source Code must be listed in the first (primary) position so that Oracle LSH sends it to the SAS engine to test the formats.</p>
</li>
</ul>
<p>For Source Code of type Macro in any Program type, you must upload the source code, not the compiled binary file. The system compiles the macros defined in a Program before each execution of a Program's primary source code.</p>
</div>
<!-- class="sect2" -->
<a id="BACFHDIJ"></a>
<div id="LSHDG581" class="sect2">
<h3 class="sect2">Writing SAS Primary Source Code</h3>
<p>Create a Source Code definition of type Program in a SAS Program to hold the source code that accomplishes the business purpose of the Program: merging or transforming data and/or producing one or more figures, listings, or table reports. You must designate the Source Code that serves this purpose as the primary Source Code so that Oracle LSH sends it to the SAS engine for execution. Its source code can call other Source Codes of type Program or Macro contained in the same SAS Program, or Oracle LSH Programs of type SAS Macro Catalog or SAS Format Catalog.</p>
<p>If you plan to launch the SAS development environment from Oracle LSH to write source code, you must first define a Program's source Table Descriptors, map them to Table instances, and install the Program and Table instances so that Oracle LSH can download the views or data for you to use.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not include the string <code dir="ltr">error:</code> in any SAS source code. Oracle LSH searches the Program execution log file for the string "Error:" and errors out the Program execution if it finds the string. The source code of the Program is copied into the log file. Therefore if you include "Error:" in your source code, the Program will fail.</div>
<p><a id="LSHDG582"></a><span class="subhead3">Subcomponent References in SAS&nbsp;</span>You must refer to the defined subcomponents of the Program in your SAS source code as described in the following sections:</p>
<ul>
<li>
<p><a href="#BABIFIDJ">Table Descriptors</a></p>
</li>
<li>
<p><a href="#BABGFHFI">SAS Secondary Source Code Instances</a></p>
</li>
<li>
<p><a href="#CHDBIDJJ">Parameters</a></p>
</li>
<li>
<p><a href="#BABFCAJJ">Planned Outputs</a></p>
</li>
</ul>
<p><a id="BABIFIDJ"></a><a id="LSHDG583"></a><span class="subhead3">Table Descriptors&nbsp;</span>Oracle LSH Tables and Table Descriptors are compatible with SAS data sets. The Table is equivalent to a data set, and Table Columns are equivalent to a data set's variables.</p>
<p><span class="bold">Syntax</span>. Write to each Table Descriptor defined within the Program as if it were a data set, using the syntax <code dir="ltr"><span class="codeinlineitalic">SAS_library_name.SAS_name</span></code>. You must read from and write to the Table Descriptor, not the Table instance; if the name of the Table Descriptor or its Columns differ from the Table instance's, use the Table Descriptor's.</p>
<p><span class="bold">Target As Dataset</span>. Because Program source code must write to Table Descriptors, and Table Descriptors are views, you should use Proc SQL statements to write to tables in Oracle LSH. However, Oracle LSH provides a feature to allow you to use existing SAS Programs written with data statements. The Target As Dataset attribute is available only in SAS Programs, and only for target Table Descriptors.</p>
<p>If you set this attribute to <span class="bold">Yes</span>, Oracle LSH adds a processing step to enable SAS data statements to write to Oracle LSH Table instances. This extra processing step results in slower performance but allows you to use existing programs.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
You can improve processing performance by selecting Target as Dataset and using the SQL*Loader. See <a href="exec.htm#BABJHECB">"SQL*Loader Processing for SAS Programs"</a>.</div>
<p>Select <span class="bold">No</span> if the Program's source code uses Proc SQL statements to write to tables. This results in optimal performance.</p>
<p><a id="BABGFHFI"></a><a id="LSHDG584"></a><span class="subhead3">SAS Secondary Source Code Instances&nbsp;</span>In an Oracle LSH SAS Program you can create secondary Source Code instances of four types:</p>
<ul>
<li>
<p><span class="bold">SAS Macro Catalog</span>. To use any of the macros included in Oracle LSH SAS Macro Catalog in a Source Code instance, create an instance of the catalog Source Code in your Program. Immediately before each execution of the Oracle LSH SAS Program the macros are compiled in the SAS work library. You can call them by name from the primary Source Code.</p>
</li>
<li>
<p><span class="bold">SAS Format Catalog</span>. To use any of the formats included in an Oracle LSH SAS Format Catalog in a Source Code instance, create a Source Code instance of the whole catalog in your Program. Immediately before each execution of the Oracle LSH SAS Program the formats are compiled in the SAS work library. You can call them by name from the primary Source Code.</p>
</li>
<li>
<p><span class="bold">Macro</span>. You can create a macro especially for use in the same Program where your primary Source Code is located. You can also create an instance of a sharable Source Code definition of type Macro from another SAS Program. Refer to individual Source Codes of type Macro in your primary source code by their name.</p>
</li>
<li>
<p><span class="bold">Program</span>. You can use another Oracle LSH SAS Source Code of type Program (not an Oracle LSH Program of type SAS Program) as an Include. If the Source Code definition is located in the same Program as your primary Source Code, refer to it by its name. If the Source Code definition is located in a different Program, refer to it by its SAS File Reference Name.</p>
</li>
</ul>
<p><a id="CHDBIDJJ"></a><a id="LSHDG585"></a><span class="subhead3">Parameters&nbsp;</span>For every input or output parameter in your SAS primary source code, you must define a Parameter in Oracle LSH and refer to it by its name in your SAS code. See <a href="vars.htm#BACHGJBH">"Defining Parameters"</a>.</p>
<p><a id="BABFCAJJ"></a><a id="LSHDG586"></a><span class="subhead3">Planned Outputs&nbsp;</span>You must define a Planned Output to hold each report to be generated by a Program and refer to each one in the source code by its SAS File Reference Name. Oracle LSH automatically generates a Planned Output for the log file when you create the first Source Code in the Program. See <a href="#BABJEDHC">"Defining Planned Outputs"</a>.</p>
<p>You can successfully execute a SAS Program through Oracle LSH even if there are unplanned Outputs. If the SAS Program's validation status is Development, the system automatically generates a Planned Output with a file reference name created from the first eight characters of the Output file name in the source code. Ensure that the Output file name in the Source Code is enclosed in double quotations for Oracle LSH to identify.</p>
<p>If the required Output is a SAS data set, Oracle LSH can generate a Planned Output if the SAS Program's validation status is Development. You must define the new SAS data set inside the library named "Target". Oracle LSH then treats the Output data set as the SAS Program's target Table. The system compares the SAS data set filenames with those of the target Table Descriptors and if they match, loads data from the SAS data set into the mapped Table instance.</p>
<p>If the system does not find a target Table Descriptor, it checks out the Program, adds a new target Table Descriptor to it, creates a new Table instance in the Work Area and maps it to the newly created target Table Descriptor before installing the Program and the Table instance. Data is then loaded from the SAS data set into the mapped Table instance. Oracle LSH triggers separate jobs for each of these processes. The system does not support Proc SQL and Insert commands in the generation of unplanned data set Outputs.</p>
<p>Subsequent changes in source data set Table Descriptors must be matched in the target Table manually.</p>
<a id="BABEABCH"></a>
<div id="LSHDG587" class="sect3">
<h4 class="sect3">Using a SAS Macro Catalog</h4>
<p>To use any of the macros contained i an Oracle LSH SAS Macro Catalog, you create a Source Code instance in the Program from which you need to call them.</p>
<p>Do the following:</p>
<ol>
<li>
<p>In the Oracle LSH SAS Program where you need to use one or more of the macros in the Catalog, create a Source Code as an instance of an existing definition.</p>
</li>
<li>
<p>In the Search screen, choose the <span class="bold">Domain</span> or <span class="bold">Domain</span> and <span class="bold">Application Area</span> where the Macro Catalog you need is located, and select the <span class="bold">SAS Macro Catalog</span> radio button. If you know the exact name of the Macro Catalog you need, enter it in the <span class="bold">Name</span> field.</p>
</li>
<li>
<p>Click <span class="bold">Go</span>. The system returns the Macro Catalog(s) that satisfy the search criteria&mdash;or, if you entered the exact name of a Macro Catalog, returns only that one.</p>
</li>
<li>
<p>Select a Macro Catalog: select its box in the <span class="bold">Select</span> column and click the <span class="bold">Select</span> button. The system adds an instance of the Catalog, including all the macros it contains, and returns you to the Source Code screen.</p>
</li>
</ol>
<p>You can now use any of the macros in your Program. At execution they are added to your work library and you can call them by name from the primary source code.</p>
</div>
<!-- class="sect3" -->
<a id="BABBFABG"></a>
<div id="LSHDG588" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Using a SAS Format Catalog</h4>
<p>If your SAS code operates on data sets that require SAS formats for the proper expression of their data, you must include the formats in your Oracle LSH SAS Program (see <a href="#BABGIHIB">"Defining SAS Programs"</a>).</p>
<p>When you create a SAS Program in Oracle LSH that needs to use an Oracle LSH SAS Format Catalog, do the following:</p>
<ol>
<li>
<p>In the Oracle LSH SAS Program, create a secondary Source Code object as an instance of an existing Source Code definition (see <a href="#BABIAEBJ">"Creating an Instance of an Existing Source Code Definition"</a>).</p>
<p>If the Format Catalog includes a Table Descriptor for use as a static reference, select the <span class="bold">Static Reference</span> radio button.</p>
</li>
<li>
<p>In the Search screen, choose the <span class="bold">Domain</span> or <span class="bold">Domain</span> and <span class="bold">Application Area</span> where the Format Catalog is located and select the <span class="bold">SAS Format Catalog</span> radio button. If you know the exact name of the Catalog you need, you can enter it.</p>
</li>
<li>
<p>Press <span class="bold">Go</span>. The system displays all the SAS Format Catalogs in the location you specified&mdash;or, if you supplied the exact name of a Catalog, lists only that Catalog.</p>
</li>
<li>
<p>Select the <span class="bold">Catalog</span> you want by selecting the box next to it in the <span class="bold">Select</span> column and click the <span class="bold">Select</span> button. The system adds the Catalog as a Source Code instance to your Program and returns you to the Program's Properties screen.</p>
</li>
</ol>
<p>You can now use any of the formats in your Program. At execution they are added to your work library and you can call them by name from the primary source code, for example:.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABDFCHA"></a>
<div id="LSHDG590" class="sect2">
<h3 class="sect2">Creating a SAS Macro Catalog</h3>
<p>Oracle LSH includes the Program type SAS macro Catalog especially for the purpose of storing SAS macros that are approved for reuse. You can group logically related macros in each SAS Macro Catalog.</p>
<p>You must upload the source code file, not the compiled binary file. When the Program is submitted for execution, the system compiles its macros before executing the primary source code.</p>
<div id="LSHDG591" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref36"></a>
<h4 class="sect3">Creating a SAS Macro Catalog</h4>
<p>To create a SAS Macro Catalog in Oracle LSH:</p>
<ol>
<li>
<p>Create a Program of type SAS Macro Catalog. Give it a name and description that describe its purpose (see <a href="#BABCEAEF">"Creating Source Code"</a>).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot set a Static-reference Source Code as primary. Also, you cannot set a Source Code that points directly to a Program definition as primary.</div>
</li>
<li>
<p>For each SAS macro you want to store in the Catalog, create a Source Code definition of type Macro.</p>
</li>
<li>
<p>If the macro does not already exist, create it either in SAS or in the Source Code box. If the source code is on a local computer, upload the source code file (not the compiled binary file) from SAS to Oracle LSH.</p>
</li>
<li>
<p>Set each macro's <span class="bold">Sharable</span> flag to <span class="bold">Yes</span>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot set any macro Source Code instance that points directly to a Program definition as Sharable.</div>
</li>
<li>
<p>(Optional) Add a primary Source Code definition of type SAS Program to test to SAS macros you store in the Catalog. Set its <span class="bold">Sharable</span> flag to <span class="bold">No</span>. Write the source code and upload if necessary.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This source code is not compiled when the Program is executed because its Sharable flag is set to No.</div>
</li>
<li>
<p>Test the macros and promote the Catalog to a higher validation status according to your company's policies.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<div id="LSHDG592" class="sect3"><a id="sthref37"></a>
<h4 class="sect3">Nesting SAS Macros</h4>
<p>It is possible to create macros that reference other macros contained in a different SAS Macro Catalog in Oracle LSH. In this case, you include as a Source Code instance in your Oracle LSH SAS Program only the SAS Macro Catalog that contains the macro your primary source code references. When the Program is submitted for execution, the system compiles the macro specified in the Program and automatically finds and compiles the macro referenced by the Program's macro. You cannot use more than two layers of macros; a macro referenced by another macro cannot reference yet other macro.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABFJCID"></a>
<div id="LSHDG594" class="sect2">
<h3 class="sect2">About SAS Format Catalogs in the Oracle Life Sciences Data Hub</h3>
<p>A SAS format translates short data value codes like zero (0) and one (1) to meaningful data values such as Male and Female or Yes and No. Using SAS formats, you can store a minimum amount of data and call the format to correctly display the data in a report. The format itself can consist of source code containing hardcoded values, such as:</p>
<p>Alternatively, the format can consist of a simple call to an Oracle LSH Table instance that contains the relationships between the short stored values and the meaningful display values.</p>
<p>In this case the format refers to a data set, now converted to an Oracle LSH Table called Standard Formats that contains data such as:</p>
<div id="LSHDG595" class="tblformal">
<p class="titleintable"><a id="sthref38"></a><a id="sthref39"></a>Table 5-1 Format Table Example</p>
<table class="cellalignment81" title=" Format Table Example" summary="Example of CDR Format Table" dir="ltr">
<thead>
<tr class="cellalignment71">
<th class="cellalignment82" id="r1c1-t37">Format Name</th>
<th class="cellalignment82" id="r1c2-t37">Stored Code</th>
<th class="cellalignment82" id="r1c3-t37">Display Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment71">
<td class="cellalignment77" id="r2c1-t37" headers="r1c1-t37">
<p>$Sex.</p>
</td>
<td class="cellalignment77" headers="r2c1-t37 r1c2-t37">
<p>0</p>
</td>
<td class="cellalignment77" headers="r2c1-t37 r1c3-t37">
<p>Male</p>
</td>
</tr>
<tr class="cellalignment71">
<td class="cellalignment77" id="r3c1-t37" headers="r1c1-t37">
<p>$Sex.</p>
</td>
<td class="cellalignment77" headers="r3c1-t37 r1c2-t37">
<p>1</p>
</td>
<td class="cellalignment77" headers="r3c1-t37 r1c3-t37">
<p>Female</p>
</td>
</tr>
<tr class="cellalignment71">
<td class="cellalignment77" id="r4c1-t37" headers="r1c1-t37">
<p>$YesNo.</p>
</td>
<td class="cellalignment77" headers="r4c1-t37 r1c2-t37">
<p>0</p>
</td>
<td class="cellalignment77" headers="r4c1-t37 r1c3-t37">
<p>No</p>
</td>
</tr>
<tr class="cellalignment71">
<td class="cellalignment77" id="r5c1-t37" headers="r1c1-t37">
<p>$YesNo.</p>
</td>
<td class="cellalignment77" headers="r5c1-t37 r1c2-t37">
<p>1</p>
</td>
<td class="cellalignment77" headers="r5c1-t37 r1c3-t37">
<p>Yes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>You can create the Oracle LSH Table in several ways, including:</p>
<ul>
<li>
<p>uploading a format data set from SAS using a Load Set</p>
</li>
<li>
<p>modifying an Oracle Clinical Discrete Value Group (DVG) table (loaded into Oracle LSH by the Oracle Clinical Global Library adapter)</p>
</li>
<li>
<p>uploading a table from any integrated external system and modifying as necessary</p>
</li>
</ul>
<p>A SAS format data set contains all the information required to define a format, such as the format name; its starting and ending value; minimum, maximum, and default length; and so on as columns or variables.</p>
</div>
<!-- class="sect2" -->
<a id="BABGDJJF"></a>
<div id="LSHDG597" class="sect2">
<h3 class="sect2">Creating a SAS Format Catalog</h3>
<p>To create a SAS Format Catalog in Oracle LSH:</p>
<ol>
<li>
<p>Create an Oracle LSH Program of type SAS Format Catalog. Give it a name and description that describe its purpose.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot set a Static Reference Source Code as primary. Also, you cannot set a Source Code that points directly to a Program definition as primary.</div>
</li>
<li>
<p>If any of the formats in the Catalog are table-dependent, add the necessary Table Descriptor(s) using the Oracle LSH Table definition that you created for formats as the source Table definition (see <a href="deftasks.htm#BEIJFJIE">"Creating a Table Descriptor"</a>).</p>
</li>
<li>
<p>Map any Table Descriptors to Table instances (see <a href="deftasks.htm#CIHDCCDA">Mapping Table Descriptors to Table Instances</a>).</p>
</li>
<li>
<p>Add a Source Code definition of type Program that contains the format source code (see <a href="#BABCEAEF">"Creating Source Code"</a>).</p>
<p>If the format is Table-dependent, the source code must use the Table Descriptor as input and include a SAS Proc format to create the format catalog in SAS.</p>
<p>You can also add Source Codes of type Macro to support the format building steps if necessary.</p>
</li>
<li>
<p>Set the Source Code's <span class="bold">Sharable</span> flag to <span class="bold">Yes</span>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot set any Source Code instance that points directly to a Program definition as Sharable.</div>
</li>
<li>
<p>Repeat as necessary; you can have multiple format Source Codes in a single Oracle LSH SAS Format Catalog.</p>
</li>
<li>
<p>Apply. The system saves the Source Code definition(s) and instances in the database and returns you to the Program's main page.</p>
</li>
<li>
<p>Install the Program in the database (see <a href="wa_install.htm#CHDHDGDA">"Running a Work Area Installation"</a>).</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BABDCCJD"></a>
<div id="LSHDG598" class="sect2">
<h3 class="sect2">Calling an API to Capture Output Parameter Values</h3>
<p>You can call a public Oracle LSH API from SAS source code to capture the values of output Parameters in a SAS Program contained in a Report Set or Workflow for the purpose of passing their value during execution to another Program in the same Report Set or Workflow (see <a href="vars.htm#BCFEAHGA">"Setting Up Parameter Value Propagation"</a>).</p>
<p>If you set up value propagation in a Report Set or Workflow, you must call an API from each SAS Program whose output Parameter values you need to capture. You must call the API once for each Parameter value you need. You may want to add the API call to every SAS Program that contains output Parameters in case you later add the Program to a Report Set or Workflow and want to use the output Parameter value in value propagation. The API package procedure name is: Cdr_Pub_Exe_User_Utils.setOutputParams.</p>
<p>The example below uses a PL/SQL wrapper to call the API. In this way you can call the API multiple times and only connect to the database once from SAS, and only two arguments are required for each output Parameter that you want to send back to Oracle LSH:</p>
<ul>
<li>
<p><span class="bold">pi_vparamName</span>. Enter the Name of the output or input/output Parameter whose value you want to capture.</p>
</li>
<li>
<p><span class="bold">pi_vparamValue</span>. This procedure parameter receives the value of the Program Parameter you specified as the value of pi_vparamName.</p>
</li>
</ul>
<p>You can use the following code to call the API. Use <code dir="ltr">%sysget</code> (as shown) to get the required values rather than hardcoding the values in the code.</p>
<pre dir="ltr">
SAS code
--------------------------------------------------------------------------------
Proc SQL;
/*set the job context then send the output value*/
connect to oracle (user=%sysget(CDR_SCHEMA) pass=%sysget(CDR_PASSWD)
path=%sysget(CDR_DB) );
 
/* pass output parameter back to LSH */
execute(exec my_plsql_package.setOutputParams(
'MyParamName'
,'My Param Value'
)
by oracle ;
 
PL/SQL code
--------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE my_plsql_package AS
Procedure setOutputParams(
pi_vParamName IN varchar2
,pi_vParamValue IN varchar2
);
END my_plsql_package;
/
 
CREATE OR REPLACE PACKAGE BODY my_plsql_package AS
Procedure setOutputParams(
pi_vParamName IN varchar2
,pi_vParamValue IN varchar2
) IS
return_status VARCHAR2(10);
msg_count NUMBER;
msg_data VARCHAR2(2000);
BEGIN
   Cdr_Pub_Exe_User_Utils.setOutputParams(p_api_version =&gt; 1
               ,p_init_msg_list =&gt; Cdr_Pub_Def_Constants.G_FALSE
               ,p_commit =&gt; Cdr_Pub_Def_Constants.G_FALSE
               ,p_validation_level =&gt; Cdr_Pub_Def_Constants.G_VALID_LEVEL_FULL
               ,x_return_status =&gt; return_status
               ,x_msg_count =&gt; msg_count
               ,x_msg_data =&gt; msg_data
               ,pi_vparamName =&gt; pi_vParamName
               ,pi_vparamValue =&gt; pi_vParamValue) ;
   IF return_status &lt;&gt; 'S' THEN
      RAISE_APPLICATION_ERROR(-20200,'Failed to call Cdr_Pub_Exe_User_Utils.setOutputParams: '||msg_data);
   END IF ;
END setOutputParams;
END my_plsql_package;
/
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGHJBI"></a>
<div id="LSHDG600" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining Oracle Reports Programs</h2>
<p>You can use Oracle Reports as an integrated development environment to develop reports in Oracle LSH, launching Oracle Reports from a Program definition. Oracle LSH Programs of type Oracle Reports can have two types of Source Code: Oracle Reports, which are uploaded from Oracle Reports, and PL/SQL, for subroutines; see <a href="#CHDCAAJF">"Creating a PL/SQL Package Storage Program"</a>. (See also: <a href="#CHDDFHHE">"Setting Up Integrated Development Environments (IDEs)"</a>.</p>
<p>Oracle Reports Builder includes the following features:</p>
<ul>
<li>
<p>A query builder with a visual representation of the specification of SQL statements to obtain report data</p>
</li>
<li>
<p>Wizards that guide you through the report design process</p>
</li>
<li>
<p>Default report templates and layouts that can be customized to meet your organization's reporting needs</p>
</li>
<li>
<p>The ability to generate code to customize how reports will run</p>
</li>
<li>
<p>A Live Previewer that allows you to edit report layouts in WYSIWYG mode</p>
</li>
<li>
<p>An integrated chart builder that helps you to graphically represent report data</p>
</li>
<li>
<p>Web publishing tools that dynamically generate web pages based on your corporate data</p>
</li>
<li>
<p>Other standard report output formats like HTML, PDF, Postscript, and ASCII (to make use of Oracle LSH's Publishing Light features, you must use PDF)</p>
</li>
</ul>
<p>For information on using Oracle Reports Builder, see the Oracle Reports documentation:</p>
<ol>
<li>
<p>Go to Oracle documentation at</p>
<p><code dir="ltr"><a href="http://www.oracle.com/technology/documentation/index.html">http://www.oracle.com/technology/documentation/index.html</a></code></p>
</li>
<li>
<p>Go to the URL for the <span class="italic">Oracle Reports Developer Reports Builder</span> manual for Oracle Reports 6i, which is the release included with the Oracle LSH technology stack:</p>
<p>http://download-west.oracle.com/docs/pdf/A73172_01.pdf</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This URL is correct as of the date of publication. If you have trouble with these instructions, try My Oracle Support.</div>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="CHDGAIBI"></a>
<div id="LSHDG602" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining Informatica Programs</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BACJGBGD">Creating a New Informatica Program</a></p>
</li>
<li>
<p><a href="#BACHJCAA">Using Your Existing Informatica Mappings and Workflows</a></p>
</li>
<li>
<p><a href="#BACFAIGB">Creating and Synchronizing Source Code</a></p>
</li>
<li>
<p><a href="#BACBDHAH">Using PL/SQL Source Code in an Oracle LSH Informatica Program</a></p>
</li>
<li>
<p><a href="#BACCABFG">Updating Table Descriptors</a></p>
</li>
<li>
<p><a href="#BACIIBCI">Setting Informatica Program Parameters</a></p>
</li>
<li>
<p><a href="#BACFCGII">Selective Index Management</a></p>
</li>
<li>
<p><a href="#BACBIICC">Adding Planned Outputs</a></p>
</li>
<li>
<p><a href="#CHDEIFCH">Informatica Integration</a></p>
</li>
</ul>
<p>See also: <a href="#CHDJGBGA">Setting Up Informatica as an IDE</a></p>
<p>Using Oracle LSH Informatica Programs, you can:</p>
<ul>
<li>
<p>Access Informatica tools from within Oracle LSH to create and edit Informatica mappings and workflows</p>
</li>
<li>
<p>Execute Informatica workflows from within Oracle LSH, on Oracle LSH data</p>
</li>
</ul>
<a id="BACJGBGD"></a>
<div id="LSHDG603" class="sect2">
<h3 class="sect2">Creating a New Informatica Program</h3>
<p>To define a new Informatica Program, do the following:</p>
<ol>
<li>
<p>After you create the Oracle LSH Informatica Program definition and instance, create Table Descriptors in it and map them. This readies the Program for installation. See <a href="#BACIFFJD">"Defining Table Descriptors"</a> for more information on Table Descriptors.</p>
</li>
<li>
<p>Install the Program and check it out.</p>
</li>
<li>
<p>Click <span class="bold">Launch IDE</span> to start Informatica's PowerCenter Designer. You can create your mappings in the PowerCenter Designer. You can access other Informatica components from the PowerCenter Designer; for example, you can go to the Informatica Workflow Manager from the PowerCenter Designer to create Informatica workflows.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you launch Informatica PowerCenter Designer from an Oracle LSH Informatica Program for the first time, you have to configure the Oracle LSH Informatica Repository and connect to it. Consult your Informatica Administrator for more information.</div>
<p>See <a href="#CHDEEBGJ">"IDE Launch Settings"</a> for information on data access settings for IDEs. See the appropriate Informatica documentation for information on using Informatica.</p>
</li>
<li>
<p>Export the mappings and workflows from Informatica when done and upload the resultant XML files into the Source Code of the corresponding Oracle LSH Informatica Program. See <a href="#BACFAIGB">"Creating and Synchronizing Source Code"</a>.</p>
</li>
</ol>
<p>See <a href="#CHDEIFCH">"Informatica Integration"</a> for information about what happens behind the scenes when you check out, check in, and launch an Informatica Program in Oracle LSH.</p>
</div>
<!-- class="sect2" -->
<a id="BACHJCAA"></a>
<div id="LSHDG604" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using Your Existing Informatica Mappings and Workflows</h3>
<p>If you want to use your existing Informatica mappings and workflows from the first time you install the Oracle LSH Informatica Program, do the following:</p>
<ol>
<li>
<p>From Informatica, export the mappings and workflows. Informatica generates an XML file for each mapping and each workflow.</p>
</li>
<li>
<p>In the Oracle LSH Informatica Program, create a Source Code definition and instance and upload the XML files into the Source Code definition. See <a href="#BABFIBBD">"Creating a New Source Code Definition and Instance"</a> for instructions.</p>
</li>
<li>
<p>Install the Oracle LSH Program. Oracle LSH creates a folder in Informatica (in the same format as described above) and imports the mapping and workflow files into this Informatica folder.</p>
</li>
</ol>
<p>For more information on installing Programs in general, see <a href="#BABIBAGJ">"Installing Program Instances"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BACFAIGB"></a>
<div id="LSHDG605" class="sect2">
<h3 class="sect2">Creating and Synchronizing Source Code</h3>
<p>An Oracle LSH Informatica Program's Source Code holds the Informatica mapping and workflow files.</p>
<p>You must create a new Source Code definition and instance when you upload Informatica files for the first time. See <a href="#BABFIBBD">"Creating a New Source Code Definition and Instance"</a> for instructions.</p>
<p>When you make changes to mappings and workflows in Informatica, you must export the mappings and workflows from Informatica when done and upload the resultant XML files into the Oracle LSH Informatica Program's Source Code.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Informatica exports the mappings and workflows into separate XML files. When uploading the XMLs into the Oracle LSH Informatica Program's Source Code, upload the mapping XML before the workflow XML. This is because when you launch Informatica from the Oracle LSH Informatica Program, the files are imported into Informatica in the same order in which you uploaded them into the Source Code definition, and Informatica needs the mapping XML first.
<p>Oracle LSH Informatica Programs do not use the Primary and Secondary classification for the Source Code objects, unlike other Oracle LSH Programs.</p>
</div>
<p>You can also use PL/SQL Source Code in an Oracle LSH Informatica Program by creating a Source Code instance that refers to an installed Oracle LSH PL/SQL Source Code definition. See <a href="#BACBDHAH">"Using PL/SQL Source Code in an Oracle LSH Informatica Program"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not edit the XML files from within Oracle LSH.</div>
</div>
<!-- class="sect2" -->
<a id="BACBDHAH"></a>
<div id="LSHDG607" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using PL/SQL Source Code in an Oracle LSH Informatica Program</h3>
<p>Oracle LSH supports PL/SQL programs for Informatica through statically shared Oracle LSH PL/SQL Source Code. See <a href="#BABBIDGC">"Creating and Using Static Reference Source Code"</a>.</p>
<p>To use PL/SQL Source Code in an Oracle LSH Informatica Program, do the following:</p>
<ol>
<li>
<p>Create an Oracle LSH PL/SQL Program, create a Source Code definition and instance in this Program, upload or enter valid PL/SQL code in the Source Code definition, and install the Program. See <a href="#BABHIAIJ">"Defining PL/SQL Programs"</a>.</p>
</li>
<li>
<p>In the Oracle LSH Informatica Program, create a Source Code object as an instance of an existing Source Code definition (see <a href="#BABIAEBJ">"Creating an Instance of an Existing Source Code Definition"</a>.</p>
</li>
<li>
<p>When you search for the definition source, set <span class="bold">Static Reference</span> to <span class="bold">Yes</span>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot add non-statically shared PL/SQL Source Code in Oracle LSH Informatica Programs.</div>
</li>
<li>
<p>Select the PL/SQL Source Code definition you want to use and click <span class="bold">Apply</span>.</p>
</li>
</ol>
<p>If you create a Source Code instance of PL/SQL Source Code as a static reference (referring to the Source Code definition of an installed PL/SQL Program instance) in your Oracle LSH Informatica Program, and this PL/SQL Program needs to read the same source Tables as the Oracle LSH Informatica Program, copy the Oracle LSH Informatica Program and the PL/SQL Program that contains the statically shared Source Code, remove the original shared Source Code from the Oracle LSH Informatica Program and replace it with the Source Code from the copied PL/SQL Program, and map both the Informatica and the PL/SQL Program to new Table Instances.</p>
</div>
<!-- class="sect2" -->
<a id="BACCABFG"></a>
<div id="LSHDG608" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Updating Table Descriptors</h3>
<p>Oracle LSH Informatica Programs can read Oracle LSH Table instances but cannot write to target Table instances. When you launch Informatica, Oracle LSH creates temporary Table instances to enable you to execute Informatica mappings from within Informatica (as opposed to from Oracle LSH). These temporary Table instances are only available for the current Informatica session. If you make any changes to the structure of these tables through Informatica, you must make the same changes manually in Oracle LSH.</p>
<p>See <a href="#BACIFFJD">"Defining Table Descriptors"</a> and<a href="deftasks.htm#CIHDCCDA">"Mapping Table Descriptors to Table Instances"</a>.</p>
<p>Oracle LSH Informatica Programs support indexes on Table instances and also allow selective index management in addition to recreating indexes for all the Tables. See <a href="#BACFCGII">"Selective Index Management"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BACIIBCI"></a>
<div id="LSHDG609" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting Informatica Program Parameters</h3>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BACJHAGE">User-Defined Parameters</a></p>
</li>
<li>
<p><a href="#BACBEJJD">Predefined Parameters</a></p>
</li>
</ul>
<a id="BACJHAGE"></a>
<div id="LSHDG610" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">User-Defined Parameters</h4>
<p>You must define a corresponding Parameter with the same name and type in the Oracle LSH Informatica Program for each parameter you use for mappings in Informatica. You can pass values to Parameters when executing the Oracle LSH Informatica Program.</p>
<p>See <a href="#BABGGGFH">"Defining Parameters"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="BACBEJJD"></a>
<div id="LSHDG611" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Predefined Parameters</h4>
<p>The Informatica adapter has the following predefined Parameters:</p>
<ul>
<li>
<p><span class="bold">Bulk Load</span>. Set this Parameter to Yes if you use bulk loading in the Informatica workflow. Oracle LSH supports bulk loading of data only for the staging data processing type. The system drops all indexes on the staging Tables and recreates them after job execution, when you set this Parameter to Yes.</p>
<p>See <a href="exec.htm#CHDIEEJH">"Staging Processing"</a> for more information on this data processing type.</p>
</li>
<li>
<p><span class="bold">Drop and Recreate Index</span>. If set to Yes, the system drops all indexes on all target Table instances before the Oracle LSH Informatica Program is executed, and recreates them after execution. If you do not want to recreate indexes for all the target Table Descriptors, you can call an Oracle LSH API that allows selective index management. See <a href="#BACFCGII">"Selective Index Management"</a>.</p>
</li>
<li>
<p><span class="bold">Recover Workflow</span>. If set to Yes, Oracle LSH recovers a suspended Informatica workflow using the Informatica recover mechanism. If set to No, Oracle LSH aborts a suspended Informatica workflow and restarts it.</p>
</li>
<li>
<p><span class="bold">WF Name</span>. This is the name of the Informatica workflow that you want Oracle LSH to execute. You must provide this name at the time of submitting the Oracle LSH Informatica Program's Execution Setup. See <a href="deftasks.htm#BEIGAICB">"Creating, Modifying, and Submitting Execution Setups"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BACFCGII"></a>
<div id="LSHDG612" class="sect2">
<h3 class="sect2">Selective Index Management</h3>
<p>Use the Oracle LSH public API for selective index management to:</p>
<ul>
<li>
<p>Select the target Table instances and the indexes/constraints that you want to recreate.</p>
</li>
<li>
<p>Control index management at runtime, as opposed to before and after execution (through the Drop and Recreate Indexes Parameter).</p>
</li>
</ul>
<p>The API has the following signature:</p>
<pre dir="ltr">
CDR_PUB_EXE_RUNTIME.ActOnIndex(Create/Drop:&lt;<span class="italic">target_Table_instance_name</span>&gt;:&lt;<span class="italic">index/constraint name</span>&gt;)
</pre>
<p>Call this API from a Stored Procedure Transformation in your Informatica mapping by passing the following values to the Stored Procedure:</p>
<ul>
<li>
<p><span class="bold">Create/Drop</span>. Enter either Create or Drop.</p>
</li>
<li>
<p><span class="bold">Target Table Instance Name</span>. Enter the Oracle LSH target Table instance name whose index or constraint you want to drop or recreate.</p>
</li>
<li>
<p><span class="bold">Index/Constraint Name</span>. Enter the index or constraint name.</p>
</li>
</ul>
<p>For example:</p>
<p><code dir="ltr">CDR_PUB_EXE_RUNTIME.ActOnIndex(Create:T_EMPLOYEE:BMP1)</code></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Refer to the <span class="italic">Oracle Life Sciences Data Hub Application Programming Interface Guide</span> for more information on Oracle LSH public APIs.</div>
</div>
<!-- class="sect2" -->
<a id="BACBIICC"></a>
<div id="LSHDG613" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Adding Planned Outputs</h3>
<p>No Planned Outputs are required for Informatica Programs. The system allows you to create them but they have no effect.</p>
<p>See <a href="#BABJEDHC">"Defining Planned Outputs"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDEIFCH"></a>
<div id="LSHDG614" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Informatica Integration</h3>
<p>This section contains information on the following:</p>
<ul>
<li>
<p><a href="#BACEGFGB">Informatica Folder Creation</a></p>
</li>
<li>
<p><a href="#CHDCCADF">Informatica Security Configuration</a></p>
</li>
</ul>
<a id="BACEGFGB"></a>
<div id="LSHDG615" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Informatica Folder Creation</h4>
<p>Oracle LSH first creates a folder in Informatica when you install the Program for the first time and subsequently for each check out of the Program. The Informatica folder that Oracle LSH creates when you first install the Program is useful only if you already have Informatica mappings and workflow that you want to deploy. For all subsequent interactions with Informatica, Oracle LSH uses the Informatica folder that it creates at the time of checking out the Program.</p>
<p><a id="LSHDG616"></a><span class="subhead3">Informatica Folder Format&nbsp;</span>When you install the Oracle LSH Informatica Program for the first time, Oracle LSH creates an empty folder in Informatica with a name in this format:</p>
<p><code dir="ltr">LSHProg_&lt;Oracle LSH Program ID&gt;_&lt;Oracle LSH Program Version&gt;</code></p>
<p>For example, for an Oracle LSH Program with the ID <code dir="ltr">Prg098765</code>, the corresponding folder created in Informatica's PowerCenter Designer is: <code dir="ltr">LSHProg_Prg098765_1</code>.</p>
<p>See <a href="#CHDCCADF">"Informatica Security Configuration"</a> for information on creating Informatica mappings and workflows in the Informatica folder.</p>
</div>
<!-- class="sect3" -->
<a id="CHDCCADF"></a>
<div id="LSHDG617" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Informatica Security Configuration</h4>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BACCBFHH">Informatica Security Configuration on Checkout</a></p>
</li>
<li>
<p><a href="#BACEIBGC">Informatica Security Configuration on Checkin</a></p>
</li>
<li>
<p><a href="#BACECEHF">Informatica Security Configuration on Launching the IDE</a></p>
</li>
</ul>
<a id="BACCBFHH"></a>
<div id="LSHDG618" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Informatica Security Configuration on Checkout</h5>
<p>When you check out an installed Oracle LSH Informatica Program, the following takes place:</p>
<ul>
<li>
<p>Oracle LSH creates another empty folder in Informatica with a name in the same format as at the time of installation with the version number incremented by one:</p>
<p><code dir="ltr">LSHProg_&lt;Oracle LSH Program ID&gt;_&lt;Oracle LSH Program Version&gt;</code></p>
</li>
<li>
<p>Informatica associates this folder with a security group with the same name as the folder, replacing the prefix <code dir="ltr">Folder</code> with <code dir="ltr">Group</code>. For example, for the Oracle LSH Program with the ID <code dir="ltr">Prg098765</code>, the security group in Informatica is: <code dir="ltr">Group_Prg098765_1</code>.</p>
</li>
<li>
<p>The Informatica admin user LSHAdmin owns this Informatica security group.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Each version of the Oracle LSH Informatica Program instance results in a new folder in Informatica. You have access to only the latest Informatica folder.
<p>Also note that although Informatica supports versioning, the Oracle LSH Informatica Repository is nonversioned. You must access versioning information for Oracle LSH Informatica Programs from within Oracle LSH: go to the Actions drop-down list on the Program Properties screen and select View Version History.</p>
</div>
<p>Click <span class="bold">Launch IDE</span> to start Informatica's PowerCenter Designer.</p>
</div>
<!-- class="sect4" -->
<a id="BACEIBGC"></a>
<div id="LSHDG619" class="sect4">
<h5 class="sect4">Informatica Security Configuration on Checkin</h5>
<p>When you check in an Oracle LSH Informatica Program, the corresponding Informatica folder is locked for write access. However, all users continue to have read access to the Informatica folder. The user who checks out the Program from Oracle LSH will get write access to the Informatica folder.</p>
</div>
<!-- class="sect4" -->
<a id="BACECEHF"></a>
<div id="LSHDG620" class="sect4">
<h5 class="sect4">Informatica Security Configuration on Launching the IDE</h5>
<p>When you launch the PowerCenter Designer from an Oracle LSH Informatica Program:</p>
<ul>
<li>
<p>Oracle LSH adds each user who checks out the Oracle LSH Informatica Program to the Informatica security group. This user gets read/write privileges to the Informatica folder. Note that when a user checks out an Oracle LSH Informatica Program and launches Informatica, the user's read/write privileges from all other Informatica folders are taken away. This is because a user can work on only one Informatica folder at a time even if the user has privileges on other folders.</p>
</li>
<li>
<p>You can edit mappings and workflows in Informatica only if you launch Informatica from an Oracle LSH Informatica Program that you checked out. You have read-only privileges in Informatica if:</p>
<ul>
<li>
<p>Someone else has the Oracle LSH Informatica Program checked out</p>
</li>
<li>
<p>The Oracle LSH Informatica Program is checked in</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDCHJFC"></a>
<div id="LSHDG621" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Defining Oracle Business Intelligence Publisher Programs</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDEBHAC">Integration with Oracle BI Publisher</a></p>
</li>
<li>
<p><a href="#CHDEHAIH">About Oracle BI Publisher Program Source Code</a></p>
</li>
<li>
<p><a href="#CHDJFHAG">About Oracle BI Publisher Program Planned Outputs</a></p>
</li>
<li>
<p><a href="#CHDFHAHE">Setting Oracle BI Publisher Program Parameters</a></p>
</li>
</ul>
<p>See also: <a href="#CHDDFHHE">Setting Up Integrated Development Environments (IDEs)</a></p>
<p>An Oracle LSH BI Publisher Program lets you use data from Oracle LSH Tables to create reports using Oracle BI Publisher. You can run the Oracle LSH BI Publisher Program from within Oracle LSH. The system generates a report in the desired output format(s) for Oracle LSH Consumers.</p>
<a id="CHDEBHAC"></a>
<div id="LSHDG622" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Integration with Oracle BI Publisher</h3>
<p>This section includes information on the process of integration between Oracle LSH and Oracle BI Publisher:</p>
<ul>
<li>
<p><a href="#CHDHHACE">Performing Oracle LSH Tasks</a></p>
</li>
<li>
<p><a href="#CHDCJFAE">Performing Oracle BI Publisher Tasks</a></p>
</li>
<li>
<p><a href="#CHDIFEDC">Running the Program</a></p>
</li>
<li>
<p><a href="#CHDJEDGG">Editing an Existing Program</a></p>
</li>
</ul>
<a id="CHDHHACE"></a>
<div id="LSHDG623" class="sect3">
<h4 class="sect3">Performing Oracle LSH Tasks</h4>
<ul>
<li>
<p><span class="bold">Oracle LSH Creates Planned Outputs and Predefined Parameters</span>. Oracle LSH automatically adds to an Oracle LSH BI Publisher Program definition a Planned Output for each report output format that Oracle BI Publisher supports, and two predefined runtime Parameters.</p>
<p>See <a href="#CHDFHAHE">"Setting Oracle BI Publisher Program Parameters"</a> and <a href="#CHDJFHAG">"About Oracle BI Publisher Program Planned Outputs"</a>.</p>
</li>
<li>
<p><span class="bold">Prepare the Program</span>. You must create and map Table Descriptors in the Oracle LSH BI Publisher Program and install it to enable launching Oracle BI Publisher.</p>
<p>See <a href="#BACIFFJD">"Defining Table Descriptors"</a> and<a href="#BABIBAGJ">"Installing Program Instances"</a> for instructions.</p>
</li>
<li>
<p><span class="bold">Check Out the Program</span>. Before you launch Oracle BI Publisher, make sure you check out the Oracle LSH BI Publisher Program, so that Oracle LSH can synchronize the Program with the changes you make in Oracle BI Publisher.</p>
</li>
<li>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Oracle LSH Program is equivalent to an Oracle BI Publisher <span class="italic">report</span>.</div>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CHDCJFAE"></a>
<div id="LSHDG624" class="sect3">
<h4 class="sect3">Performing Oracle BI Publisher Tasks</h4>
<p>Oracle LSH creates an Oracle BI Publisher report with the same name as the Oracle LSH BI Publisher Program definition and places the report in a folder under <span class="bold">My Folders</span>. The name of this folder is in this format:</p>
<pre dir="ltr">
&lt;<span class="italic">Program Definition Name</span>&gt;_&lt;<span class="italic">Program's obj_id</span>&gt;_<span class="italic">Ver&lt;Program's Version No</span>&gt;
</pre>
<p>Edit the Oracle BI Publisher report as follows:</p>
<ol>
<li>
<p><span class="bold">Create a new Data Model and select the Data Source</span>. The Data Source has a name in the format <code dir="ltr">LSH_DataSrc_&lt;LSH_application_username&gt;</code>. Select the Data Source that has your Oracle LSH application username in it. Select the <span class="bold">Only Use Default Schema</span> checkbox before creating a query. Use the BI Publisher Query Builder to create a query to fetch data from Oracle LSH Tables.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
See "Setting Up Security for Oracle Business Intelligence Publisher" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub System Administrator's Guide</span></span> or contact your Oracle LSH System Administrator if you cannot find a Data Source name with your application username in it.</div>
</li>
<li>
<p><span class="bold">Create a new layout</span>. Create a report template in any of the formats that Oracle BI Publisher supports and save the template with this report. Set the Output Format to All Formats to enable Oracle LSH to support all report formats when running the Oracle LSH BI Publisher Program.</p>
</li>
<li>
<p><span class="bold">Save the report and exit Oracle BI Publisher.</span> After you exit Oracle BI Publisher, check in the Oracle LSH BI Publisher Program in Oracle LSH. Oracle LSH creates a Source Code definition and instance and uploads the zipped BI Publisher report into the Source Code. See <a href="#CHDEHAIH">"About Oracle BI Publisher Program Source Code"</a>.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
Refer to the (<span class="italic">BI Publisher Administrator's and Developer's Guide</span> and the <span class="italic">BI Publisher Report Designer's Guide</span>) for complete details. You can browse through the documentation online and download what you need from the Oracle Technology Network. Use this hyperlink to go to the list of available documentation for the Oracle Business Intelligence Suite Enterprise Edition (version 10.1.3.4) <code dir="ltr"><a href="http://download.oracle.com/docs/cd/E10415_01/doc/nav/portal_booklist.htm">http://download.oracle.com/docs/cd/E10415_01/doc/nav/portal_booklist.htm</a><a href=""></a></code></div>
</div>
<!-- class="sect3" -->
<a id="CHDIFEDC"></a>
<div id="LSHDG625" class="sect3">
<h4 class="sect3">Running the Program</h4>
<p>Create an Execution Setup for the Oracle LSH BI Publisher Program and run it. See <a href="deftasks.htm#BEIGAICB">"Creating, Modifying, and Submitting Execution Setups"</a>.</p>
<p>When you execute this Program, the system internally calls BI Publisher APIs to create the report as designed in Oracle BI Publisher.</p>
<p>You can see the final report by going to the My Home tab in Oracle LSH and clicking the Oracle LSH BI Publisher Program's Job ID. See "Tracking Job Execution" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub User's Guide</span></span>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDJEDGG"></a>
<div id="LSHDG626" class="sect3">
<h4 class="sect3">Editing an Existing Program</h4>
<p>When you make changes to the Table Descriptors in an Oracle LSH BI Publisher Program:</p>
<ul>
<li>
<p>You must reinstall and check out the Program after making these changes.</p>
</li>
<li>
<p>When you launch Oracle BI Publisher after these changes, Oracle BI Publisher gets the latest tables per your changes in Oracle LSH, but if you want to change the query, you must do that in Oracle BI Publisher.</p>
</li>
<li>
<p>When you return to Oracle LSH after saving the report in Oracle BI Publisher, you must check in the Oracle LSH BI Publisher Program.</p>
</li>
</ul>
<p>Do not change anything else in the Oracle LSH BI Publisher Program from within Oracle LSH.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDEHAIH"></a>
<div id="LSHDG627" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Oracle BI Publisher Program Source Code</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not change the Oracle LSH BI Publisher Program Source Code in Oracle LSH. The system creates and updates the Source Code automatically.</div>
<p class="subhead2"><a id="LSHDG628"></a>Source Code Creation</p>
<p>After you save the Oracle BI Publisher report and exit Oracle BI Publisher (that you launched from Oracle LSH for the first time), you must check in the Oracle LSH BI Publisher Program. The system creates a Source Code definition and instance and uploads the zipped report file into the Source Code.</p>
<p class="subhead2"><a id="LSHDG629"></a>Source Code Updation</p>
<p>After every Oracle BI Publisher launch, the system automatically updates this zipped report file when you check the Oracle LSH BI Publisher Program in.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle LSH marks the latest zipped report file in the Oracle LSH BI Publisher Program's Source Code as Primary. The system disregards any other report files that may be present in the Source Code definition, and uses only this Primary Source Code.
<p>See <a href="#BABBBCHG">"About Source Code"</a> for details on Oracle LSH Source Code.</p>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDJFHAG"></a>
<div id="LSHDG630" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Oracle BI Publisher Program Planned Outputs</h3>
<p>BI Publisher supports many output formats. When you create an Oracle LSH Program of the BI Publisher adapter type, the system automatically adds a Planned Output for each supported output format to the Oracle LSH BI Publisher Program definition. This makes it possible to select any of the supported output formats when running the Oracle LSH BI Publisher Program.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Make sure that for each Planned Output, Error if Generated and Error if Not Generated are both set to False. See <a href="#BABJEDHC">"Defining Planned Outputs"</a> for more information on Planned Outputs.
<p>Do not change anything else in the system-generated Planned Outputs.</p>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDFHAHE"></a>
<div id="LSHDG631" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting Oracle BI Publisher Program Parameters</h3>
<p>Oracle LSH BI Publisher Programs include the following types of Parameters:</p>
<ul>
<li>
<p><a href="#CHDGCDBB">Predefined Parameters</a></p>
</li>
<li>
<p><a href="#CHDJCAHA">User-Defined Parameters</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDGCDBB"></a><a id="LSHDG632"></a>Predefined Parameters</p>
<p>An Oracle LSH BI Publisher Program has the following predefined runtime Parameters:</p>
<ul>
<li>
<p><span class="bold">BIP Report Output Format</span>. You may set a default output format from the list of values for this Parameter.</p>
<p>You can reset the output format at the time of submitting the execution setup. See <a href="deftasks.htm#BEIGAICB">"Creating, Modifying, and Submitting Execution Setups"</a>.</p>
</li>
<li>
<p><span class="bold">BIP Template</span>. This refers to the layout template that you attach to a BI Publisher report. You must type out the layout template's name that you defined in BI Publisher. The template's name does not contain extension names. Do not change anything else in this Parameter.</p>
<p>You can change the name at the time of submitting the execution setup. See <a href="deftasks.htm#BEIGAICB">"Creating, Modifying, and Submitting Execution Setups"</a>.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not change any other properties of these Parameters except the default values, or the Program's execution will fail.</div>
<p class="subhead2"><a id="CHDJCAHA"></a><a id="LSHDG633"></a>User-Defined Parameters</p>
<p>For each user-defined parameter you create in Oracle BI Publisher, create a Parameter in Oracle LSH with the same name but of VARCHAR2 data type.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABIBAGJ"></a>
<div id="LSHDG634" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Installing Program Instances</h2>
<p>You can install a Program instance directly from its Properties screen, using the Install button, or in its Work Area (see <a href="wa_install.htm#CHDGCFAF">"Installing a Work Area and Its Objects"</a>). If you are working with an integrated development environment (IDE) you must install the Program instance in order to see source data in the IDE.</p>
<p>When you install a Program instance using the <span class="bold">Install</span> button on its Properties screen:</p>
<ul>
<li>
<p>The system checks in the Program instance and definition, and also the Table instances in the current Work Area to which the instance is mapped.</p>
</li>
<li>
<p>The system checks if the Program is installable. If not, the system performs Automatic Mapping by Name on any unmapped target Table Descriptors. If the Program is still not installable and there are still unmapped target Table Descriptors, the system creates Table instances in the current Work Area from the target Table Descriptors and maps them.</p>
</li>
<li>
<p>The system attempts to install the Program instance and its source and target Table instances in the current Work Area. The system displays a success or error message. If the installation fails, the error message displays the name of any objects that were not installable.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If any of the Table instances or the Program definition is not installable, the system cannot install the Program instance. See <a href="status.htm#BABHIEJG">Appendix A, "Installation Requirements for Each Object Type"</a> for the reasons these objects may not be installable.</div>
<p><a id="LSHDG635"></a><span class="subhead3">Log File&nbsp;</span>To see the log file for the installation, you must go to the Work Area Installation screen, as follows:</p>
<ol>
<li>
<p>Click the <span class="bold">Applications</span> tab. The main Application Development screen opens.</p>
</li>
<li>
<p>Click the name of the Work Area you are working in. The Work Area screen opens.</p>
</li>
<li>
<p>From the <span class="bold">Actions</span> drop-down list, select <span class="bold">Installation History</span>.</p>
</li>
<li>
<p>Click <span class="bold">Go</span>. The system displays the Installation History screen with the log files in chronological order.</p>
</li>
<li>
<p>Click the <span class="bold">View Log</span> link for the most recent installation attempt or for the date and time that you ran the install process. The system displays the log file.</p>
</li>
</ol>
<p>For information on installation and on reading the log file, see <a href="wa_install.htm#CHDGCFAF">"Installing a Work Area and Its Objects"</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHDEEBGJ"></a>
<div id="LSHDG636" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">IDE Launch Settings</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDEJDCH">About Launch Settings</a></p>
</li>
<li>
<p><a href="#BACBCBJG">Setting the Blind Break Value</a></p>
</li>
<li>
<p><a href="#BACGAGFC">Setting the Shared Snapshot Label Value</a></p>
</li>
</ul>
<a id="CHDEJDCH"></a>
<div id="LSHDG637" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Launch Settings</h3>
<p>You can work on Oracle LSH Programs from an integrated development environment (IDE) which connects to the Oracle database hosting Oracle LSH and retrieves data required for the Program.</p>
<p>To view data as you are developing an Oracle LSH Program in an IDE, do the following before you launch the IDE:</p>
<ul>
<li>
<p>Define and map the source Table Descriptors you need.</p>
</li>
<li>
<p>Install the Program instance; see <a href="#BABIBAGJ">"Installing Program Instances"</a>.</p>
</li>
<li>
<p>Specify the Launch Settings for blinding and data currency. See <a href="#BACBCBJG">"Setting the Blind Break Value"</a> and <a href="#BACGAGFC">"Setting the Shared Snapshot Label Value"</a>.</p>
</li>
</ul>
<p>Default launch settings are determined by the Data Currency and Blind Break values in the default Execution Setup and your privileges. For example, if the Blind Break setting in the default Execution Setup is Real (Blind Break) but you do not have Blind Break privileges on the Table instances mapped to the Program's source Table Descriptors, your only Blind Break option is Dummy.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must have Read Data privileges on the source Table instances to be able to see Dummy data, if you do not have blinding-related privileges.</div>
<p>If there is no Execution Setup defined, the default Blind Break value and options are defined by the blinding status of the Table instances and your privileges, and the default Data Currency value is Current. The values you set here apply only during the current session. See <a href="deftasks.htm#BABEIHJD">"Modifying an Execution Setup and Setting Parameters"</a> for information on setting the Data Currency and Blind Break system Parameters in the Execution Setup.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Launch Settings do not apply to statically referenced Table instances. A statically referenced Table instance is mapped to a source Table Descriptor of a Program containing a Source Code shared to the Program you are working on in the IDE; see <a href="#BABBIDGC">"Creating and Using Static Reference Source Code"</a>.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you generate an output on real blinded or real unblinded data, you need additional privileges to see the output. See "Blinding-Related Security Privileges" in the <span class="italic"><span class="italic">Oracle Life Sciences Data Hub Implementation Guide</span></span> for more information.</div>
</div>
<!-- class="sect2" -->
<a id="BACBCBJG"></a>
<div id="LSHDG638" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting the Blind Break Value</h3>
<p>This setting is relevant only when one or more source Table instances either currently or formerly contained blinded data (whose Blinding Flag is set to Yes). Special privileges are required to view real blinded or real unblinded data in these Table instances. You must have these special privileges on all such Tables, in order to see real data in any of them.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must have Read Data privileges in order to see any data at all.</div>
<p>The following choices are available depending both on the state of the data and on your security privileges:</p>
<ul>
<li>
<p><span class="bold">Not Applicable</span>. If none of the data has ever been blinded, the only option available is <span class="bold">Not Applicable</span>. No special privileges are required.</p>
</li>
<li>
<p><span class="bold">Dummy</span>. This is the only option available to you if you do not have blinding-related privileges for blinded Tables. You can also see this option if you have blinding-related privileges. In that case, you can select this option to work with dummy (not real) data in the IDE.</p>
</li>
<li>
<p><span class="bold">Real (Blind Break)</span>. If any of the data is currently blinded, and you have the required privileges, you can select this option to view real data in the IDE, according to your company's policies.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Blind Breaks are not allowed in <span class="bold">SAS Connected Mode With Work Area Data</span>. Therefore, if you select Real (Blind Break) in <span class="bold">SAS Connected Mode With Work Area Data</span>, you cannot see any data in SAS. See <a href="#BABGHAAC">"Connecting to SAS"</a>.</div>
</li>
<li>
<p><span class="bold">Real (Unblinded)</span>. If a blinded Table instance has now been unblinded, you can see real data for the Table instance, provided you have the required privileges. If there are more than one such Table instances, you need the required privileges for all of them to be able to use this option.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BACGAGFC"></a>
<div id="LSHDG639" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting the Shared Snapshot Label Value</h3>
<p>If all the relevant Table instances share one or more snapshot labels, those snapshot labels appear in this drop-down list and you can select one. In addition, you normally have the option to view the current data. Your options may be limited by the settings in the default Execution Setup.</p>
<p>You can apply snapshot labels to all the Table instances that a Program reads from or writes to, when you submit its Execution Setup; see <a href="deftasks.htm#BEIBHCIC">"Data Currency"</a>. You can also apply snapshot labels in the Work Area; see <a href="wa_install.htm#CHDBBHBG">"Adding, Removing, or Moving a Snapshot Label"</a>.</p>
<p>For more information on what snapshots are, see <a href="exec.htm#BCGEHDIE">"Data Snapshots"</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BACJEBAG"></a>
<div id="LSHDG640" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Modifying Programs</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BACJGBFG">Modifying Program Instance Properties</a></p>
</li>
<li>
<p><a href="#BACCCIJB">Modifying Program Definition Properties</a></p>
<ul>
<li>
<p><a href="#BABGIHAG">Modifying Table Descriptors</a></p>
</li>
<li>
<p><a href="#BABDJDEB">Modifying Source Code</a></p>
</li>
<li>
<p><a href="#BACFIHCI">Modifying Parameters</a></p>
</li>
<li>
<p><a href="#BACCBGDH">Modifying Planned Outputs</a></p>
</li>
</ul>
</li>
</ul>
<p>If you have the necessary privileges, you can modify a Program either through an instance of it in a Work Area or directly in the definition in its Domain or Application Area. In most cases it makes sense to work through an instance in a Work Area for the following reasons:</p>
<ul>
<li>
<p>In order to use or test changes to the definition you must create and install an instance of it.</p>
</li>
<li>
<p>If you work through an instance, the system automatically repoints the instance to the new version of the definition.</p>
</li>
</ul>
<p>However, if you need to change properties of the definition, you must work directly in the definition in its Domain or Work Area.</p>
<p>Whether you work in an instance or directly in the definition, when you check in the new version of the definition you have the opportunity to upgrade instances of the original definition to the new version; see <a href="deftasks.htm#BEIHAHEE">"Upgrading Object Instances to a New Definition Version"</a>.</p>
<a id="BACJGBFG"></a>
<div id="LSHDG641" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Modifying Program Instance Properties</h3>
<p>On the Program instance's Properties screen, click <span class="bold">Update</span> to enter changes. Oracle LSH creates a new version of the instance you are working on and applies your changes to it when you click <span class="bold">Apply</span>. Click <span class="bold">Cancel</span> to discard your changes and the new version.</p>
<p>You can modify some properties through the <span class="bold">Actions</span> drop-down list; see <a href="deftasks.htm#CIHDAIFF">"Using the Actions Drop-Down List"</a> for further information.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You must reinstall the Program for the changes to take effect.</div>
<p>You can modify the following:</p>
<p><a id="LSHDG642"></a><span class="subhead3">Name&nbsp;</span>See <a href="deftasks.htm#CHDBIJAH">"Naming Objects"</a> for further information.</p>
<p><a id="LSHDG643"></a><span class="subhead3">Description&nbsp;</span>See <a href="deftasks.htm#CHDIHBBC">"Creating and Using Object Descriptions"</a> for further information.</p>
<p><a id="BACHBIAH"></a><a id="LSHDG644"></a><span class="subhead3">Definition Source&nbsp;</span>This field applies to the instance only. It specifies the Program definition to which this Program instance points. It generally does not make sense to change the source definition for the following reasons:</p>
<ul>
<li>
<p>Changing the definition may result in a new set of Table Descriptors, Source Code, Parameters, and Planned Outputs.</p>
</li>
<li>
<p>Any new Table Descriptors are not mapped.</p>
</li>
<li>
<p>The Program's status changes to <span class="bold">Non Installable</span>.</p>
</li>
</ul>
<p>If you want to change to a new version of the same definition, use the <span class="bold">Upgrade Instance</span> option from the <span class="bold">Actions</span> drop-down list.</p>
</div>
<!-- class="sect2" -->
<a id="BACCCIJB"></a>
<div id="LSHDG645" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Modifying Program Definition Properties</h3>
<p>You can go to a Program definition's Properties screen in one of the following ways:</p>
<ul>
<li>
<p><span class="bold">From the Program's Properties screen</span>: Click the hyperlink of the Program definition that appears in the Definition field. See <a href="#BACFIHFC">"Definition"</a>.</p>
</li>
<li>
<p><span class="bold">From the Domain or Application Area where you created the definition</span>: Click Manage Definitions to view all the definitions in that Domain or Application Area. Click the definition name.</p>
</li>
</ul>
<p>Once on the Program definition screen, click <span class="bold">Update</span> to enter changes. Oracle LSH creates a new version of the definition. You can change the following properties:</p>
<p><a id="LSHDG646"></a><span class="subhead3">Name&nbsp;</span>See <a href="deftasks.htm#CHDBIJAH">"Naming Objects"</a> for further information.</p>
<p><a id="LSHDG647"></a><span class="subhead3">Description&nbsp;</span>See <a href="deftasks.htm#CHDIHBBC">"Creating and Using Object Descriptions"</a> for further information.</p>
<p>You can modify some properties through the <span class="bold">Actions</span> drop-down list; see <a href="deftasks.htm#CIHDAIFF">"Using the Actions Drop-Down List"</a> for further information.</p>
<a id="BABGIHAG"></a>
<div id="LSHDG648" class="sect3">
<h4 class="sect3">Modifying Table Descriptors</h4>
<p>Table Descriptors belong to the Program definition, but Table Descriptor mappings belong to the Program instance. You must check out the definition to add, remove, or update Table Descriptors, but not to map, unmap, or remap Table Descriptors.</p>
<p>If you need to change a Table Descriptor's columns, you must update the Table Descriptor's definition source either to a different Table definition that meets your needs, or to a new version of the same Table definition, after modifying the Table definition. If you do not have the necessary privileges to modify the source Table definition, you can probably copy the original Table definition, paste it into the current Application Area, modify it as necessary, and use it as the new definition source.</p>
<p>In the Program instance you can map the Table Descriptor to a different Table instance. See <a href="deftasks.htm#CIHDCCDA">"Mapping Table Descriptors to Table Instances"</a> for further information.</p>
</div>
<!-- class="sect3" -->
<a id="BABDJDEB"></a>
<div id="LSHDG649" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Modifying Source Code</h4>
<p>Source Codes belong to the Program definition. You must check out the definition to add, remove, or update Source Codes.</p>
<p>If a Source Code object has a value in its <span class="bold">Shared From</span> column, it is an instance of a Source Code definition in another Program. You can modify only a few of its properties; see <a href="#BABIIJEG">"Source Code Instance"</a>.</p>
<p>If a Source Code object does not have a value in its <span class="bold">Shared From</span> column, it's definition was created in this Program. You can modify all its properties here; see <a href="#BABIFHJE">"Source Code Definition"</a>.</p>
<p><a id="BABIIJEG"></a><a id="LSHDG650"></a><span class="subhead3">Source Code Instance&nbsp;</span>You can modify the Source Code name, description, definition source, order, SAS file reference name (if a SAS Program), instance subtype and instance classifications. You can upgrade to a different version of the Source Code definition; see <a href="#BACFIBFF">"Upgrading Source Code And Undoing Source Code Upgrades"</a>.</p>
<p>If you have the necessary privileges, you can go to the Program definition that contains the Source Code definition (it is listed in the <span class="bold">Shared From</span> column) in the Definitions subtab and modify it there, creating a new version. You must then change the definition source for the Source Code instance in this Program to the new version.</p>
<p><a id="BABIFHJE"></a><a id="LSHDG651"></a><span class="subhead3">Source Code Definition&nbsp;</span>If the Source Code definition was created in this Program (in which case there is no entry in the <span class="bold">Shared From</span> column) the Source Code definition is located in this Program definition, and you can modify it here.</p>
<p>You can edit the actual source code, either in the Editor box or by modifying the file in its development environment (such as SAS) and then uploading it again. You can also change the other Source Code definition properties: File Type, Sharable, Subtype, and classifications.</p>
<p>When you save your changes to a sharable Source Code definition, you have the option to find all instances of the original sharable Source Code and decide whether or not to update them to the new version of the Source Code. See <a href="deftasks.htm#BEIFHFAA">"Upgrading One or More Instances from the Definition"</a> for further information.</p>
</div>
<!-- class="sect3" -->
<a id="BACFIHCI"></a>
<div id="LSHDG652" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Modifying Parameters</h4>
<p>Parameters belong to the Program definition. You must check out the definition to add, remove, or update Parameters. See <a href="vars.htm#BACHGJBH">"Defining Parameters"</a> for information.</p>
<p>You can also change some Parameter values and settings in Execution Setups. Select <span class="bold">Execution Setups</span> from the <span class="bold">Actions</span> drop-down list in the Program instance in the Work Area. See <a href="deftasks.htm#BEIGAICB">"Creating, Modifying, and Submitting Execution Setups"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="BACCBGDH"></a>
<div id="LSHDG653" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Modifying Planned Outputs</h4>
<p>Planned Outputs belong to the Program definition. You must check out the definition to add, remove, or update Planned Outputs. See <a href="#BABJEDHC">"Defining Planned Outputs"</a> for further information.</p>
<p>You can change Planned Outputs' classifications, which affect the classifications of the actual outputs. See <a href="deftasks.htm#CHDCBGEI">"Classifying Outputs"</a> for further information.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDDFHHE"></a>
<div id="LSHDG654" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Setting Up Integrated Development Environments (IDEs)</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BACGEAJG">Setting Up Oracle SQL Developer or SQL*Plus as an IDE</a></p>
</li>
<li>
<p><a href="#CHDDFAHC">Setting Up SAS as an IDE</a></p>
</li>
</ul>
<p>See also:</p>
<p><a href="#CHDEEBGJ">IDE Launch Settings</a></p>
<a id="BACGEAJG"></a>
<div id="LSHDG1974" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting Up Oracle SQL Developer or SQL*Plus as an IDE</h3>
<p>To use either Oracle SQL Developer or SQL*Plus to edit and compile your Oracle LSH PL/SQL Programs, do the following on your local PC:</p>
<ul>
<li>
<p>Get the CD-ROM that contains the files <span class="bold">cdrconfig.xml</span> and <span class="bold">cdrclient.exe</span> from your system administrator and insert it into your PC. InstallShield automatically runs setup.exe, that loads cdrconfig.xml and cdrclient.exe to a location you specify on your local computer.</p>
</li>
<li>
<p>Ensure that <span class="bold">cdrconfig.xml</span> has the correct directory path for the Oracle SQL Developer or SQL*Plus executable.</p>
</li>
</ul>
<p class="subhead2"><a id="LSHDG1975"></a>Launching Oracle SQL Developer</p>
<p>When you click <span class="bold">Launch IDE</span> from an Oracle LSH PL/SQL Program, the following takes place:</p>
<ul>
<li>
<p>If your Oracle LSH PL/SQL Program contains a Source Code instance with a PL/SQL package in it, then Oracle LSH compiles your PL/SQL package.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If there are any bugs in your PL/SQL package, Oracle SQL Developer fails to launch and an error message related to the bug appears on the Oracle LSH screen.</div>
</li>
<li>
<p>Oracle LSH launches Oracle SQL Developer. Connect to the Oracle LSH database using your database user credentials.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you cannot find an Oracle LSH database connection to which you can connect, you may have to set up the connection. Contact your System Administrator for more information.</div>
</li>
<li>
<p>Table instances mapped to your Program's source Table Descriptors appear as <span class="italic">synonyms</span> in Oracle SQL Developer; for example, if the Oracle Name of a source Table descriptor is <code dir="ltr">DEMOG</code> then there will be a synonym by the name <code dir="ltr">DEMOG</code> in Oracle SQL Developer.</p>
</li>
<li>
<p>Table instances mapped to your Program's target Table Descriptors appear as empty <span class="italic">tables</span> in Oracle SQL Developer.</p>
<p>You can edit, compile, and execute your PL/SQL package in Oracle SQL Developer and these tables reflect the results of your data manipulation. However, the data is not written to Oracle LSH Table instances.</p>
</li>
<li>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you do not want to lose changes you made to the PL/SQL package in Oracle SQL Developer, you must upload your package back into the Oracle LSH PL/SQL Program's Source Code instance before you exit Oracle SQL Developer. See <a href="#BABDJDEB">"Modifying Source Code"</a> for instructions.</div>
</li>
</ul>
<p><a id="LSHDG1976"></a><span class="subhead3">Relaunching Oracle SQL Developer from within Oracle LSH&nbsp;</span>If you relaunch Oracle SQL Developer from within Oracle LSH:</p>
<ul>
<li>
<p>Oracle LSH overwrites the PL/SQL package in Oracle SQL Developer with the PL/SQL package contained in the Source Code instance of the Oracle LSH PL/SQL Program.</p>
</li>
<li>
<p>Oracle LSH overwrites any tables that exist in your database schema with the same name as Oracle LSH Tables mapped to the Oracle LSH PL/SQL Program.</p>
</li>
</ul>
<p><a id="LSHDG1977"></a><span class="subhead3">Relaunching Oracle SQL Developer from outside Oracle LSH&nbsp;</span>If you log in to Oracle SQL Developer from outside Oracle LSH, you do not get access to the source tables but you can edit the PL/SQL package.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDFAHC"></a>
<div id="LSHDG655" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Setting Up SAS as an IDE</h3>
<p>To use SAS as an integrated development environment (IDE), do the following on your local PC:</p>
<ul>
<li>
<p>Get the CD-ROM that contains the files <span class="bold">cdrconfig.xml</span> and <span class="bold">cdrclient.exe</span> from your system administrator and insert it into your PC. InstallShield automatically runs setup.exe, that loads cdrconfig.xml and cdrclient.exe to a location you specify on your local computer.</p>
</li>
<li>
<p>Install SAS on your PC in the location specified by your system administrator. The location must match the directory path specified in <span class="bold">cdrconfig.xml</span>.</p>
</li>
<li>
<p>Ensure that <span class="bold">cdrconfig.xml</span> has the correct directory path for the SAS executable.</p>
</li>
<li>
<p>Set the user preference for the SAS connection mode. See <a href="#BABGHAAC">"Connecting to SAS"</a>.</p>
</li>
<li>
<p>Install any software required to support the preferred connection mode <a href="#BABGHAAC">"Connecting to SAS"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDJGBGA"></a>
<div id="LSHDG656" class="sect2">
<h3 class="sect2">Setting Up Informatica as an IDE</h3>
<p>To use Informatica IDE for creating mappings and workflows from within Oracle LSH, do the following on your local PC:</p>
<ul>
<li>
<p>Get the CD-ROM that contains the files <span class="bold">cdrconfig.xml</span> and <span class="bold">cdrclient.exe</span> from your system administrator and insert it into your PC. InstallShield automatically runs setup.exe, that loads cdrconfig.xml and cdrclient.exe to <code dir="ltr"><span class="codeinlineitalic">Drive</span></code><code dir="ltr">:\Program Files\Oracle\CDR</code>.</p>
</li>
<li>
<p>Install the Informatica client on your PC in the location specified by your system administrator. The location must match the directory path specified in <span class="bold">cdrconfig.xml</span>.</p>
</li>
<li>
<p>Ensure that <span class="bold">cdrconfig.xml</span> has the correct directory path for the Informatica executable.</p>
</li>
<li>
<p>Create a system Environment Variable in Windows with the name INFA_DOMAINS_FILE and set its value to the full path of the <code dir="ltr">domains.infa</code> file; for example:</p>
<pre dir="ltr">
INFA_DOMAINS_FILE=<span class="italic">drive</span>:\Informatica\PowerCenter8.1.1\domains.infa
</pre></li>
<li>
<p>Set up a user Data Source Name (DSN) named <span class="bold">LSHModel</span> for your Oracle LSH database account. Oracle LSH imports source and target Tables from your database account into the Informatica folder using this DSN.</p>
<p>Consult Microsoft Windows online help for instructions on setting up ODBC Data Source Names.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment70">
<tr>
<td class="cellalignment77">
<table class="cellalignment75">
<tr>
<td class="cellalignment74"><a href="tables.htm"><img width="24" height="24" src="../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment74"><a href="vars.htm"><img width="24" height="24" src="../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2018,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment79">
<table class="cellalignment73">
<tr>
<td class="cellalignment74"><a href="../index.htm"><img width="24" height="24" src="../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment74"><a href="../nav/portal_booklist.htm"><img width="24" height="24" src="../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment74"><a href="toc.htm"><img width="24" height="24" src="../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment74"><a href="../dcommon/html/feedback.htm"><img width="24" height="24" src="../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
